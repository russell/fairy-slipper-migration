.. http:get:: /v2.0
   :title: Get version details
   :synopsis: 

   Gets detailed information about a specified version of the Identity
   API.

   :requestexample: v2/examples/admin-getVersionInfo_req.txt
   :responseexample 200: v2/examples/admin-getVersionInfo_resp_200.txt
   :responseexample 203: v2/examples/admin-getVersionInfo_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-versions
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/users/{user_id}/roles
   :title: List user global roles
   :synopsis: Lists global roles for a specified user. Excludes tenant roles.

   

   :responseexample 200: v2/examples/admin-listUserGlobalRoles_resp_200.json
   :responseexample 203: v2/examples/admin-listUserGlobalRoles_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-users
   :parameter user_id: The user ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tenants/{tenantId}
   :title: Get tenant information by ID
   :synopsis: Gets detailed information about a specified tenant by ID.

   

   :requestexample: v2/examples/admin-getTenantById_req.txt
   :responseexample 200: v2/examples/admin-getTenantById_resp_200.txt
   :responseexample 203: v2/examples/admin-getTenantById_resp_203.json
   :responseexample 404: v2/examples/admin-getTenantById_resp_404.txt
   :responseexample 403: v2/examples/admin-getTenantById_resp_403.txt
   :responseexample 401: v2/examples/admin-getTenantById_resp_401.txt
   :accepts: application/json
   :produces: application/json
   :tag: admin-tenants
   :parameter tenantId: The tenant ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:post:: /v2.0/users
   :title: Create user
   :synopsis: Creates a user.

   

   :requestexample: v2/examples/admin-createUser_req.txt
   :responseexample 201: v2/examples/admin-createUser_resp_201.json
   :responseexample 200: v2/examples/admin-createUser_resp_200.txt
   :responseexample 404: v2/examples/admin-createUser_resp_404.txt
   :responseexample 403: v2/examples/admin-createUser_resp_403.txt
   :responseexample 401: v2/examples/admin-createUser_resp_401.txt
   :responseexample 400: v2/examples/admin-createUser_resp_400.txt
   :responseexample 409: v2/examples/admin-createUser_resp_409.txt
   :accepts: application/json
   :produces: application/json
   :tag: admin-users
   :requestschema: v2/admin-createUser.json
   :reqheader X-Auth-Token: A valid authentication token for an
                            administrative user.
   :statuscode 201: 
   :statuscode 200: 
   :statuscode 413: 
   :statuscode 415: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 
   :statuscode 409: 


.. http:get:: /v2.0/users
   :title: Get user information by name
   :synopsis: Gets detailed information about a specified user by user name.

   

   :requestexample: v2/examples/admin-getUserByName_req.txt
   :responseexample 200: v2/examples/admin-getUserByName_resp_200.txt
   :responseexample 203: v2/examples/admin-getUserByName_resp_203.json
   :responseexample 403: v2/examples/admin-getUserByName_resp_403.txt
   :responseexample 401: v2/examples/admin-getUserByName_resp_401.txt
   :accepts: application/json
   :produces: application/json
   :tag: admin-users
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/extensions/{alias}
   :title: Get extension details
   :synopsis: Gets detailed information for a specified extension.

   Specify the extension alias in the URI.

   :responseexample 200: v2/examples/admin-getExtension-v2.0_resp_200.json
   :responseexample 203: v2/examples/admin-getExtension-v2.0_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-versions
   :parameter alias: The extension name.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tenants/{tenantId}/users/{userId}/roles
   :title: List roles for user
   :synopsis: Lists roles for a specified user on a specified tenant. Excludes global roles.

   

   :requestexample: v2/examples/admin-listRolesForUserOnTenant_req.txt
   :responseexample 200: v2/examples/admin-listRolesForUserOnTenant_resp_200.txt
   :responseexample 203: v2/examples/admin-listRolesForUserOnTenant_resp_203.json
   :responseexample 403: v2/examples/admin-listRolesForUserOnTenant_resp_403.txt
   :responseexample 401: v2/examples/admin-listRolesForUserOnTenant_resp_401.txt
   :accepts: application/json
   :produces: application/json
   :tag: admin-tenants
   :parameter userId: The user ID.
   :parameter tenantId: The tenant ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/users/{user_id}
   :title: Get user information by ID
   :synopsis: Gets detailed information about a specified user by user ID.

   

   :requestexample: v2/examples/admin-getUserById_req.txt
   :responseexample 200: v2/examples/admin-getUserById_resp_200.txt
   :responseexample 203: v2/examples/admin-getUserById_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-users
   :parameter user_id: The user ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tokens/{tokenId}/endpoints
   :title: List endoints for token
   :synopsis: Lists the endpoints associated with a specified token.

   

   :responseexample 200: v2/examples/admin-listEndpointsForToken_resp_200.json
   :responseexample 203: v2/examples/admin-listEndpointsForToken_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-tokens
   :parameter tokenId: Required. The token ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tenants
   :title: List tenants
   :synopsis: Lists all tenants.

   

   :responseexample 200: v2/examples/admin-listTenants_resp_200.json
   :responseexample 203: v2/examples/admin-listTenants_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-tenants
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tenants
   :title: Get tenant information by name
   :synopsis: Gets detailed information about a specified tenant by name.

   

   :responseexample 200: v2/examples/admin-getTenantByName_resp_200.json
   :responseexample 203: v2/examples/admin-getTenantByName_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-tenants
   :query name: The name of the tenant.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:put:: /v2.0/users/{userId}
   :title: Update user
   :synopsis: Updates a user.

   

   :requestexample: v2/examples/admin-updateUser_req.json
   :responseexample 201: v2/examples/admin-updateUser_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-users
   :requestschema: v2/admin-updateUser.json
   :parameter userId: The user ID.
   :statuscode 201: 
   :statuscode 413: 
   :statuscode 415: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:delete:: /v2.0/users/{userId}
   :title: Delete user
   :synopsis: Deletes a user.

   

   :tag: admin-users
   :parameter userId: The user ID.
   :statuscode 204: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:post:: /v2.0/tokens
   :title: Authenticate for admin API
   :synopsis: Authenticates and generates a token.

   A REST interface provides client authentication by using the POST
   method with ``v2.0/tokens`` as the path. Include a payload of
   credentials in the body.
   
   The Identity API is a RESTful web service. It is the entry point to
   all service APIs. To access the Identity API, you must know its
   URL.
   
   Each REST request against the Identity Service requires the ``X
   -Auth-Token`` header. Clients obtain this token and the URL
   endpoints for other service APIs by supplying their valid
   credentials to the authentication service.
   
   If the authentication token has expired, this call returns the HTTP
   ``401`` status code.
   
   If the token specified in the request body has expired, this call
   returns the HTTP ``404`` status code.
   
   The Identity API treats expired tokens as no longer valid tokens.
   
   The deployment determines how long expired tokens are stored.

   :requestexample: v2/examples/admin-authenticate_req.txt
   :responseexample 200: v2/examples/admin-authenticate_resp_200.txt
   :responseexample 203: v2/examples/admin-authenticate_resp_203.json
   :responseexample 401: v2/examples/admin-authenticate_resp_401.txt
   :accepts: application/json
   :produces: application/json
   :tag: admin-tokens
   :requestschema: v2/admin-authenticate.json
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:get:: /v2.0/tokens/{tokenId}
   :title: Validate token
   :synopsis: Validates a token and confirms that it belongs to a specified tenant.

   Returns the permissions relevant to a particular client. Valid
   tokens are in the ``/tokens/{tokenId}`` path. A user should expect
   an ``itemNotFound (404)`` fault for an token that is not valid.

   :requestexample: v2/examples/admin-validateToken_req.txt
   :responseexample 200: v2/examples/admin-validateToken_resp_200.txt
   :responseexample 203: v2/examples/admin-validateToken_resp_203.json
   :accepts: application/json
   :produces: application/json
   :tag: admin-tokens
   :parameter tokenId: Required. The token ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


.. http:head:: /v2.0/tokens/{tokenId}
   :title: Validate token (admin)
   :synopsis: Validates a token and confirms that it belongs to a specified tenant, for performance.

   

   :tag: admin-tokens
   :parameter tokenId: Required. The token ID.
   :statuscode 200: 
   :statuscode 203: 
   :statuscode 204: 
   :statuscode 413: 
   :statuscode 405: 
   :statuscode 404: 
   :statuscode 403: 
   :statuscode 401: 
   :statuscode 400: 
   :statuscode 503: 


