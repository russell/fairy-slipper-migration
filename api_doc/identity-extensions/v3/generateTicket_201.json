{
  "type": "object", 
  "properties": {
    "ticket": {
      "required": true, 
      "type": "string", 
      "description": "The ticket is encrypted with the long-term key of the source and\ncontains a Base64-encoded JSON object containing the following key\nand value pairs:\n\n- ``skey`` . The newly-generated Base64-encoded message signing key.\n\n- ``ekey`` . The newly-generated Base64-encoded message encryption\n  key.\n\n- ``esek`` . Encrypted signing and encryption key pair for the\n  receiver.\n\nFor example:\n\n{ \"skey\": \"ZjhkuYZH8y87rzhgi7...\", \"ekey\": \"Fk8yksa8z8zKtakc8s...\", \"esek\": \"KBo8fajfo8ysad5hq2...\" }The long-term key of the destination is used to encrypt the\n``esek`` value. The ``esek`` value contains a Base64-encoded JSON\nobject that contains the following key and value pairs:\n\n- ``key`` . The Base64-encoded random key that is used to generate\n  the signing and encryption keys.\n\n- ``timestamp`` . The time stamp when the key was created.\n\n- ``ttl`` . An integer value that specifies the validity length of\n  the key, in seconds.\n\nFor example:\n\n{ \"key\": \"Afa8sad2hgsd7asv7ad...\", \"timestamp\": \"2012-03-26T10:01:01.720000\", \"ttl\": 28800 }The ``key`` and ``timestamp`` values are used as inputs to the HKDF\n``expand`` function to generate the signing and encryption keys, as\ndescribed in the overview on this page.\n\nThe ``timestamp`` and ``ttl`` values must equal the ``expiration``\ntime stamp value that is contained in the response metadata.", 
      "format": ""
    }, 
    "signature": {
      "required": true, 
      "type": "string", 
      "description": "A Base64-encoded HMAC signature over the Base64-encoded request\nmetadata object. For example:\n\n``Base64encode(HMAC(SigningKey,RequestMetadata))``\n\nThe long-term key of the requester is used for the signature. When\nthe KDS receives the request, the KDS must access the ``source``\nvalue from the request metadata to look up the associated long-term\nkey to use to verify the signature. The KDS should not access any\nother data that is contained in the request metadata before\nverifying the signature. If the KDS fails to verify the signature,\nit risks issuing a ticket to a party who is impersonating the\nsource.", 
      "format": ""
    }, 
    "metadata": {
      "required": true, 
      "type": "string", 
      "description": "A Base64-encoded JSON object that contains these key and value\npairs:\n\n- ``source`` . The identity who requests the ticket.\n\n- ``destination`` . The target for which the ticket will be valid.\n\n- ``timestamp`` . The current time stamp from the requester.\n\n- ``nonce`` . Random, single-use data.\n\nThe time stamp and nonce are required to prevent replay attacks.\n\nFor example:\n\n{ \"source\": \"scheduler.host.example.com\", \"destination\": \"compute.host.example.com\", \"timestamp\": \"2012-03-26T10:01:01.720000\", \"nonce\": 1234567890 }", 
      "format": ""
    }
  }
}