{
  "type": "object", 
  "properties": {
    "files": {
      "required": false, 
      "type": "string", 
      "description": "Supplies the contents of files referenced in the template or the\nenvironment. Stack templates and resource templates can explicitly\nreference files by using the ``get_file`` intrinsic function. In\naddition, the ``environment`` parameter can contain implicit\nreferences to files.\n\nThe value is a JSON object, where each key is a relative or\nabsolute URI which serves as the name of a file, and the associated\nvalue provides the contents of the file. The following code shows\nthe general structure of this parameter.\n\n.. code-block:: json\n   { ...\n       \"files\": {\n           \"fileA.yaml\": \"Contents of the file\",\n           \"file:///usr/fileB.template\": \"Contents of the file\",\n           \"http://example.com/fileC.template\": \"Contents of the file\"\n       }\n   ... }\nAdditionally, some template authors encode their user data in a\nlocal file. The Orchestration client examines the template for the\n``get_file`` intrinsic function and adds an entry to the ``files``\nmap with the path to the file as the name and the file contents as\nthe value. So, a simple example looks like this:\n\n.. code-block:: json\n   {\n   \u00a0\u00a0\u00a0\"files\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"myfile\": \"#!/bin/bash\\necho \\\"Hello world\\\" > /root/testfile.txt\"\n   \u00a0\u00a0\u00a0},\n      ...,\n   \u00a0\u00a0\u00a0\"stack_name\": \"teststack\",\n   \u00a0\u00a0\u00a0\"template\": {\n         ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resources\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"my_server\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"OS::Nova::Server\",\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n                  ...,\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user_data\": {\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"get_file\": \"myfile\"\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n   \u00a0\u00a0\u00a0},\n   \u00a0\u00a0\u00a0\"timeout_mins\": 60\n   }\nDo not use this parameter to provide the content of the template\nlocated at the address specified by ``template_url`` . Instead, use\nthe ``template`` parameter to supply the template content as part\nof the request.", 
      "format": ""
    }, 
    "parameters": {
      "required": false, 
      "type": "string", 
      "description": "This parameter supplies updated arguments for parameters defined in\nthe stack template.\n\nThe value is a JSON object, where each key is the name of a\nparameter defined in the template and the associated value is the\nargument to use for that parameter when instantiating the template.\nThe following code shows the general structure of this parameter.\nIn the example, ``a`` and ``b`` are the names of two parameters\ndefined in the template... code-block:: json    { ...\n\"parameters\": {                          \"a\": \"Value\",\n\"b\": \"3\"                          }                          ... }\n\nWhile the service accepts JSON numbers for parameters with the type\n``number`` and JSON objects for parameters with the type ``json`` ,\nall parameter values are converted to their string representation\nfor storage in the created Stack. Clients are encouraged to send\nall parameter values using their string representation for\nconsistency between requests and responses from the Orchestration\nservice.\n\nYou must specify a value for each template parameter that does not\nhave a default value. However, this parameter cannot contain JSON\nproperties with names that do not match a parameter that is defined\nin the template.", 
      "format": ""
    }, 
    "tags": {
      "required": false, 
      "type": "string", 
      "description": "One or more simple string tags to associate with the stack. To\nassociate multiple tags with a stack, separate the tags with\ncommas. For example, ``tag1,tag2`` .", 
      "format": ""
    }, 
    "environment": {
      "required": false, 
      "type": "string", 
      "description": "A JSON environment for the stack.", 
      "format": ""
    }, 
    "template_url": {
      "required": false, 
      "type": "string", 
      "description": "A URI to the location containing the stack template on which to\nperform the specified operation.\n\nSee the description of the ``template`` parameter for information\nabout the expected template content located at the URI.\n\nThis parameter is only required when you omit the ``template``\nparameter. If you specify both parameters, this parameter is\nignored.", 
      "format": ""
    }, 
    "template": {
      "required": false, 
      "type": "string", 
      "description": "The stack template on which to perform the specified operation.\n\nThis parameter is always provided as a ``string`` in the JSON\nrequest body. The content of the string is a JSON- or YAML-\nformatted Orchestration template. For example:\n\n.. code-block:: json\n   \"template\": {\n       \"heat_template_version\": \"2013-05-23\",\n       ...}\nThis parameter is required only when you omit the ``template_url``\nparameter. If you specify both parameters, this value overrides the\n``template_url`` parameter value.", 
      "format": ""
    }, 
    "timeout_mins": {
      "required": false, 
      "type": "string", 
      "description": "The timeout for stack creation in minutes.", 
      "format": ""
    }
  }
}