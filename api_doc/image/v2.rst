.. http:get:: /v2/schemas/metadefs/namespaces
   :title: Get metadata definition namespaces schema
   :synopsis: Gets a JSON schema document that represents a metadata definition namespaces entity. (Since API v2.1.)

   A namespaces entity is a container for namespace entities.
   
   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefNamespacesSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/images
   :title: Get images schema
   :synopsis: Gets a json-schema document that represents an images entity. (Since Images v2.0.)

   An images entity is a container of image entities.
   
   The following schema is solely an example. Consider only the
   response to the API call as authoritative.

   :responseexample 200: v2/examples/getImagesSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: image-schemas
   :statuscode 200: 


.. http:get:: /v2/metadefs/resource_types
   :title: List resource types
   :synopsis: Lists resource types.

   Lists all possible resource types. You can assign metadata
   definition namespaces to these resource types. See the metadata
   definition resource types section.

   :responseexample 200: v2/examples/listResourceTypes-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-resourcetype
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/object
   :title: Get metadata definition object schema
   :synopsis: Gets a JSON schema document that represents a metadata definition object entity. (Since API v2.1.)

   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefObjectSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:post:: /v2/metadefs/namespaces/{namespace}/tags
   :title: Create tags
   :synopsis: Creates one or more tag definitions in a specified namespace.

   

   :requestexample: v2/examples/createTags-v2_req.json
   :responseexample 201: v2/examples/createTags-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-tag
   :requestschema: v2/createTags-v2.json
   :statuscode 201: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/tags
   :title: List tags
   :synopsis: Lists the tag definitions within a namespace.

   To manually paginate through the list of tags, use the ``limit``
   and ``marker`` parameters.
   
   To sort the results of this operation use the ``sort_key`` and
   ``sort_dir`` parameters. The API uses the natural sort order of the
   tag attribute of the specified ``sort_key`` parameter.

   :responseexample 200: v2/examples/listTags-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-tag
   :requestschema: v2/listTags-v2.json
   :query limit: Requests a specified page size of returned items from
                 the query. Returns a number of items up to the
                 specified limit value. Use the ``limit`` parameter to
                 make an initial limited request and use the ID of the
                 last-seen item from the response as the ``marker``
                 parameter value in a subsequent limited request.
   :query marker: Specifies the ID of the last-seen item. Use the
                  ``limit`` parameter to make an initial limited
                  request and use the ID of the last-seen item from
                  the response as the ``marker`` parameter value in a
                  subsequent limited request.
   :query sort_key: Sort key. A valid value is an attribute, such as
                    ``name`` . for sorting. Default is ``created_at``
                    .
   :query sort_dir: Sort direction. A valid value is ``asc``
                    (ascending) or ``desc`` (descending). Default is
                    ``desc`` .
   :statuscode 200: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}/tags
   :title: Delete all tag definitions
   :synopsis: Deletes all tag definitions within a namespace.

   You cannot delete tags in a namespace with the 'protected'
   attribute set to true (boolean); the response returns the HTTP 403
   status code.
   
   You must first set the ``protected`` attribute to false (boolean)
   on the namespace and then perform the delete. The response is empty
   and returns the HTTP 204 status code.

   :tag: metadef-tag
   :requestschema: v2/deleteAllTags-v2.json
   :statuscode 403: 
   :statuscode 204: 


.. http:put:: /v2/images/{image_id}/tags/{tag}
   :title: Add image tag
   :synopsis: Adds a specified tag to a specified image. (Since Image API v2.0.)

   

   :tag: image-tags
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :parameter tag: Image tag.
   :statuscode 204: 


.. http:delete:: /v2/images/{image_id}/tags/{tag}
   :title: Delete image tag
   :synopsis: Deletes a specified tag from a specified image. (Since Image API v2.0.)

   

   :tag: image-tags
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :parameter tag: Image tag.
   :statuscode 204: 


.. http:post:: /v2/metadefs/namespaces/{namespace}/resource_types
   :title: Create resource type association
   :synopsis: Creates a resource type association in a namespace.

   

   :requestexample: v2/examples/createResourceTypeAssoc-v2_req.json
   :responseexample 201: v2/examples/createResourceTypeAssoc-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-resourcetype
   :requestschema: v2/createResourceTypeAssoc-v2.json
   :parameter namespace: Unique namespace.
   :statuscode 201: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/resource_types
   :title: List resource type associations
   :synopsis: Lists resource type associations in a specified namespace.

   The response body lists resource type association entities.

   :responseexample 200: v2/examples/listResourceTypeAssocs-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-resourcetype
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:post:: /v2/metadefs/namespaces/{namespace}/objects
   :title: Create object
   :synopsis: Creates an object definition in a specified namespace.

   

   :requestexample: v2/examples/createObject-v2_req.json
   :responseexample 201: v2/examples/createObject-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-object
   :requestschema: v2/createObject-v2.json
   :parameter namespace: Unique namespace.
   :statuscode 201: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/objects
   :title: List objects
   :synopsis: Lists object definitions within a namespace.

   Returns a subset of the larger collection of namespaces and a link
   that you can use to get the next set of namespaces. You should
   always check for the presence of a ``next`` link and use it as the
   URI in a subsequent HTTP GET request. You should follow this
   pattern until a ``next`` link is no longer provided. The next link
   preserves any query parameters that you send in your initial
   request. You can use the ``first`` link to jump back to the first
   page of the collection. If you prefer to paginate through
   namespaces manually, use the ``limit`` and ``marker`` parameters.
   
   The list operation accepts ``resource_types`` and ``visibility`` as
   query parameters that let you filter the results of the returned
   collection.
   
   For example, sending a ``resource_types`` filter of
   ``OS::Glance::Image,OS::Nova::Flavor`` filters the namespaces to
   include only namespaces that are associated to the given resource
   types.
   
   You can sort the results of this operation by using the
   ``sort_key`` and ``sort_dir`` parameters. The API uses the natural
   sorting of whatever namespace attribute is provided as the
   ``sort_key`` .

   :responseexample 200: v2/examples/listObjects-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-object
   :parameter namespace: Unique namespace.
   :query visibility: Filter parameter.  Shows only namespaces with
                      the specified visibility value or values.  Valid
                      values are ``public`` and ``private`` . If you
                      omit this parameter, the response shows
                      ``public`` and ``private`` namespaces.
   :query resource_types: Filter parameter.  Shows only namespaces
                          with the specified resource type or types.
                          Specify multiple values as a comma-separated
                          list. For example, set the
                          ``resource_types`` filter to
                          ``OS::Glance::Image,OS::Nova::Flavor`` to
                          include only namespaces that are associated
                          with the specified resource types.
   :query sort_key: Sort key. A valid value is an attribute, such as
                    ``namespace`` , for sorting. Default is
                    ``created_at`` .
   :query sort_dir: Sort direction. A valid value is ``asc``
                    (ascending) or ``desc`` (descending). Default is
                    ``desc`` .
   :statuscode 200: 


.. http:post:: /v2/metadefs/namespaces
   :title: Create namespace
   :synopsis: Creates a namespace.

   The namespace is created with a ``Location`` header that contains
   the newly-created URI for the namespace.

   :requestexample: v2/examples/createNamespace-v2_req.json
   :responseexample 201: v2/examples/createNamespace-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-namespace
   :requestschema: v2/createNamespace-v2.json
   :statuscode 201: 


.. http:get:: /v2/metadefs/namespaces
   :title: List namespaces
   :synopsis: Lists public namespaces.

   Returns a subset in the larger collection of namespaces and a link
   that you can use to get the next set of namespaces. Check for the
   presence of a ``next`` link and use it as the URI in a subsequent
   HTTP GET request. Follow this pattern until a ``next`` link is no
   longer provided. The ``next`` link preserves any query parameters
   that you send in your initial request. You can use the ``first``
   link to return to the first page in the collection. If you prefer
   to paginate through namespaces manually, use the ``limit`` and
   ``marker`` parameters.
   
   The list operation accepts the ``resource_types`` and
   ``visibility`` query parameters, which let you filter the results
   in the returned collection.
   
   To sort the results of this operation, use the ``sort_key`` and
   ``sort_dir`` parameters. The API uses the natural sorting order in
   the namespace attribute that you provide as the ``sort_key``
   parameter.

   :responseexample 200: v2/examples/listNamespaces-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-namespace
   :query limit: Requests a specified page size of returned items from
                 the query. Returns a number of items up to the
                 specified limit value. Use the ``limit`` parameter to
                 make an initial limited request and use the ID of the
                 last-seen item from the response as the ``marker``
                 parameter value in a subsequent limited request.
   :query marker: Specifies the ID of the last-seen item. Use the
                  ``limit`` parameter to make an initial limited
                  request and use the ID of the last-seen item from
                  the response as the ``marker`` parameter value in a
                  subsequent limited request.
   :query visibility: Filter parameter. Namespace visibility. Valid
                      values are ``public`` and ``private`` . Default
                      is ``public`` .
   :query resource_types: Filter parameter. Specify this value as
                          comma- separated list. For example, send the
                          ``resource_types`` filter of
                          ``OS::Glance::Image,OS::Nova::Flavor`` to
                          filter the namespaces by the specified
                          resource types.
   :query sort_key: Sort key. Use attributes like ``namespace`` for
                    sorting. Default is ``created_at`` .
   :query sort_dir: Sort direction. Valid values are ``asc``
                    (ascending) and ``desc`` (descending). Default is
                    ``desc`` .
   :statuscode 200: 


.. http:patch:: /v2/images/{image_id}
   :title: Update image
   :synopsis: Updates a specified image. (Since Image API v2.0.)

   Depending on the referenced target location, this operation
   performs one of the following functions:
   
   - The target location is an array index. A new value is inserted
     into the array at the specified index.
   
   - The target location is an object member that does not exist. A new
     member is added to the object.
   
   - The target location is an object member that exists. The member
     value is replaced.
   
   The operation object MUST contain a ``value`` member that specifies
   the value to add. For example:
   
   .. code-block:: json
   
      {
         "op": "add",
         "path": "/a/b/c",
         "value": [
            "foo",
            "bar"
         ]
      }
   The target location MUST reference one of these values:
   
   - The root of the target document. The specified value is the entire
     content of the target document.
   
   - A member to add to an object. The specified value is added to that
     object at the specified location. If the member already exists,
     it is replaced by the specified value.
   
   - An element to add to the array. The specified value is added to
     the array at the specified location. Any element that is at or
     above the specified index is shifted one position to the right.
     The specified index MUST NOT be greater than the number of
     elements in the array. If the hyphen (-) character is used to
     index the end of the array (see [RFC6901]), the value is appended
     to the array.
   
   Because this operation adds to existing objects and arrays, its
   target location often does not exist.
   
   The request body must conform to one of these media types:
   
   - ``application/openstack-images-v2.0-json-patch``
   
   - ``application/openstack-images-v2.1-json-patch`` (Since Image API
     v2.2.)
   
   You can also use the PATCH method to add or remove image
   properties.
   
   For information about the PATCH method and the available media
   types, see Image API v2 HTTP PATCH media types .
   
   Preconditions
   
   - When you add or replace a location to the specified image, you
     must set the ``disk_format`` and ``container_format`` parameters
     in the image.
   
   - When you replace a location, a location must be previously set in
     the image.
   
   Synchronous Postconditions
   
   - With correct permissions, you can view the updated values of the
     attributes of the image.
   
   - After you add a location to an image that had no location and with
     correct permissions, you can use API calls to view the image
     status as ``active`` .
   
   - After you remove all locations from the image and with correct
     permissions, you can use API calls to view the image status as
     ``queued`` .
   
   Troubleshooting
   
   - If you cannot update locations, your request might be missing some
     information. Make sure that you meet the preconditions and run
     the request again. If the request fails again, review your API
     request.

   :requestexample: v2/examples/updateImage-v2_req.json
   :responseexample 200: v2/examples/updateImage-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :requestschema: v2/updateImage-v2.json
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 200: 


.. http:get:: /v2/images/{image_id}
   :title: Get image details
   :synopsis: Gets details for a specified image. (Since Image API v2.0.)

   Response body is a single image entity.
   
   Preconditions
   
   - The specified image must exist.

   :responseexample 200: v2/examples/getImage-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 200: 
   :statuscode 404: 


.. http:delete:: /v2/images/{image_id}
   :title: Delete image
   :synopsis: Deletes a specified image. (Since Image API v2.0.)

   You cannot delete images with the 'protected' attribute set to true
   (boolean).
   
   Preconditions
   
   - You can delete an image in all status except ``deleted`` .
   
   - You must first set the 'protected' attribute to ``false``
     (boolean) and then perform the delete.
   
   Synchronous Postconditions
   
   - The response is empty and returns the HTTP 204 status code.
   
   - The image is deleted in images index.
   
   - The binary image data managed by OpenStack Image service is
     deleted from the storage node if the deleted image stores image
     data in the node.
   
   TroubleShooting
   
   - The response returns the HTTP 403 status code when the
     ``protected`` attribute is set to ``true`` even if you have
     correct permissions. Ensure that you meet the preconditions and
     run the request again. If the request fails again, review your
     API request.

   :tag: images
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 403: 
   :statuscode 204: 


.. http:post:: /v2/metadefs/namespaces/{namespace}/properties
   :title: Create property
   :synopsis: Creates a property definition within a namespace.

   The schema is a subset of JSON property definition schema.

   :requestexample: v2/examples/createProperty-v2_req.json
   :responseexample 201: v2/examples/createProperty-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-property
   :requestschema: v2/createProperty-v2.json
   :statuscode 201: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/properties
   :title: List properties
   :synopsis: Lists property definitions within a namespace.

   Returns a list of property definitions in a namespace.

   :responseexample 200: v2/examples/listProperties-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-property
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:post:: /v2/images/{image_id}/actions/reactivate
   :title: Reactivate image
   :synopsis: Reactivates a specified image. (Since Image API v2.0.)

   The reactivate operation returns an error if the image status is
   not ``active`` or ``deactivated`` .
   
   Preconditions
   
   - The specified image must exist.

   :responseexample 204: v2/examples/reactivateImage-v2_resp_204.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 204: 


.. http:get:: /
   :title: List API versions
   :synopsis: Lists information about all Image service API versions.

   

   :responseexample 300: v2/examples/listVersions-image-v2_resp_300.json
   :responseexample 200: v2/examples/listVersions-image-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: versions-images
   :statuscode 300: 
   :statuscode 200: 


.. http:get:: /v2/schemas/member
   :title: Get image member schema
   :synopsis: Gets a json-schema document that represents an image member entity. (Since Images v2.1.)

   The following schema is solely an example. Consider only the
   response to the API call as authoritative.

   :responseexample 200: v2/examples/getImageMemberSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: image-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/tags
   :title: Get metadata definition tags schema
   :synopsis: Gets a JSON schema document that represents a metadata definition tags entity. (Since API v2.1.)

   A tags entity is a container for tag entities.
   
   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefTagsSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/properties
   :title: Get metadata definition properties schema
   :synopsis: Gets a JSON schema document that represents a metadata definition properties entity. (Since API v2.1.)

   A properties entity is a container for property entities.
   
   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefPropertiesSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/property
   :title: Get metadata definition property schema
   :synopsis: Gets a JSON schema document that represents a metadata definition property entity. (Since API v2.1.)

   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefPropertySchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/images/{image_id}/members/{member_id}
   :title: Show image member details
   :synopsis: Shows image member details.

   Response body is a single image member entity. (Since Image API
   v2.2.)
   
   Preconditions
   
   - The specified image must exist.
   
   - You must be the owner or a member of the specified image.

   :responseexample 200: v2/examples/getImageMember-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: members
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :parameter member_id: Image member ID. For example, the tenant ID
                         of the user with whom the image is being
                         shared.
   :statuscode 200: 


.. http:put:: /v2/images/{image_id}/members/{member_id}
   :title: Update image member
   :synopsis: Sets the specified status for the specified member of the specified image. (Since Image API v2.1.)

   Preconditions
   
   - The specified images must exist.
   
   - You must be a member of the specified image.
   
   Synchronous Postconditions
   
   - If you update the member status to ``accepted`` and have the
     correct permissions, you see the image in list images responses.
   
   - With correct permissions, you can see the updated member status of
     the image through API calls.

   :requestexample: v2/examples/updateImageMember-v2_req.json
   :responseexample 200: v2/examples/updateImageMember-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: members
   :requestschema: v2/updateImageMember-v2.json
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :parameter member_id: Image member ID. For example, the tenant ID
                         of the user with whom the image is being
                         shared.
   :statuscode 200: 


.. http:delete:: /v2/images/{image_id}/members/{member_id}
   :title: Delete image member
   :synopsis: Deletes a specified tenant ID from the member list of the specified image. (Since Image API v2.1.)

   Preconditions
   
   - The specified image must exist.
   
   - You must be the owner of the specified image.
   
   Synchronous Postconditions
   
   - The specified member is removed from the image members.
   
   Troubleshooting
   
   - Even if you have correct permissions, if you are not the owner of
     the specified image, the request returns the HTTP 403 error code.
     Ensure that you meet the preconditions and run the request again.
     If the request fails again, review your API request.

   :tag: members
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :parameter member_id: Image member ID. For example, the tenant ID
                         of the user with whom the image is being
                         shared.
   :statuscode 403: 
   :statuscode 204: 


.. http:get:: /v2/metadefs/namespaces/{namespace}
   :title: Get namespaces details
   :synopsis: Gets details for a specified namespace.

   The response body shows a single namespace entity with all details
   including properties and objects.

   :responseexample 200: v2/examples/getNamespace-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-namespace
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:put:: /v2/metadefs/namespaces/{namespace}
   :title: Update namespace
   :synopsis: Updates a specified namespace.

   

   :requestexample: v2/examples/updateNamespace-v2_req.json
   :responseexample 200: v2/examples/updateNamespace-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-namespace
   :parameter namespace: Unique namespace.
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}
   :title: Delete namespace
   :synopsis: Deletes a specified namespace and its properties, objects, and any resource type associations.

   You cannot delete namespaces with the ``protected`` attribute set
   to true (boolean); the response returns the HTTP 403 status code.
   
   To delete a namespace, you must first make an update namespace
   request to set the ``protected`` attribute to false (boolean) on
   the namespace. Then, delete the namespace.
   
   If the operation succeeds, the response returns the HTTP 204 status
   code.
   
   If you try to remove a namespace with the ``protected`` attribute
   set to true (boolean), the operation fails and the response returns
   the HTTP 403 error code.

   :tag: metadef-namespace
   :parameter namespace: Unique namespace.
   :statuscode 403: 
   :statuscode 204: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/properties/{property_name}
   :title: Get property definition
   :synopsis: Gets the definition for a specified property.

   If you include the ``resource_type`` query parameter, the prefix of
   the included resource type is removed from the property name before
   the query is submitted. This enables you to look for a property
   name that starts with a prefix from an associated resource type.
   
   Response body shows a single property entity.

   :responseexample 200: v2/examples/getProperty-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-property
   :requestschema: v2/getProperty-v2.json
   :parameter namespace: Unique namespace.
   :query resource_type: Filter parameter.  Shows only property names
                         that start with a prefix from an associated
                         specified resource type.  The prefix of the
                         included resource type is removed from the
                         property name in the response.
   :statuscode 200: 


.. http:put:: /v2/metadefs/namespaces/{namespace}/properties/{property_name}
   :title: Update property definition
   :synopsis: Updates a specified property definition.

   

   :requestexample: v2/examples/updateProperty-v2_req.json
   :responseexample 200: v2/examples/updateProperty-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-property
   :requestschema: v2/updateProperty-v2.json
   :statuscode 200: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}/properties/{property_name}
   :title: Remove property definition
   :synopsis: Removes a specified property definition in a specified namespace.

   To remove a property, first make an update namespace request to set
   the ``protected`` attribute to false (boolean) on the namespace.
   Then, remove the property. If the operation succeeds, the response
   returns the HTTP 204 status code.
   
   If you try to remove a property in a namespace with the
   ``protected`` attribute set to true (boolean), the operation fails
   and the response returns the HTTP 403 error code.

   :tag: metadef-property
   :requestschema: v2/deleteProperty-v2.json
   :parameter namespace: Unique namespace.
   :statuscode 403: 
   :statuscode 204: 


.. http:get:: /v2/images
   :title: List images
   :synopsis: Lists public virtual machine (VM) images. (Since Image API v2.0.)

   Returns a subset of the larger collection of images and a link that
   you can use to get the next set of images. You should always check
   for the presence of a ``next`` link and use it as the URI in a
   subsequent HTTP GET request. You should follow this pattern until a
   ``next`` link is no longer provided. The next link preserves any
   query parameters that you send in your initial request. You can use
   the ``first`` link to jump back to the first page of the
   collection. If you prefer to paginate through images manually, use
   the ``limit`` and ``marker`` parameters.
   
   The list operation accepts several types of query parameters that
   let you filter the results of the returned collection.
   
   A client can provide direct comparison filters using most image
   attributes, such as ``name=Ubuntu`` , ``visibility=public`` , and
   so on. A client cannot filter on tags or anything defined as a
   ``link`` in the json- schema, such as self, file, or schema.
   
   You can use the ``size_min`` and ``size_max`` query parameters to
   perform greater-than and less-than filtering of images based on
   their ``size`` attribute. The size is measured in bytes and refers
   to the size of an image when it is stored on disk.
   
   For example, sending a ``size_min`` filter of 1048576 and
   ``size_max`` of 4194304 filters the container to include only
   images that are between 1 and 4 MB.
   
   You can see a list of VM images which status is in ``active`` ,
   ``queued`` , or ``saving`` .
   
   You can use query parameters to sort the results of this operation.
   
   - ``sort_key`` . Sorts by the requested image attribute. Sorts in
     the natural sorting direction of the image attribute that is
     provided as the ``sort_key`` .
   
   - ``sort_dir`` . Sorts in a specified sort direction.
   
   - ``sort`` . Sorts by one or more sets of attribute and sort
     direction combinations. If you omit the sort direction in a set,
     the default is ``desc`` .
   
   To specify the ``sort_key`` and ``sort_dir`` query parameters to
   sort the results:
   
   .. code-block:: json
   
      GET /v2/images?sort_key=name
      &
      sort_dir=asc
      &
      sort_key=status
      &
      sort_dir=desc
   To specify the ``sort`` query parameter to sort the results:
   
   .. code-block:: json
   
      GET /v2/images?sort=name:asc,status:desc

   :responseexample 200: v2/examples/listImages-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :query limit: Requests a specified page size of returned items from
                 the query. Returns a number of items up to the
                 specified limit value. Use the ``limit`` parameter to
                 make an initial limited request and use the ID of the
                 last-seen item from the response as the ``marker``
                 parameter value in a subsequent limited request.
   :query marker: Specifies the ID of the last-seen item. Use the
                  ``limit`` parameter to make an initial limited
                  request and use the ID of the last-seen item from
                  the response as the ``marker`` parameter value in a
                  subsequent limited request.
   :query name: Filter parameter.  Shows only images with the
                specified name.  A valid value is the name of the
                image as a string.
   :query visibility: Filter parameter.  Shows only images with the
                      specified image visibility value or values.
                      Valid values are ``public`` , ``private`` , and
                      ``shared`` . If you omit this parameter, the
                      response shows ``public`` , ``private`` , and
                      ``shared`` images with ``accepted`` member
                      status.
   :query member_status: Filter parameter.  Shows only images with the
                         specified member status.  A valid value is
                         ``accepted`` , ``pending`` , ``rejected`` ,
                         or ``all`` . Default is ``accepted`` .
   :query owner: Filter parameter.  Shows only images that are shared
                 with the specified owner.  A valid value is a tenant
                 ID.
   :query status: Filter parameter.  Shows only images with the
                  specified image status.  A valid value is ``queued``
                  , ``saving`` , ``active`` , ``killed`` , ``deleted``
                  , or ``pending_delete`` .
   :query size_min: Filter parameter.  Shows only images with the
                    specified minimum image size.  A valid value is
                    the minimum size of the image, in bytes.
   :query size_max: Filter parameter.  Shows only images with the
                    specified maximum image size.  A valid valud is
                    the maximum size of the image, in bytes.
   :query sort_key: Sorts by the requested image attribute. Accepted
                    values are ``name`` , ``status`` ,
                    ``container_format`` , ``disk_format`` , ``size``
                    , ``id`` , ``created_at`` , and ``updated_at`` .
                    Default is ``created_at`` . The API uses the
                    natural sorting direction of the image attribute
                    that is provided as the ``sort_key`` .
   :query sort_dir: Sorts by one or more sets of attribute and sort
                    direction combinations. If you omit the sort
                    direction in a set, the default is ``desc`` .
   :query sort: Sorts by one or more attribute and sort direction
                combinations. You can also set multiple sort keys and
                directions. Default direction is ``desc`` .  For
                example:  .. code-block:: json     GET
                /v2/images?sort=name:asc,status:desc
   :query tag: Image tag. For example, ``?tag="cirros"`` .
   :statuscode 200: 


.. http:post:: /v2/images
   :title: Create image
   :synopsis: Creates a virtual machine (VM) image. (Since Image API v2.0.)

   Created with a ``Location`` header that contains the newly-created
   URI for the image. Response body represents the created image
   entity.
   
   Synchronous Postconditions
   
   - With correct permissions, you can see the image status as
     ``queued`` through API calls.
   
   - With correct permissions, you can see the image status as
     ``active`` through API calls if you created the image with
     ``Location`` header.

   :requestexample: v2/examples/createImage-v2_req.json
   :responseexample 201: v2/examples/createImage-v2_resp_201.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :requestschema: v2/createImage-v2.json
   :statuscode 201: 


.. http:get:: /v2/tasks
   :title: List tasks
   :synopsis: Lists tasks.

   

   :responseexample 200: v2/examples/listTasks-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: os-tasks-v2
   :query type: Filters by a specified task type. A valid value is
                ``import`` .
   :query status: Filters by a specified task status. A valid value is
                  ``pending`` , ``processing`` , ``success`` , or
                  ``failure`` .
   :query sort_key: Sort key. A valid value is an attribute, such as
                    ``name`` , for sorting. Default is ``created_at``
                    .
   :query sort_dir: Sort direction. A valid value is ``asc``
                    (ascending) or ``desc`` (descending). Default is
                    ``desc`` .
   :statuscode 200: 


.. http:post:: /v2/tasks
   :title: Create tasks
   :synopsis: Creates a task.

   

   :requestexample: v2/examples/createTasks-v2_req.json
   :accepts: application/json
   :produces: application/json
   :tag: os-tasks-v2
   :statuscode 201: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}/resource_types/{name}
   :title: Remove resource type association
   :synopsis: Removes a specified resource type association in a specified namespace.

   To remove an association, first make an update namespace request to
   set the ``protected`` attribute to false (boolean) on the
   namespace. Then, remove the association. If the operation succeeds,
   the response returns the HTTP 204 status code.
   
   If you try to remove resource type associations in a namespace with
   the ``protected`` attribute set to true (boolean), the operation
   fails and the response returns the HTTP 403 error code.

   :tag: metadef-resourcetype
   :parameter namespace: Unique namespace.
   :parameter name: Name of the resource type.
   :statuscode 403: 
   :statuscode 204: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/objects/{object_name}
   :title: Get object definition
   :synopsis: Gets definition for a specified object.

   Response body is a single object entity.

   :responseexample 200: v2/examples/getObject-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-object
   :parameter object_name: The name of the object.
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:put:: /v2/metadefs/namespaces/{namespace}/objects/{object_name}
   :title: Update object definition
   :synopsis: Updates a specified object definition in a specified namespace.

   

   :requestexample: v2/examples/updateObject-v2_req.json
   :responseexample 200: v2/examples/updateObject-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-object
   :parameter object_name: The name of the object.
   :parameter namespace: Unique namespace.
   :statuscode 200: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}/objects/{object_name}
   :title: Delete property definition
   :synopsis: Deletes a specified object definition within a namespace.

   You cannot delete objects in a namespace with the 'protected'
   attribute set to true (boolean); the response returns the HTTP 403
   status code.
   
   You must first set the ``protected`` attribute to false (boolean)
   on the namespace and then perform the delete. The response is empty
   and returns the HTTP 204 status code.

   :tag: metadef-object
   :parameter object_name: The name of the object.
   :parameter namespace: Unique namespace.
   :statuscode 403: 
   :statuscode 204: 


.. http:get:: /v2/schemas/members
   :title: Get image members schema
   :synopsis: Gets a json-schema document that represents an image members entity. (Since Images v2.1.)

   An image members entity is a container of image member entities.
   
   The following schema is solely an example. Consider only the
   response to the API call as authoritative.

   :responseexample 200: v2/examples/getImageMembersSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: image-schemas
   :statuscode 200: 


.. http:get:: /v2/tasks/{task_id}
   :title: Show tasks
   :synopsis: Shows details for a specified task.

   

   :responseexample 200: v2/examples/showTasks-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: os-tasks-v2
   :requestschema: v2/showTasks-v2.json
   :statuscode 200: 


.. http:get:: /v2/images/{image_id}/members
   :title: List image members
   :synopsis: Lists the tenants with whom this image has been shared. (Since Image API v2.1.)

   If a user with whom this image is shared makes this call, the
   member list contains only information for that user.
   
   If a user with whom this image has not been shared makes this call,
   the call returns the HTTP 404 status code.
   
   Preconditions
   
   - The specified image must exist.
   
   - You must be the owner or a member of the specified image.

   :responseexample 200: v2/examples/listImageMembers-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: members
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 200: 
   :statuscode 404: 


.. http:post:: /v2/images/{image_id}/members
   :title: Create image member
   :synopsis: Adds a specified tenant ID as an image member. (Since Image API v2.1.)

   Preconditions
   
   - The specified images must exist.
   
   - You can only add a new member to an image which 'visibility'
     attribute is ``private`` .
   
   - You must be the owner of the specified image.
   
   Synchronous Postconditions
   
   - With correct permissions, you can see the member status of the
     image as ``pending`` through API calls.
   
   Troubleshooting
   
   - Even if you have correct permissions, if the ``visibility``
     attribute is set to ``public`` , the request returns the HTTP 403
     error code. Ensure that you meet the preconditions and run the
     request again. If the request fails again, review your API
     request.
   
   - If the specified member is already a member for the image, the
     service returns the HTTP 409 Conflict error code. In case you
     meant a different member, double-check that you specified the
     correct member.

   :requestexample: v2/examples/createImageMember-v2_req.json
   :responseexample 200: v2/examples/createImageMember-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: members
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 200: 
   :statuscode 403: 
   :statuscode 409: 


.. http:get:: /v2/schemas/metadefs/tag
   :title: Get metadata definition tag schema
   :synopsis: Gets a JSON schema document that represents a metadata definition tag entity. (Since API v2.1.)

   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefTagSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/image
   :title: Get image schema
   :synopsis: Gets a json-schema document that represents an image entity. (Since Images v2.0.)

   The following schema is solely an example. Consider only the
   response to the API call as authoritative.

   :responseexample 200: v2/examples/getImageSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: image-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/resource_types
   :title: Get metadata definition namespace resource type associations schema
   :synopsis: Gets a JSON schema document that represents a metadata definition namespace resource type associations entity. (Since API v2.1.)

   A resource type associations entity is a container for resource
   type association entities.
   
   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefResTypeAssocsSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/namespace
   :title: Get metadata definition namespace schema
   :synopsis: Gets a JSON schema document that represents a metadata definition namespace entity. (Since API v2.1.)

   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefNamespaceSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:put:: /v2/images/{image_id}/file
   :title: Upload binary image data
   :synopsis: Uploads binary image data. (Since Image API v2.0.)

   Set the ``Content-Type`` request header to ``application/octet-
   stream`` .
   
   Example call: ``curl -i -X PUT -H "X-Auth-Token: $token" -H
   "Content-Type: application/octet-stream" -d
   @/home/glance/ubuntu-12.10.qcow2
   $image_url/v2/images/{image_id}/file``
   
   Preconditions
   
   Before you can store binary image data, you must meet the following
   preconditions:
   
   - The specified image must exist.
   
   - You must set the disk and container formats in the image.
   
   - The image status must be ``queued`` .
   
   - Your image storage quota must be sufficient.
   
   - The size of the data that you want to store must not exceed the
     size that the OpenStack Image service allows.
   
   Synchronous Postconditions
   
   - With correct permissions, you can see the image status as
     ``active`` through API calls.
   
   - With correct access, you can see the stored data in the storage
     system that OpenStack Image service manages.
   
   Troubleshooting
   
   - If you cannot store the data, your request might lack information
     or you exceeded your allotted quota. Ensure that you meet the
     preconditions and run the request again. If the request fails
     again, review your API request.
   
   - The storage back ends for storing the data must have enough free
     storage space to accommodate the size of the data.

   :tag: image-data
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 204: 


.. http:get:: /v2/images/{image_id}/file
   :title: Download binary image data
   :synopsis: Downloads binary image data. (Since Image API v2.0.)

   Example call: ``curl -i -X GET -H "X-Auth-Token: $token"
   $image_url/v2/images/{image_id}/file``
   
   The response body contains the raw binary data that represents the
   actual virtual disk. The ``Content-Type`` header contains the
   ``application/octet-stream`` value. The ``Content-MD5`` header
   contains an MD5 checksum of the image data. Clients are encouraged
   to use this checksum to verify the integrity of the image data that
   they receive.
   
   
   
   Preconditions
   
   - The specified images must exist.
   
   Synchronous Postconditions
   
   - You can download the binary image data in your machine if the
     specified image has image data.
   
   - If image data exists, the call returns the HTTP ``200`` status
     code.
   
   - If no image data exists, the call returns the HTTP ``204`` status
     code.

   :tag: image-data
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :reqheader Content-Range: The content range of image data. For
                             details, see Hypertext Transfer Protocol
                             (HTTP/1.1): Range Requests .
   :statuscode 200: 
   :statuscode 403: 
   :statuscode 204: 


.. http:post:: /v2/metadefs/namespaces/{namespace}/tags/{name}
   :title: Add tag definition
   :synopsis: Adds a specified tag to the list of namespace tag definitions.

   

   :responseexample 200: v2/examples/addTag-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-tag
   :requestschema: v2/addTag-v2.json
   :statuscode 200: 


.. http:get:: /v2/metadefs/namespaces/{namespace}/tags/{name}
   :title: Get tag definition
   :synopsis: Gets a definition for the specified tag.

   The response body shows a single tag entity.

   :responseexample 200: v2/examples/getTag-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-tag
   :requestschema: v2/getTag-v2.json
   :statuscode 200: 


.. http:put:: /v2/metadefs/namespaces/{namespace}/tags/{name}
   :title: Update tag definition
   :synopsis: Renames a specified tag definition.

   

   :requestexample: v2/examples/updateTag-v2_req.json
   :responseexample 200: v2/examples/updateTag-v2_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-tag
   :requestschema: v2/updateTag-v2.json
   :statuscode 200: 


.. http:delete:: /v2/metadefs/namespaces/{namespace}/tags/{name}
   :title: Delete tag definition
   :synopsis: Deletes a specified tag definition within a namespace.

   You cannot delete tags in a namespace with the 'protected'
   attribute set to true (boolean); the response returns the HTTP 403
   status code.
   
   You must first set the ``protected`` attribute to false (boolean)
   on the namespace and then perform the delete. The response is empty
   and returns the HTTP 204 status code.

   :tag: metadef-tag
   :requestschema: v2/deleteTag-v2.json
   :statuscode 403: 
   :statuscode 204: 


.. http:post:: /v2/images/{image_id}/actions/deactivate
   :title: Deactivate image
   :synopsis: Deactivates a specified image. (Since Image API v2.0.)

   If you try to download a deactivated image, the 403 Forbidden error
   is returned. Also, image locations are not visible for deactivated
   images unless the user is an administrative user.
   
   The deactivate operation returns an error if the image status is
   not ``active`` or ``deactivated`` .
   
   Preconditions
   
   - The specified image must exist.

   :responseexample 204: v2/examples/deactivateImage-v2_resp_204.json
   :accepts: application/json
   :produces: application/json
   :tag: images
   :parameter image_id: Image ID stored through the image API.
                        Typically a UUID.
   :statuscode 204: 


.. http:get:: /v2/schemas/metadefs/objects
   :title: Get metadata definition objects schema
   :synopsis: Gets a JSON schema document that represents a metadata definition objects entity. (Since API v2.1.)

   An objects entity is a container for object entities.
   
   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefObjectsSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


.. http:get:: /v2/schemas/metadefs/resource_type
   :title: Get metadata definition namespace resource type association schema
   :synopsis: Gets a JSON schema document that represents a metadata definition namespace resource type association entity. (Since API v2.1.)

   The following schema document is an example. The authoritative
   response is the actual response to the API call.

   :responseexample 200: v2/examples/getMetadefResTypeAssocSchema_resp_200.json
   :accepts: application/json
   :produces: application/json
   :tag: metadef-schemas
   :statuscode 200: 


