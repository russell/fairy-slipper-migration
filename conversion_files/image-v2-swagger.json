{
  "basePath": {}, 
  "definitions": {
    "addTag-v2": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "addTag-v2_200": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createImage-v2": {
      "properties": {
        "container_format": {
          "description": "Format of the container. A valid value is ``ami`` , ``ari`` ,\n``aki`` , ``bare`` , ``ovf`` , or ``ova`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "disk_format": {
          "description": "Format of the disk. A valid value is ``ami`` , ``ari`` , ``aki`` ,\n``vhd`` , ``vmdk`` , ``raw`` , ``qcow2`` , ``vdi`` , or ``iso`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The image ID.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "min_disk": {
          "description": "Amount of disk space in GB that is required to boot the image.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "Amount of RAM in MB that is required to boot the image.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "Name for the image. The name of an image is not unique to an Image\nservice node. The API cannot expect users to know the names of\nimages owned by others.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Properties, if any, that are associated with the image.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "protected": {
          "description": "If true, image is not deletable.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "visibility": {
          "description": "Image visibility. Public or private. Default is public.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createImage-v2_201": {
      "properties": {
        "checksum": {
          "description": "Hash of the image data used. The Image service uses this value for\nverification.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the server, image, or backup was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "file": {
          "description": "URL for the virtual machine image file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Properties, if any, that are associated with the image.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "protected": {
          "description": "Indicates whether the image can be deleted.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "schema": {
          "description": "URL for schema of the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "self": {
          "description": "URL for the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "updated_at": {
          "description": "The date and time when the server or image was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "virtual_size": {
          "description": "The virtual size of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "visibility": {
          "description": "The image visibility.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }, 
    "createNamespace-v2": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name that can be used in UI to display the namespace\nname.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "namespace": {
          "description": "A namespace name that is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "objects": {
          "description": "One or more object definitions in the namespace.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "properties": {
          "description": "One or more property definitions in the namespace.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. Valid value is true or false.\nDefault is false.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "resource_type_associations": {
          "description": "One or more resource types that are associated with this namespace.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "visibility": {
          "description": "Namespace visibility. Valid value is public or private. Default is\nprivate.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createNamespace-v2_201": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User friendly name which could be used in UI for displaying\nnamespace name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "objects": {
          "description": "Object definition(s) of the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Property definition(s) of the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``True`` or\n``False`` . Default is ``False`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "Resource type(s) which are associated with this namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "Namespace visibility. A valid value is ``public`` or ``private`` .\nDefault is ``private`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createObject-v2": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User-friendly name to use in a UI to display the namespace name.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The namespace is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "objects": {
          "description": "Object definitions, if any, for the namespace.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "properties": {
          "description": "Property definitions, if any, for the namespace.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. Valid value is true or false.\nDefault is false.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "resource_type_associations": {
          "description": "Resource types, if any, that are associated with this namespace", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "visibility": {
          "description": "Namespace visibility. Public or private. Default is private.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createObject-v2_201": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User friendly name which could be used in UI for displaying\nnamespace name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "objects": {
          "description": "Object definition(s) of the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Property definition(s) of the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``True`` or\n``False`` . Default is ``False`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "Resource type(s) which are associated with this namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "Namespace visibility. A valid value is ``public`` or ``private`` .\nDefault is ``private`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createProperty-v2": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items`` , the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false`` , the instance cannot be longer than the\nlist of schemas in ``items`` .\n\nIf this value is ``true`` , that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createProperty-v2_201": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items`` , the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false`` , the instance cannot be longer than the\nlist of schemas in ``items`` .\n\nIf this value is ``true`` , that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createResourceTypeAssoc-v2": {
      "properties": {
        "name": {
          "description": "Name of the resource type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefix": {
          "description": "Prefix for the specified resource type. If you specify a prefix,\nyou must use this value followed by a prefix separator such as the\ncolon ( ``:`` ) character to prefix any properties in the namespace\nthat you want to apply to the specified resource type.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "properties_target": {
          "description": "Some resource types allow more than one key and value pair for each\ninstance. For example, the Image service allows both user and image\nmetadata on volumes. The ``properties_target`` parameter enables a\nnamespace target to remove the ambiguity.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createTags-v2": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` dictionary objects.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createTags-v2_201": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` dictionary objects.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "deleteAllTags-v2": {
      "properties": {
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "deleteProperty-v2": {
      "properties": {
        "property_name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "deleteTag-v2": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getImage-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash of the image data used. The Image service uses this value for\nverification.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the server, image, or backup was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "direct_url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "file": {
          "description": "URL for the virtual machine image file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Properties, if any, that are associated with the image.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "protected": {
          "description": "Indicates whether the image can be deleted.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "schema": {
          "description": "URL for schema of the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "self": {
          "description": "URL for the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "updated_at": {
          "description": "The date and time when the server or image was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "The image visibility.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }, 
    "getProperty-v2": {
      "properties": {
        "property_name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getProperty-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items`` , the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false`` , the instance cannot be longer than the\nlist of schemas in ``items`` .\n\nIf this value is ``true`` , that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getTag-v2": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getTag-v2_200": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listImageMembers-v2_200": {
      "properties": {
        "schema": {
          "description": "The URL for schema of the members.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listImages-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash of the image data used. The Image service uses this value for\nverification.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the server, image, or backup was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "direct_url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "file": {
          "description": "URL for the virtual machine image file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "first": {
          "description": "URL for the first page of response.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "images": {
          "description": "An ``images`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Properties, if any, that are associated with the image.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "protected": {
          "description": "Indicates whether the image can be deleted.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "schema": {
          "description": "URL for schema of the virtual machine images.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "self": {
          "description": "URL for the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "updated_at": {
          "description": "The date and time when the server or image was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "virtual_size": {
          "description": "The virtual size of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "visibility": {
          "description": "The image visibility.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }, 
    "listNamespaces-v2_200": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User friendly name which could be used in UI for displaying\nnamespace name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespaces": {
          "description": "A ``namespaces`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``True`` or\n``False`` . Default is ``False`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "Resource type(s) which are associated with this namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "Namespace visibility. A valid value is ``public`` or ``private`` .\nDefault is ``private`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listObjects-v2_200": {
      "properties": {
        "description": {
          "description": "Detailed description for the namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "display_name": {
          "description": "User friendly name which could be used in UI for displaying\nnamespace name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespaces": {
          "description": "A ``namespaces`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protected": {
          "description": "Namespace protection for deletion. A valid value is ``True`` or\n``False`` . Default is ``False`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "resource_type_associations": {
          "description": "Resource type(s) which are associated with this namespace.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "Namespace visibility. A valid value is ``public`` or ``private`` .\nDefault is ``private`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listProperties-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items`` , the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false`` , the instance cannot be longer than the\nlist of schemas in ``items`` .\n\nIf this value is ``true`` , that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "A properties object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listTags-v2": {
      "properties": {
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listTags-v2_200": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "A list of ``tag`` dictionary objects.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showTasks-v2": {
      "properties": {
        "task_id": {
          "description": "The task ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateImage-v2": {
      "properties": {
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "op": {
          "description": "The operation. A valid value is:\n\n``add`` . Adds a property or location in the specified image.\n\n``remove`` . Removes the specified image ' s property or location.\n\n``replace`` . Replaces the value of a specified image ' s property\nor location.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "path": {
          "description": "Image ' s property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "URL to access the image file kept in external store.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Value of image property used in add or replace operations expressed\nin JSON notation. For example, you must enclose strings in\nquotation marks, and you do not enclose numeric values in quotation\nmarks.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateImage-v2_200": {
      "properties": {
        "checksum": {
          "description": "Hash of the image data used. The Image service uses this value for\nverification.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "container_format": {
          "description": "The container format of image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "created_at": {
          "description": "The date and time when the server, image, or backup was created.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "direct_url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "disk_format": {
          "description": "The disk format of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "file": {
          "description": "URL for the virtual machine image file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metadata": {
          "description": "The location metadata.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "min_disk": {
          "description": "The minimum disk size in GB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_ram": {
          "description": "The minimum amount of RAM in MB that is required to boot the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "owner": {
          "description": "The ID of the owner, or tenant, of the image.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "properties": {
          "description": "Properties, if any, that are associated with the image.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "protected": {
          "description": "Indicates whether the image can be deleted.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "schema": {
          "description": "URL for schema of the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "self": {
          "description": "URL for the virtual machine image.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "size": {
          "description": "The size of the image data, in bytes.\n\nIf this field has no value, its value is ``null`` (JSON null data\ntype).", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The image status.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tags": {
          "description": "Image tags.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "updated_at": {
          "description": "The date and time when the server or image was updated.\n\nThe date and time stamp format is `ISO 8601\n<https://en.wikipedia.org/wiki/ISO_8601>`_ :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\n\nFor example, ``2015-08-27T09:49:58-05:00``.\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "URL to access the image file kept in external store. It appears\nwhen you set the ``show_multiple_locations`` option to ``True`` in\nthe Image service ' s configuration file.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "visibility": {
          "description": "The image visibility.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }, 
    "updateImageMember-v2": {
      "properties": {
        "status": {
          "description": "The status of this image member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateProperty-v2": {
      "properties": {
        "additionalItems": {
          "description": "If you use tuple-typing , describes extra items. If the value of\n``items`` is an array and the instance is longer than the list of\nschemas in ``items`` , the schema in this property describes the\nadditional items.\n\nIf this value is false, the instance cannot be longer than the\nnumber of schemas listed in ``items`` .\n\nA value of true indicates an empty schema, or anything goes.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Property description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "items": {
          "description": "specifies schema for the items in an array.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "Name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "title": {
          "description": "Property title.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "Property type", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "whether all the values in the array must be distinct.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "updateProperty-v2_200": {
      "properties": {
        "additionalItems": {
          "description": "Describes extra items, if you use tuple typing . If the value of\n``items`` is an array (tuple typing) and the instance is longer\nthan the list of schemas in ``items`` , the additional items are\ndescribed by the schema in this property.\n\nIf this value is ``false`` , the instance cannot be longer than the\nlist of schemas in ``items`` .\n\nIf this value is ``true`` , that is equivalent to the empty schema\n(anything goes).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default": {
          "description": "Default property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "The description of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enum": {
          "description": "Enumeration of property values.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "items": {
          "description": "Schema for the items in an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxItems": {
          "description": "Maximum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maxLength": {
          "description": "Maximum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "maximum": {
          "description": "Maximum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minItems": {
          "description": "Minimum length of an array.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minLength": {
          "description": "Minimum allowed string length.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "minimum": {
          "description": "Minimum allowed numerical value.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "operators": {
          "description": "Operators property description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pattern": {
          "description": "A regular expression (ECMA 262) that a string value must match.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "readonly": {
          "description": "Indicates whether this is a read-only property.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "title": {
          "description": "The title of the property.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The property type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "uniqueItems": {
          "description": "Indicates whether all values in the array must be distinct.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateTag-v2": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "namespace": {
          "description": "The ``namespace`` is unique across all users.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateTag-v2_200": {
      "properties": {
        "name": {
          "description": "Name of the ``tag`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }
  }, 
  "externalDocs": {}, 
  "host": {}, 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "service": "image", 
    "title": "Image service", 
    "version": "v2"
  }, 
  "paths": {
    "/": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listVersions-image-v2", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "versions": [
                  {
                    "id": "v2.2", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "CURRENT"
                  }, 
                  {
                    "id": "v2.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v2.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "300": {
            "examples": {
              "application/json": {
                "versions": [
                  {
                    "id": "v2.2", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "CURRENT"
                  }, 
                  {
                    "id": "v2.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v2.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v2/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.1", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }, 
                  {
                    "id": "v1.0", 
                    "links": [
                      {
                        "href": "http://23.253.228.211:9292/v1/", 
                        "rel": "self"
                      }
                    ], 
                    "status": "SUPPORTED"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists information about all Image service API versions.", 
        "tags": [
          "versions-images"
        ], 
        "title": "List API versions"
      }
    ], 
    "/v2/images": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset of the larger collection of images and a link that\nyou can use to get the next set of images. You should always check\nfor the presence of a ``next`` link and use it as the URI in a\nsubsequent HTTP GET request. You should follow this pattern until a\n``next`` link is no longer provided. The next link preserves any\nquery parameters that you send in your initial request. You can use\nthe ``first`` link to jump back to the first page of the\ncollection. If you prefer to paginate through images manually, use\nthe ``limit`` and ``marker`` parameters.\n\nThe list operation accepts several types of query parameters that\nlet you filter the results of the returned collection.\n\nA client can provide direct comparison filters using most image\nattributes, such as ``name=Ubuntu`` , ``visibility=public`` , and\nso on. A client cannot filter on tags or anything defined as a\n``link`` in the json- schema, such as self, file, or schema.\n\nYou can use the ``size_min`` and ``size_max`` query parameters to\nperform greater-than and less-than filtering of images based on\ntheir ``size`` attribute. The size is measured in bytes and refers\nto the size of an image when it is stored on disk.\n\nFor example, sending a ``size_min`` filter of 1048576 and\n``size_max`` of 4194304 filters the container to include only\nimages that are between 1 and 4 MB.\n\nYou can see a list of VM images which status is in ``active`` ,\n``queued`` , or ``saving`` .\n\nYou can use query parameters to sort the results of this operation.\n\n- ``sort_key`` . Sorts by the requested image attribute. Sorts in\n  the natural sorting direction of the image attribute that is\n  provided as the ``sort_key`` .\n\n- ``sort_dir`` . Sorts in a specified sort direction.\n\n- ``sort`` . Sorts by one or more sets of attribute and sort\n  direction combinations. If you omit the sort direction in a set,\n  the default is ``desc`` .\n\nTo specify the ``sort_key`` and ``sort_dir`` query parameters to\nsort the results:\n\n.. code-block:: json\n\n   GET /v2/images?sort_key=name\n   &\n   sort_dir=asc\n   &\n   sort_key=status\n   &\n   sort_dir=desc\n\nTo specify the ``sort`` query parameter to sort the results:\n\n.. code-block:: json\n\n   GET /v2/images?sort=name:asc,status:desc", 
        "examples": {}, 
        "id": "listImages-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified name.\n\nA valid value is the name of the image as a string.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified image visibility value or\nvalues.\n\nValid values are ``public`` , ``private`` , and ``shared`` . If you\nomit this parameter, the response shows ``public`` , ``private`` ,\nand ``shared`` images with ``accepted`` member status.", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified member status.\n\nA valid value is ``accepted`` , ``pending`` , ``rejected`` , or\n``all`` . Default is ``accepted`` .", 
            "format": "", 
            "in": "query", 
            "name": "member_status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images that are shared with the specified owner.\n\nA valid value is a tenant ID.", 
            "format": "", 
            "in": "query", 
            "name": "owner", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified image status.\n\nA valid value is ``queued`` , ``saving`` , ``active`` , ``killed``\n, ``deleted`` , or ``pending_delete`` .", 
            "format": "", 
            "in": "query", 
            "name": "status", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified minimum image size.\n\nA valid value is the minimum size of the image, in bytes.", 
            "format": "", 
            "in": "query", 
            "name": "size_min", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only images with the specified maximum image size.\n\nA valid valud is the maximum size of the image, in bytes.", 
            "format": "", 
            "in": "query", 
            "name": "size_max", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts by the requested image attribute. Accepted values are\n``name`` , ``status`` , ``container_format`` , ``disk_format`` ,\n``size`` , ``id`` , ``created_at`` , and ``updated_at`` . Default\nis ``created_at`` . The API uses the natural sorting direction of\nthe image attribute that is provided as the ``sort_key`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts by one or more sets of attribute and sort direction\ncombinations. If you omit the sort direction in a set, the default\nis ``desc`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sorts by one or more attribute and sort direction combinations. You\ncan also set multiple sort keys and directions. Default direction\nis ``desc`` .\n\nFor example:\n\n.. code-block:: json\n\n   GET /v2/images?sort=name:asc,status:desc", 
            "format": "", 
            "in": "query", 
            "name": "sort", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image tag. For example, ``?tag=\"cirros\"`` .", 
            "format": "", 
            "in": "query", 
            "name": "tag", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "first": "/v2/images", 
                "images": [
                  {
                    "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                    "container_format": "bare", 
                    "created_at": "2014-11-07T17:07:06Z", 
                    "disk_format": "qcow2", 
                    "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                    "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                    "min_disk": 0, 
                    "min_ram": 0, 
                    "name": "cirros-0.3.2-x86_64-disk", 
                    "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                    "protected": false, 
                    "schema": "/v2/schemas/image", 
                    "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                    "size": 13167616, 
                    "status": "active", 
                    "tags": [], 
                    "updated_at": "2014-11-07T17:19:09Z", 
                    "virtual_size": null, 
                    "visibility": "public"
                  }, 
                  {
                    "checksum": "afab0f79bac770d61d24b4d0560b5f70", 
                    "container_format": "bare", 
                    "created_at": "2014-10-30T08:23:39Z", 
                    "disk_format": "qcow2", 
                    "file": "/v2/images/781b3762-9469-4cec-b58d-3349e5de4e9c/file", 
                    "id": "781b3762-9469-4cec-b58d-3349e5de4e9c", 
                    "min_disk": 0, 
                    "min_ram": 0, 
                    "name": "F17-x86_64-cfntools", 
                    "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                    "protected": false, 
                    "schema": "/v2/schemas/image", 
                    "self": "/v2/images/781b3762-9469-4cec-b58d-3349e5de4e9c", 
                    "size": 476704768, 
                    "status": "active", 
                    "tags": [], 
                    "updated_at": "2014-11-03T16:40:10Z", 
                    "virtual_size": null, 
                    "visibility": "public"
                  }
                ], 
                "schema": "/v2/schemas/images"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists public virtual machine (VM) images. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "List images"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Created with a ``Location`` header that contains the newly-created\nURI for the image. Response body represents the created image\nentity.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the image status as\n  ``queued`` through API calls.\n\n- With correct permissions, you can see the image status as\n  ``active`` through API calls if you created the image with\n  ``Location`` header.", 
        "examples": {
          "application/json": {
            "container_format": "bare", 
            "disk_format": "qcow2", 
            "min_disk": 0, 
            "min_ram": 0, 
            "name": "Ubuntu 12.10", 
            "protected": false, 
            "tags": [
              "ubuntu", 
              "quantal"
            ], 
            "visibility": "private"
          }
        }, 
        "id": "createImage-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createImage-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "checksum": null, 
                "container_format": "bare", 
                "created_at": "2014-11-11T20:47:55Z", 
                "disk_format": "qcow2", 
                "file": "/v2/images/b2173dd3-7ad6-4362-baa6-a68bce3565ca/file", 
                "id": "b2173dd3-7ad6-4362-baa6-a68bce3565ca", 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "Ubuntu 12.10", 
                "owner": "b4eedccc6fb74fa8a7ad6b08382b852b", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/b2173dd3-7ad6-4362-baa6-a68bce3565ca", 
                "size": null, 
                "status": "queued", 
                "tags": [
                  "ubuntu", 
                  "quantal"
                ], 
                "updated_at": "2014-11-11T20:47:55Z", 
                "virtual_size": null, 
                "visibility": "private"
              }
            }, 
            "headers": {
              "location": {
                "description": "URL to access the image file kept in external store.", 
                "format": "", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "summary": "Creates a virtual machine (VM) image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Create image"
      }
    ], 
    "/v2/images/{image_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Depending on the referenced target location, this operation\nperforms one of the following functions:\n\n- The target location is an array index. A new value is inserted\n  into the array at the specified index.\n\n- The target location is an object member that does not exist. A new\n  member is added to the object.\n\n- The target location is an object member that exists. The member\n  value is replaced.\n\nThe operation object MUST contain a ``value`` member that specifies\nthe value to add. For example:\n\n.. code-block:: json\n\n   {\n      \"op\": \"add\",\n      \"path\": \"/a/b/c\",\n      \"value\": [\n         \"foo\",\n         \"bar\"\n      ]\n   }\n\nThe target location MUST reference one of these values:\n\n- The root of the target document. The specified value is the entire\n  content of the target document.\n\n- A member to add to an object. The specified value is added to that\n  object at the specified location. If the member already exists,\n  it is replaced by the specified value.\n\n- An element to add to the array. The specified value is added to\n  the array at the specified location. Any element that is at or\n  above the specified index is shifted one position to the right.\n  The specified index MUST NOT be greater than the number of\n  elements in the array. If the hyphen (-) character is used to\n  index the end of the array (see [RFC6901]), the value is appended\n  to the array.\n\nBecause this operation adds to existing objects and arrays, its\ntarget location often does not exist.\n\nThe request body must conform to one of these media types:\n\n- ``application/openstack-images-v2.0-json-patch``\n\n- ``application/openstack-images-v2.1-json-patch`` (Since Image API\n  v2.2.)\n\nYou can also use the PATCH method to add or remove image\nproperties.\n\nFor information about the PATCH method and the available media\ntypes, see `Image API v2 HTTP PATCH media types\n<http://specs.openstack.org/openstack/glance-specs/specs/api/v2\n/http-patch-image-api-v2.html>`_.\n\nPreconditions\n\n- When you add or replace a location to the specified image, you\n  must set the ``disk_format`` and ``container_format`` parameters\n  in the image.\n\n- When you replace a location, a location must be previously set in\n  the image.\n\nSynchronous Postconditions\n\n- With correct permissions, you can view the updated values of the\n  attributes of the image.\n\n- After you add a location to an image that had no location and with\n  correct permissions, you can use API calls to view the image\n  status as ``active`` .\n\n- After you remove all locations from the image and with correct\n  permissions, you can use API calls to view the image status as\n  ``queued`` .\n\nTroubleshooting\n\n- If you cannot update locations, your request might be missing some\n  information. Make sure that you meet the preconditions and run\n  the request again. If the request fails again, review your API\n  request.", 
        "examples": {
          "application/json": [
            {
              "op": "replace", 
              "path": "/name", 
              "value": "Fedora 17"
            }, 
            {
              "op": "replace", 
              "path": "/tags", 
              "value": [
                "fedora", 
                "beefy"
              ]
            }
          ]
        }, 
        "id": "updateImage-v2", 
        "method": "patch", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateImage-v2"
            }
          }, 
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "checksum": "2cec138d7dae2aa59038ef8c9aec2390", 
                "container_format": null, 
                "created_at": "2012-08-10T19:23:50Z", 
                "disk_format": null, 
                "file": "/v2/images/da3b75d9-3f4a-40e7-8a2c-bfab23927dea/file", 
                "id": "da3b75d9-3f4a-40e7-8a2c-bfab23927dea", 
                "min_disk": null, 
                "min_ram": null, 
                "name": "Fedora 17", 
                "owner": null, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/da3b75d9-3f4a-40e7-8a2c-bfab23927dea", 
                "size": 2254249, 
                "status": "active", 
                "tags": [
                  "fedora", 
                  "beefy"
                ], 
                "updated_at": "2012-08-12T11:11:33Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Update image"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Response body is a single image entity.\n\nPreconditions\n\n- The specified image must exist.", 
        "examples": {}, 
        "id": "getImage-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                "container_format": "bare", 
                "created_at": "2014-05-05T17:15:10Z", 
                "disk_format": "qcow2", 
                "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "cirros-0.3.2-x86_64-disk", 
                "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "size": 13167616, 
                "status": "active", 
                "tags": [], 
                "updated_at": "2014-05-05T17:15:11Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Gets details for a specified image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Get image details"
      }, 
      {
        "consumes": [], 
        "description": "You cannot delete images with the 'protected' attribute set to true\n(boolean).\n\nPreconditions\n\n- You can delete an image in all status except ``deleted`` .\n\n- You must first set the 'protected' attribute to ``false``\n  (boolean) and then perform the delete.\n\nSynchronous Postconditions\n\n- The response is empty and returns the HTTP 204 status code.\n\n- The image is deleted in images index.\n\n- The binary image data managed by OpenStack Image service is\n  deleted from the storage node if the deleted image stores image\n  data in the node.\n\nTroubleShooting\n\n- The response returns the HTTP 403 status code when the\n  ``protected`` attribute is set to ``true`` even if you have\n  correct permissions. Ensure that you meet the preconditions and\n  run the request again. If the request fails again, review your\n  API request.", 
        "examples": {}, 
        "id": "deleteImage-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Delete image"
      }
    ], 
    "/v2/images/{image_id}/actions/deactivate": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If you try to download a deactivated image, the 403 Forbidden error\nis returned. Also, image locations are not visible for deactivated\nimages unless the user is an administrative user.\n\nThe deactivate operation returns an error if the image status is\nnot ``active`` or ``deactivated`` .\n\nPreconditions\n\n- The specified image must exist.", 
        "examples": {}, 
        "id": "deactivateImage-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "204": {
            "examples": {
              "application/json": {
                "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                "container_format": "bare", 
                "created_at": "2014-05-05T17:15:10Z", 
                "disk_format": "qcow2", 
                "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "cirros-0.3.2-x86_64-disk", 
                "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "size": 13167616, 
                "status": "deactivated", 
                "tags": [], 
                "updated_at": "2014-05-05T17:15:11Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Deactivates a specified image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Deactivate image"
      }
    ], 
    "/v2/images/{image_id}/actions/reactivate": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The reactivate operation returns an error if the image status is\nnot ``active`` or ``deactivated`` .\n\nPreconditions\n\n- The specified image must exist.", 
        "examples": {}, 
        "id": "reactivateImage-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "204": {
            "examples": {
              "application/json": {
                "checksum": "64d7c1cd2b6f60c92c14662941cb7913", 
                "container_format": "bare", 
                "created_at": "2014-05-05T17:15:10Z", 
                "disk_format": "qcow2", 
                "file": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27/file", 
                "id": "1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "min_disk": 0, 
                "min_ram": 0, 
                "name": "cirros-0.3.2-x86_64-disk", 
                "owner": "5ef70662f8b34079a6eddb8da9d75fe8", 
                "protected": false, 
                "schema": "/v2/schemas/image", 
                "self": "/v2/images/1bea47ed-f6a9-463b-b423-14b9cca9ad27", 
                "size": 13167616, 
                "status": "active", 
                "tags": [], 
                "updated_at": "2014-05-05T17:15:11Z", 
                "virtual_size": null, 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Reactivates a specified image. (Since Image API v2.0.)", 
        "tags": [
          "images"
        ], 
        "title": "Reactivate image"
      }
    ], 
    "/v2/images/{image_id}/file": [
      {
        "consumes": [], 
        "description": "Set the ``Content-Type`` request header to ``application/octet-\nstream`` .\n\nExample call: ``curl -i -X PUT -H \"X-Auth-Token: $token\" -H\n\"Content-Type: application/octet-stream\" -d\n@/home/glance/ubuntu-12.10.qcow2\n$image_url/v2/images/{image_id}/file``\n\nPreconditions\n\nBefore you can store binary image data, you must meet the following\npreconditions:\n\n- The specified image must exist.\n\n- You must set the disk and container formats in the image.\n\n- The image status must be ``queued`` .\n\n- Your image storage quota must be sufficient.\n\n- The size of the data that you want to store must not exceed the\n  size that the OpenStack Image service allows.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the image status as\n  ``active`` through API calls.\n\n- With correct access, you can see the stored data in the storage\n  system that OpenStack Image service manages.\n\nTroubleshooting\n\n- If you cannot store the data, your request might lack information\n  or you exceeded your allotted quota. Ensure that you meet the\n  preconditions and run the request again. If the request fails\n  again, review your API request.\n\n- The storage back ends for storing the data must have enough free\n  storage space to accommodate the size of the data.", 
        "examples": {}, 
        "id": "storeImageFile-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Uploads binary image data. (Since Image API v2.0.)", 
        "tags": [
          "image-data"
        ], 
        "title": "Upload binary image data"
      }, 
      {
        "consumes": [], 
        "description": "Example call: ``curl -i -X GET -H \"X-Auth-Token: $token\"\n$image_url/v2/images/{image_id}/file``\n\nThe response body contains the raw binary data that represents the\nactual virtual disk. The ``Content-Type`` header contains the\n``application/octet-stream`` value. The ``Content-MD5`` header\ncontains an MD5 checksum of the image data. Clients are encouraged\nto use this checksum to verify the integrity of the image data that\nthey receive.\n\n\n\nPreconditions\n\n- The specified images must exist.\n\nSynchronous Postconditions\n\n- You can download the binary image data in your machine if the\n  specified image has image data.\n\n- If image data exists, the call returns the HTTP ``200`` status\n  code.\n\n- If no image data exists, the call returns the HTTP ``204`` status\n  code.", 
        "examples": {}, 
        "id": "getImageFile-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The content range of image data. For details, see `Hypertext\nTransfer Protocol (HTTP/1.1): Range Requests\n<http://tools.ietf.org/html/rfc7233>`_.", 
            "format": "", 
            "in": "header", 
            "name": "Content-Range", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "examples": {}, 
            "headers": {}
          }, 
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Downloads binary image data. (Since Image API v2.0.)", 
        "tags": [
          "image-data"
        ], 
        "title": "Download binary image data"
      }
    ], 
    "/v2/images/{image_id}/members": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If a user with whom this image is shared makes this call, the\nmember list contains only information for that user.\n\nIf a user with whom this image has not been shared makes this call,\nthe call returns the HTTP 404 status code.\n\nPreconditions\n\n- The specified image must exist.\n\n- You must be the owner or a member of the specified image.", 
        "examples": {}, 
        "id": "listImageMembers-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "members": [
                  {
                    "created_at": "2013-10-07T17:58:03Z", 
                    "image_id": "dbc999e3-c52f-4200-bedd-3b18fe7f87fe", 
                    "member_id": "123456789", 
                    "schema": "/v2/schemas/member", 
                    "status": "pending", 
                    "updated_at": "2013-10-07T17:58:03Z"
                  }, 
                  {
                    "created_at": "2013-10-07T17:58:55Z", 
                    "image_id": "dbc999e3-c52f-4200-bedd-3b18fe7f87fe", 
                    "member_id": "987654321", 
                    "schema": "/v2/schemas/member", 
                    "status": "accepted", 
                    "updated_at": "2013-10-08T12:08:55Z"
                  }
                ], 
                "schema": "/v2/schemas/members"
              }
            }, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists the tenants with whom this image has been shared. (Since Image API v2.1.)", 
        "tags": [
          "members"
        ], 
        "title": "List image members"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Preconditions\n\n- The specified images must exist.\n\n- You can only add a new member to an image which 'visibility'\n  attribute is ``private`` .\n\n- You must be the owner of the specified image.\n\nSynchronous Postconditions\n\n- With correct permissions, you can see the member status of the\n  image as ``pending`` through API calls.\n\nTroubleshooting\n\n- Even if you have correct permissions, if the ``visibility``\n  attribute is set to ``public`` , the request returns the HTTP 403\n  error code. Ensure that you meet the preconditions and run the\n  request again. If the request fails again, review your API\n  request.\n\n- If the specified member is already a member for the image, the\n  service returns the HTTP 409 Conflict error code. In case you\n  meant a different member, double-check that you specified the\n  correct member.", 
        "examples": {
          "application/json": {
            "member": "8989447062e04a818baf9e073fd04fa7"
          }
        }, 
        "id": "createImageMember-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2013-09-20T19:22:19Z", 
                "image_id": "a96be11e-8536-4910-92cb-de50aa19dfe6", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "pending", 
                "updated_at": "2013-09-20T19:25:31Z"
              }
            }, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Adds a specified tenant ID as an image member. (Since Image API v2.1.)", 
        "tags": [
          "members"
        ], 
        "title": "Create image member"
      }
    ], 
    "/v2/images/{image_id}/members/{member_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Response body is a single image member entity. (Since Image API\nv2.2.)\n\nPreconditions\n\n- The specified image must exist.\n\n- You must be the owner or a member of the specified image.", 
        "examples": {}, 
        "id": "getImageMember-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image member ID. For example, the tenant ID of the user with whom\nthe image is being shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2013-11-26T07:21:21Z", 
                "image_id": "0ae74cc5-5147-4239-9ce2-b0c580f7067e", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "pending", 
                "updated_at": "2013-11-26T07:21:21Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows image member details.", 
        "tags": [
          "members"
        ], 
        "title": "Show image member details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Preconditions\n\n- The specified images must exist.\n\n- You must be a member of the specified image.\n\nSynchronous Postconditions\n\n- If you update the member status to ``accepted`` and have the\n  correct permissions, you see the image in list images responses.\n\n- With correct permissions, you can see the updated member status of\n  the image through API calls.", 
        "examples": {
          "application/json": {
            "status": "accepted"
          }
        }, 
        "id": "updateImageMember-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateImageMember-v2"
            }
          }, 
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image member ID. For example, the tenant ID of the user with whom\nthe image is being shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2013-09-20T19:22:19Z", 
                "image_id": "a96be11e-8536-4910-92cb-de50aa19dfe6", 
                "member_id": "8989447062e04a818baf9e073fd04fa7", 
                "schema": "/v2/schemas/member", 
                "status": "accepted", 
                "updated_at": "2013-09-20T20:15:31Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Sets the specified status for the specified member of the specified image. (Since Image API v2.1.)", 
        "tags": [
          "members"
        ], 
        "title": "Update image member"
      }, 
      {
        "consumes": [], 
        "description": "Preconditions\n\n- The specified image must exist.\n\n- You must be the owner of the specified image.\n\nSynchronous Postconditions\n\n- The specified member is removed from the image members.\n\nTroubleshooting\n\n- Even if you have correct permissions, if you are not the owner of\n  the specified image, the request returns the HTTP 403 error code.\n  Ensure that you meet the preconditions and run the request again.\n  If the request fails again, review your API request.", 
        "examples": {}, 
        "id": "deleteImageMember-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image member ID. For example, the tenant ID of the user with whom\nthe image is being shared.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified tenant ID from the member list of the specified image. (Since Image API v2.1.)", 
        "tags": [
          "members"
        ], 
        "title": "Delete image member"
      }
    ], 
    "/v2/images/{image_id}/tags/{tag}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "addImageTag-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Adds a specified tag to a specified image. (Since Image API v2.0.)", 
        "tags": [
          "image-tags"
        ], 
        "title": "Add image tag"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteImageTag-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Image ID stored through the image API. Typically a UUID.", 
            "format": "", 
            "in": "path", 
            "name": "image_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Image tag.", 
            "format": "", 
            "in": "path", 
            "name": "tag", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified tag from a specified image. (Since Image API v2.0.)", 
        "tags": [
          "image-tags"
        ], 
        "title": "Delete image tag"
      }
    ], 
    "/v2/metadefs/namespaces": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The namespace is created with a ``Location`` header that contains\nthe newly-created URI for the namespace.", 
        "examples": {
          "application/json": {
            "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.", 
            "display_name": "Hypervisor Selection", 
            "namespace": "OS::Compute::Hypervisor", 
            "properties": {
              "hypervisor_type": {
                "description": "The hypervisor type.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "title": "Hypervisor Type", 
                "type": "string"
              }, 
              "vm_mode": {
                "description": "The virtual machine mode.", 
                "enum": [
                  "hvm", 
                  "xen", 
                  "uml", 
                  "exe"
                ], 
                "title": "VM Mode", 
                "type": "string"
              }
            }, 
            "protected": true, 
            "resource_type_associations": [
              {
                "name": "OS::Glance::Image"
              }
            ], 
            "visibility": "public"
          }
        }, 
        "id": "createNamespace-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createNamespace-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.", 
                "display_name": "Hypervisor Selection", 
                "namespace": "OS::Compute::Hypervisor", 
                "properties": {
                  "hypervisor_type": {
                    "description": "The hypervisor type.", 
                    "enum": [
                      "xen", 
                      "qemu", 
                      "kvm", 
                      "lxc", 
                      "uml", 
                      "vmware", 
                      "hyperv"
                    ], 
                    "title": "Hypervisor Type", 
                    "type": "string"
                  }, 
                  "vm_mode": {
                    "description": "The virtual machine mode.", 
                    "enum": [
                      "hvm", 
                      "xen", 
                      "uml", 
                      "exe"
                    ], 
                    "title": "VM Mode", 
                    "type": "string"
                  }
                }, 
                "protected": true, 
                "resource_type_associations": [
                  {
                    "name": "OS::Glance::Image"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Hypervisor", 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Creates a namespace.", 
        "tags": [
          "metadef-namespace"
        ], 
        "title": "Create namespace"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset in the larger collection of namespaces and a link\nthat you can use to get the next set of namespaces. Check for the\npresence of a ``next`` link and use it as the URI in a subsequent\nHTTP GET request. Follow this pattern until a ``next`` link is no\nlonger provided. The ``next`` link preserves any query parameters\nthat you send in your initial request. You can use the ``first``\nlink to return to the first page in the collection. If you prefer\nto paginate through namespaces manually, use the ``limit`` and\n``marker`` parameters.\n\nThe list operation accepts the ``resource_types`` and\n``visibility`` query parameters, which let you filter the results\nin the returned collection.\n\nTo sort the results of this operation, use the ``sort_key`` and\n``sort_dir`` parameters. The API uses the natural sorting order in\nthe namespace attribute that you provide as the ``sort_key``\nparameter.", 
        "examples": {}, 
        "id": "listNamespaces-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter. Namespace visibility. Valid values are ``public``\nand ``private`` . Default is ``public`` .", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter. Specify this value as comma- separated list. For\nexample, send the ``resource_types`` filter of\n``OS::Glance::Image,OS::Nova::Flavor`` to filter the namespaces by\nthe specified resource types.", 
            "format": "", 
            "in": "query", 
            "name": "resource_types", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Sort key. Use attributes like ``namespace`` for sorting. Default is\n``created_at`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort direction. Valid values are ``asc`` (ascending) and ``desc``\n(descending). Default is ``desc`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "first": "/v2/metadefs/namespaces?sort_key=created_at&sort_dir=asc", 
                "namespaces": [
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "The libvirt compute driver options. These are properties specific to compute drivers.  For a list of all hypervisors, see here: https://wiki.openstack.org/wiki/HypervisorSupportMatrix.", 
                    "display_name": "libvirt Driver Options", 
                    "namespace": "OS::Compute::Libvirt", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Glance::Image", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Libvirt", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "Compute drivers may enable quotas on CPUs available to a VM, disk tuning, bandwidth I/O, and instance VIF traffic control.  See: http://docs.openstack.org/admin-guide-cloud/compute-flavors.html", 
                    "display_name": "Flavor Quota", 
                    "namespace": "OS::Compute::Quota", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "Trusted compute pools with Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) support IT compliance by protecting virtualized data centers - private, public, and hybrid clouds against attacks toward hypervisor and BIOS, firmware, and other pre-launch software components.", 
                    "display_name": "Trusted Compute Pools (Intel\u00ae TXT)", 
                    "namespace": "OS::Compute::Trust", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Trust", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }, 
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "description": "This provides the preferred socket/core/thread counts for the virtual CPU instance exposed to guests. This enables the ability to avoid hitting limitations on vCPU topologies that OS vendors place on their products. See also: http://git.openstack.org/cgit/openstack/nova-specs/tree/specs/juno/virt-driver-vcpu-topology.rst", 
                    "display_name": "Virtual CPU Topology", 
                    "namespace": "OS::Compute::VirtCPUTopology", 
                    "owner": "admin", 
                    "protected": true, 
                    "resource_type_associations": [
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Glance::Image", 
                        "prefix": "hw_", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }, 
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Cinder::Volume", 
                        "prefix": "hw_", 
                        "properties_target": "image", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }, 
                      {
                        "created_at": "2014-08-28T17:13:06Z", 
                        "name": "OS::Nova::Flavor", 
                        "prefix": "hw:", 
                        "updated_at": "2014-08-28T17:13:06Z"
                      }
                    ], 
                    "schema": "/v2/schemas/metadefs/namespace", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::VirtCPUTopology", 
                    "updated_at": "2014-08-28T17:13:06Z", 
                    "visibility": "public"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespaces"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists public namespaces.", 
        "tags": [
          "metadef-namespace"
        ], 
        "title": "List namespaces"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows a single namespace entity with all details\nincluding properties and objects.", 
        "examples": {}, 
        "id": "getNamespace-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2014-08-28T17:13:06Z", 
                "description": "The libvirt compute driver options. These are properties specific to compute drivers.  For a list of all hypervisors, see here: https://wiki.openstack.org/wiki/HypervisorSupportMatrix.", 
                "display_name": "libvirt Driver Options", 
                "namespace": "OS::Compute::Libvirt", 
                "owner": "admin", 
                "properties": {
                  "hw_disk_bus": {
                    "description": "Specifies the type of disk controller to attach disk devices to.", 
                    "enum": [
                      "scsi", 
                      "virtio", 
                      "uml", 
                      "xen", 
                      "ide", 
                      "usb"
                    ], 
                    "title": "Disk Bus", 
                    "type": "string"
                  }, 
                  "hw_machine_type": {
                    "description": "Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).", 
                    "title": "Machine Type", 
                    "type": "string"
                  }, 
                  "hw_qemu_guest_agent": {
                    "description": "It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.", 
                    "enum": [
                      "yes", 
                      "no"
                    ], 
                    "title": "QEMU Guest Agent", 
                    "type": "string"
                  }, 
                  "hw_rng_model": {
                    "default": "virtio", 
                    "description": "Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. /dev/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=/dev/hwrng", 
                    "title": "Random Number Generator Device", 
                    "type": "string"
                  }, 
                  "hw_scsi_model": {
                    "default": "virtio-scsi", 
                    "description": "Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.", 
                    "title": "SCSI Model", 
                    "type": "string"
                  }, 
                  "hw_video_model": {
                    "description": "The video image driver used.", 
                    "enum": [
                      "vga", 
                      "cirrus", 
                      "vmvga", 
                      "xen", 
                      "qxl"
                    ], 
                    "title": "Video Model", 
                    "type": "string"
                  }, 
                  "hw_video_ram": {
                    "description": "Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.", 
                    "title": "Max Video Ram", 
                    "type": "integer"
                  }, 
                  "hw_vif_model": {
                    "description": "Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.", 
                    "enum": [
                      "e1000", 
                      "ne2k_pci", 
                      "pcnet", 
                      "rtl8139", 
                      "virtio", 
                      "e1000", 
                      "e1000e", 
                      "VirtualE1000", 
                      "VirtualE1000e", 
                      "VirtualPCNet32", 
                      "VirtualSriovEthernetCard", 
                      "VirtualVmxnet", 
                      "netfront", 
                      "ne2k_pci"
                    ], 
                    "title": "Virtual Network Interface", 
                    "type": "string"
                  }, 
                  "os_command_line": {
                    "description": "The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).", 
                    "title": "Kernel Command Line", 
                    "type": "string"
                  }
                }, 
                "protected": true, 
                "resource_type_associations": [
                  {
                    "created_at": "2014-08-28T17:13:06Z", 
                    "name": "OS::Glance::Image", 
                    "updated_at": "2014-08-28T17:13:06Z"
                  }
                ], 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Libvirt", 
                "updated_at": "2014-08-28T17:13:06Z", 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets details for a specified namespace.", 
        "tags": [
          "metadef-namespace"
        ], 
        "title": "Get namespaces details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.", 
            "display_name": "Hypervisor Selection", 
            "namespace": "OS::Compute::Hypervisor", 
            "protected": false, 
            "visibility": "public"
          }
        }, 
        "id": "updateNamespace-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T13:31:37Z", 
                "description": "Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the harware specification required when a new vm is requested.", 
                "display_name": "Hypervisor Selection", 
                "namespace": "OS::Compute::Hypervisor", 
                "owner": "7ec22942411e427692e8a3436be1031a", 
                "protected": false, 
                "schema": "/v2/schemas/metadefs/namespace", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Hypervisor", 
                "updated_at": "2014-09-19T13:31:37Z", 
                "visibility": "public"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified namespace.", 
        "tags": [
          "metadef-namespace"
        ], 
        "title": "Update namespace"
      }, 
      {
        "consumes": [], 
        "description": "You cannot delete namespaces with the ``protected`` attribute set\nto true (boolean); the response returns the HTTP 403 status code.\n\nTo delete a namespace, you must first make an update namespace\nrequest to set the ``protected`` attribute to false (boolean) on\nthe namespace. Then, delete the namespace.\n\nIf the operation succeeds, the response returns the HTTP 204 status\ncode.\n\nIf you try to remove a namespace with the ``protected`` attribute\nset to true (boolean), the operation fails and the response returns\nthe HTTP 403 error code.", 
        "examples": {}, 
        "id": "deleteNamespace-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified namespace and its properties, objects, and any resource type associations.", 
        "tags": [
          "metadef-namespace"
        ], 
        "title": "Delete namespace"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/objects": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "description": "You can configure the CPU limits with control parameters.", 
            "name": "CPU Limits", 
            "properties": {
              "quota:cpu_period": {
                "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                "maximum": 1000000, 
                "minimum": 1000, 
                "title": "Quota: CPU Period", 
                "type": "integer"
              }, 
              "quota:cpu_quota": {
                "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                "title": "Quota: CPU Quota", 
                "type": "integer"
              }, 
              "quota:cpu_shares": {
                "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                "title": "Quota: CPU Shares", 
                "type": "integer"
              }
            }, 
            "required": []
          }
        }, 
        "id": "createObject-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createObject-v2"
            }
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T18:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_period": {
                    "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                    "maximum": 1000000, 
                    "minimum": 1000, 
                    "title": "Quota: CPU Period", 
                    "type": "integer"
                  }, 
                  "quota:cpu_quota": {
                    "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                    "title": "Quota: CPU Quota", 
                    "type": "integer"
                  }, 
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T18:20:56Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Creates an object definition in a specified namespace.", 
        "tags": [
          "metadef-object"
        ], 
        "title": "Create object"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a subset of the larger collection of namespaces and a link\nthat you can use to get the next set of namespaces. You should\nalways check for the presence of a ``next`` link and use it as the\nURI in a subsequent HTTP GET request. You should follow this\npattern until a ``next`` link is no longer provided. The next link\npreserves any query parameters that you send in your initial\nrequest. You can use the ``first`` link to jump back to the first\npage of the collection. If you prefer to paginate through\nnamespaces manually, use the ``limit`` and ``marker`` parameters.\n\nThe list operation accepts ``resource_types`` and ``visibility`` as\nquery parameters that let you filter the results of the returned\ncollection.\n\nFor example, sending a ``resource_types`` filter of\n``OS::Glance::Image,OS::Nova::Flavor`` filters the namespaces to\ninclude only namespaces that are associated to the given resource\ntypes.\n\nYou can sort the results of this operation by using the\n``sort_key`` and ``sort_dir`` parameters. The API uses the natural\nsorting of whatever namespace attribute is provided as the\n``sort_key`` .", 
        "examples": {}, 
        "id": "listObjects-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only namespaces with the specified visibility value or\nvalues.\n\nValid values are ``public`` and ``private`` . If you omit this\nparameter, the response shows ``public`` and ``private``\nnamespaces.", 
            "format": "", 
            "in": "query", 
            "name": "visibility", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only namespaces with the specified resource type or types.\n\nSpecify multiple values as a comma-separated list. For example, set\nthe ``resource_types`` filter to\n``OS::Glance::Image,OS::Nova::Flavor`` to include only namespaces\nthat are associated with the specified resource types.", 
            "format": "", 
            "in": "query", 
            "name": "resource_types", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Sort key. A valid value is an attribute, such as ``namespace`` ,\nfor sorting. Default is ``created_at`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort direction. A valid value is ``asc`` (ascending) or ``desc``\n(descending). Default is ``desc`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "objects": [
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "You can configure the CPU limits with control parameters.", 
                    "name": "CPU Limits", 
                    "properties": {
                      "quota:cpu_period": {
                        "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                        "maximum": 1000000, 
                        "minimum": 1000, 
                        "title": "Quota: CPU Period", 
                        "type": "integer"
                      }, 
                      "quota:cpu_quota": {
                        "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                        "title": "Quota: CPU Quota", 
                        "type": "integer"
                      }, 
                      "quota:cpu_shares": {
                        "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                        "title": "Quota: CPU Shares", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits"
                  }, 
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "Using disk I/O quotas, you can set maximum disk write to 10 MB per second for a VM user.", 
                    "name": "Disk QoS", 
                    "properties": {
                      "quota:disk_read_bytes_sec": {
                        "description": "Sets disk I/O quota for disk read bytes / sec.", 
                        "title": "Quota: Disk read bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_read_iops_sec": {
                        "description": "Sets disk I/O quota for disk read IOPS / sec.", 
                        "title": "Quota: Disk read IOPS / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_total_bytes_sec": {
                        "description": "Sets disk I/O quota for total disk bytes / sec.", 
                        "title": "Quota: Disk Total Bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_total_iops_sec": {
                        "description": "Sets disk I/O quota for disk total IOPS / sec.", 
                        "title": "Quota: Disk Total IOPS / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_write_bytes_sec": {
                        "description": "Sets disk I/O quota for disk write bytes / sec.", 
                        "title": "Quota: Disk Write Bytes / sec", 
                        "type": "integer"
                      }, 
                      "quota:disk_write_iops_sec": {
                        "description": "Sets disk I/O quota for disk write IOPS / sec.", 
                        "title": "Quota: Disk Write IOPS / sec", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/Disk QoS"
                  }, 
                  {
                    "created_at": "2014-09-18T18:16:35Z", 
                    "description": "Bandwidth QoS tuning for instance virtual interfaces (VIFs) may be specified with these properties. Incoming and outgoing traffic can be shaped independently. If not specified, no quality of service (QoS) is applied on that traffic direction. So, if you want to shape only the network's incoming traffic, use inbound only (and vice versa). The OpenStack Networking service abstracts the physical implementation of the network, allowing plugins to configure and manage physical resources. Virtual Interfaces (VIF) in the logical model are analogous to physical network interface cards (NICs). VIFs are typically owned a managed by an external service; for instance when OpenStack Networking is used for building OpenStack networks, VIFs would be created, owned, and managed in Nova. VIFs are connected to OpenStack Networking networks via ports. A port is analogous to a port on a network switch, and it has an administrative state. When a VIF is attached to a port the OpenStack Networking API creates an attachment object, which specifies the fact that a VIF with a given identifier is plugged into the port.", 
                    "name": "Virtual Interface QoS", 
                    "properties": {
                      "quota:vif_inbound_average": {
                        "description": "Network Virtual Interface (VIF) inbound average in kilobytes per second. Specifies average bit rate on the interface being shaped.", 
                        "title": "Quota: VIF Inbound Average", 
                        "type": "integer"
                      }, 
                      "quota:vif_inbound_burst": {
                        "description": "Network Virtual Interface (VIF) inbound burst in total kilobytes. Specifies the amount of bytes that can be burst at peak speed.", 
                        "title": "Quota: VIF Inbound Burst", 
                        "type": "integer"
                      }, 
                      "quota:vif_inbound_peak": {
                        "description": "Network Virtual Interface (VIF) inbound peak in kilobytes per second. Specifies maximum rate at which an interface can receive data.", 
                        "title": "Quota: VIF Inbound Peak", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_average": {
                        "description": "Network Virtual Interface (VIF) outbound average in kilobytes per second. Specifies average bit rate on the interface being shaped.", 
                        "title": "Quota: VIF Outbound Average", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_burst": {
                        "description": "Network Virtual Interface (VIF) outbound burst in total kilobytes. Specifies the amount of bytes that can be burst at peak speed.", 
                        "title": "Quota: VIF Outbound Burst", 
                        "type": "integer"
                      }, 
                      "quota:vif_outbound_peak": {
                        "description": "Network Virtual Interface (VIF) outbound peak in kilobytes per second. Specifies maximum rate at which an interface can send data.", 
                        "title": "Quota: VIF Outbound Burst", 
                        "type": "integer"
                      }
                    }, 
                    "required": [], 
                    "schema": "/v2/schemas/metadefs/object", 
                    "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/Virtual Interface QoS"
                  }
                ], 
                "schema": "v2/schemas/metadefs/objects"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists object definitions within a namespace.", 
        "tags": [
          "metadef-object"
        ], 
        "title": "List objects"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/objects/{object_name}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Response body is a single object entity.", 
        "examples": {}, 
        "id": "getObject-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T18:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_period": {
                    "description": "Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value.", 
                    "maximum": 1000000, 
                    "minimum": 1000, 
                    "title": "Quota: CPU Period", 
                    "type": "integer"
                  }, 
                  "quota:cpu_quota": {
                    "description": "Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.", 
                    "title": "Quota: CPU Quota", 
                    "type": "integer"
                  }, 
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T18:20:56Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets definition for a specified object.", 
        "tags": [
          "metadef-object"
        ], 
        "title": "Get object definition"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "description": "You can configure the CPU limits with control parameters.", 
            "name": "CPU Limits", 
            "properties": {
              "quota:cpu_shares": {
                "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                "title": "Quota: CPU Shares", 
                "type": "integer"
              }
            }, 
            "required": []
          }
        }, 
        "id": "updateObject-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T19:20:56Z", 
                "description": "You can configure the CPU limits with control parameters.", 
                "name": "CPU Limits", 
                "properties": {
                  "quota:cpu_shares": {
                    "description": "Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024.", 
                    "title": "Quota: CPU Shares", 
                    "type": "integer"
                  }
                }, 
                "required": [], 
                "schema": "/v2/schemas/metadefs/object", 
                "self": "/v2/metadefs/namespaces/OS::Compute::Quota/objects/CPU Limits", 
                "updated_at": "2014-09-19T19:20:56Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified object definition in a specified namespace.", 
        "tags": [
          "metadef-object"
        ], 
        "title": "Update object definition"
      }, 
      {
        "consumes": [], 
        "description": "You cannot delete objects in a namespace with the 'protected'\nattribute set to true (boolean); the response returns the HTTP 403\nstatus code.\n\nYou must first set the ``protected`` attribute to false (boolean)\non the namespace and then perform the delete. The response is empty\nand returns the HTTP 204 status code.", 
        "examples": {}, 
        "id": "deleteObject-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The name of the object.", 
            "format": "", 
            "in": "path", 
            "name": "object_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified object definition within a namespace.", 
        "tags": [
          "metadef-object"
        ], 
        "title": "Delete property definition"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/properties": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The schema is a subset of JSON property definition schema.", 
        "examples": {
          "application/json": {
            "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
            "enum": [
              "xen", 
              "qemu", 
              "kvm", 
              "lxc", 
              "uml", 
              "vmware", 
              "hyperv"
            ], 
            "name": "hypervisor_type", 
            "title": "Hypervisor Type", 
            "type": "string"
          }
        }, 
        "id": "createProperty-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createProperty-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Creates a property definition within a namespace.", 
        "tags": [
          "metadef-property"
        ], 
        "title": "Create property"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Returns a list of property definitions in a namespace.", 
        "examples": {}, 
        "id": "listProperties-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "properties": {
                  "hw_disk_bus": {
                    "description": "Specifies the type of disk controller to attach disk devices to.", 
                    "enum": [
                      "scsi", 
                      "virtio", 
                      "uml", 
                      "xen", 
                      "ide", 
                      "usb"
                    ], 
                    "title": "Disk Bus", 
                    "type": "string"
                  }, 
                  "hw_machine_type": {
                    "description": "Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).", 
                    "title": "Machine Type", 
                    "type": "string"
                  }, 
                  "hw_qemu_guest_agent": {
                    "description": "It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.", 
                    "enum": [
                      "yes", 
                      "no"
                    ], 
                    "title": "QEMU Guest Agent", 
                    "type": "string"
                  }, 
                  "hw_rng_model": {
                    "default": "virtio", 
                    "description": "Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. /dev/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=/dev/hwrng", 
                    "title": "Random Number Generator Device", 
                    "type": "string"
                  }, 
                  "hw_scsi_model": {
                    "default": "virtio-scsi", 
                    "description": "Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.", 
                    "title": "SCSI Model", 
                    "type": "string"
                  }, 
                  "hw_video_model": {
                    "description": "The video image driver used.", 
                    "enum": [
                      "vga", 
                      "cirrus", 
                      "vmvga", 
                      "xen", 
                      "qxl"
                    ], 
                    "title": "Video Model", 
                    "type": "string"
                  }, 
                  "hw_video_ram": {
                    "description": "Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.", 
                    "title": "Max Video Ram", 
                    "type": "integer"
                  }, 
                  "hw_vif_model": {
                    "description": "Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.", 
                    "enum": [
                      "e1000", 
                      "ne2k_pci", 
                      "pcnet", 
                      "rtl8139", 
                      "virtio", 
                      "e1000", 
                      "e1000e", 
                      "VirtualE1000", 
                      "VirtualE1000e", 
                      "VirtualPCNet32", 
                      "VirtualSriovEthernetCard", 
                      "VirtualVmxnet", 
                      "netfront", 
                      "ne2k_pci"
                    ], 
                    "title": "Virtual Network Interface", 
                    "type": "string"
                  }, 
                  "os_command_line": {
                    "description": "The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).", 
                    "title": "Kernel Command Line", 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists property definitions within a namespace.", 
        "tags": [
          "metadef-property"
        ], 
        "title": "List properties"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/properties/{property_name}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If you include the ``resource_type`` query parameter, the prefix of\nthe included resource type is removed from the property name before\nthe query is submitted. This enables you to look for a property\nname that starts with a prefix from an associated resource type.\n\nResponse body shows a single property entity.", 
        "examples": {}, 
        "id": "getProperty-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/getProperty-v2"
            }
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "Filter parameter.\n\nShows only property names that start with a prefix from an\nassociated specified resource type.\n\nThe prefix of the included resource type is removed from the\nproperty name in the response.", 
            "format": "", 
            "in": "query", 
            "name": "resource_type", 
            "required": false, 
            "type": "integer"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets the definition for a specified property.", 
        "tags": [
          "metadef-property"
        ], 
        "title": "Get property definition"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
            "enum": [
              "xen", 
              "qemu", 
              "kvm", 
              "lxc", 
              "uml", 
              "vmware", 
              "hyperv"
            ], 
            "name": "hypervisor_type", 
            "title": "Hypervisor Type", 
            "type": "string"
          }
        }, 
        "id": "updateProperty-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateProperty-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "description": "The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.", 
                "enum": [
                  "xen", 
                  "qemu", 
                  "kvm", 
                  "lxc", 
                  "uml", 
                  "vmware", 
                  "hyperv"
                ], 
                "name": "hypervisor_type", 
                "title": "Hypervisor Type", 
                "type": "string"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified property definition.", 
        "tags": [
          "metadef-property"
        ], 
        "title": "Update property definition"
      }, 
      {
        "consumes": [], 
        "description": "To remove a property, first make an update namespace request to set\nthe ``protected`` attribute to false (boolean) on the namespace.\nThen, remove the property. If the operation succeeds, the response\nreturns the HTTP 204 status code.\n\nIf you try to remove a property in a namespace with the\n``protected`` attribute set to true (boolean), the operation fails\nand the response returns the HTTP 403 error code.", 
        "examples": {}, 
        "id": "deleteProperty-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteProperty-v2"
            }
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified property definition in a specified namespace.", 
        "tags": [
          "metadef-property"
        ], 
        "title": "Remove property definition"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/resource_types": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "name": "OS::Cinder::Volume", 
            "prefix": "hw_", 
            "properties_target": "image"
          }
        }, 
        "id": "createResourceTypeAssoc-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createResourceTypeAssoc-v2"
            }
          }, 
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "created_at": "2014-09-19T16:09:13Z", 
                "name": "OS::Cinder::Volume", 
                "prefix": "hw_", 
                "properties_target": "image", 
                "updated_at": "2014-09-19T16:09:13Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Creates a resource type association in a namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "title": "Create resource type association"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body lists resource type association entities.", 
        "examples": {}, 
        "id": "listResourceTypeAssocs-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "resource_type_associations": [
                  {
                    "created_at": "2014-09-19T16:13:33Z", 
                    "name": "OS::Glance::Image", 
                    "prefix": "hw_", 
                    "updated_at": "2014-09-19T16:13:33Z"
                  }, 
                  {
                    "created_at": "2014-09-19T16:09:13Z", 
                    "name": "OS::Cinder::Volume", 
                    "prefix": "hw_", 
                    "properties_target": "image", 
                    "updated_at": "2014-09-19T16:09:13Z"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists resource type associations in a specified namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "title": "List resource type associations"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/resource_types/{name}": [
      {
        "consumes": [], 
        "description": "To remove an association, first make an update namespace request to\nset the ``protected`` attribute to false (boolean) on the\nnamespace. Then, remove the association. If the operation succeeds,\nthe response returns the HTTP 204 status code.\n\nIf you try to remove resource type associations in a namespace with\nthe ``protected`` attribute set to true (boolean), the operation\nfails and the response returns the HTTP 403 error code.", 
        "examples": {}, 
        "id": "deleteResourceTypeAssoc-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Unique namespace.", 
            "format": "", 
            "in": "path", 
            "name": "namespace", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Name of the resource type.", 
            "format": "", 
            "in": "path", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified resource type association in a specified namespace.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "title": "Remove resource type association"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/tags": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "tags": [
              {
                "name": "sample-tag1"
              }, 
              {
                "name": "sample-tag2"
              }, 
              {
                "name": "sample-tag3"
              }
            ]
          }
        }, 
        "id": "createTags-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createTags-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "tags": [
                  {
                    "name": "sample-tag1"
                  }, 
                  {
                    "name": "sample-tag2"
                  }, 
                  {
                    "name": "sample-tag3"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Creates one or more tag definitions in a specified namespace.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Create tags"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "To manually paginate through the list of tags, use the ``limit``\nand ``marker`` parameters.\n\nTo sort the results of this operation use the ``sort_key`` and\n``sort_dir`` parameters. The API uses the natural sort order of the\ntag attribute of the specified ``sort_key`` parameter.", 
        "examples": {}, 
        "id": "listTags-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/listTags-v2"
            }
          }, 
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort key. A valid value is an attribute, such as ``name`` . for\nsorting. Default is ``created_at`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort direction. A valid value is ``asc`` (ascending) or ``desc``\n(descending). Default is ``desc`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "tags": [
                  {
                    "name": "sample-tag1"
                  }, 
                  {
                    "name": "sample-tag2"
                  }, 
                  {
                    "name": "sample-tag3"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists the tag definitions within a namespace.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "List tags"
      }, 
      {
        "consumes": [], 
        "description": "You cannot delete tags in a namespace with the 'protected'\nattribute set to true (boolean); the response returns the HTTP 403\nstatus code.\n\nYou must first set the ``protected`` attribute to false (boolean)\non the namespace and then perform the delete. The response is empty\nand returns the HTTP 204 status code.", 
        "examples": {}, 
        "id": "deleteAllTags-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteAllTags-v2"
            }
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes all tag definitions within a namespace.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Delete all tag definitions"
      }
    ], 
    "/v2/metadefs/namespaces/{namespace}/tags/{name}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "addTag-v2", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/addTag-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2015-05-09T01:12:31Z", 
                "name": "added-sample-tag", 
                "updated_at": "2015-05-09T01:12:31Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Adds a specified tag to the list of namespace tag definitions.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Add tag definition"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body shows a single tag entity.", 
        "examples": {}, 
        "id": "getTag-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/getTag-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "created_at": "2015-05-06T23:16:12Z", 
                "name": "sample-tag2", 
                "updated_at": "2015-05-06T23:16:12Z"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a definition for the specified tag.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Get tag definition"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "name": "new-tag-name"
          }
        }, 
        "id": "updateTag-v2", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateTag-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "name": "new-tag-name"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Renames a specified tag definition.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Update tag definition"
      }, 
      {
        "consumes": [], 
        "description": "You cannot delete tags in a namespace with the 'protected'\nattribute set to true (boolean); the response returns the HTTP 403\nstatus code.\n\nYou must first set the ``protected`` attribute to false (boolean)\non the namespace and then perform the delete. The response is empty\nand returns the HTTP 204 status code.", 
        "examples": {}, 
        "id": "deleteTag-v2", 
        "method": "delete", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/deleteTag-v2"
            }
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified tag definition within a namespace.", 
        "tags": [
          "metadef-tag"
        ], 
        "title": "Delete tag definition"
      }
    ], 
    "/v2/metadefs/resource_types": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Lists all possible resource types. You can assign metadata\ndefinition namespaces to these resource types. See the metadata\ndefinition resource types section.", 
        "examples": {}, 
        "id": "listResourceTypes-v2", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "resource_types": [
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Glance::Image", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Cinder::Volume", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Flavor", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Aggregate", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }, 
                  {
                    "created_at": "2014-08-28T18:13:04Z", 
                    "name": "OS::Nova::Instance", 
                    "updated_at": "2014-08-28T18:13:04Z"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists resource types.", 
        "tags": [
          "metadef-resourcetype"
        ], 
        "title": "List resource types"
      }
    ], 
    "/v2/schemas/image": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "examples": {}, 
        "id": "getImageSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": {
                  "type": "string"
                }, 
                "links": [
                  {
                    "href": "{self}", 
                    "rel": "self"
                  }, 
                  {
                    "href": "{file}", 
                    "rel": "enclosure"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "image", 
                "properties": {
                  "architecture": {
                    "description": "Operating system architecture as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "checksum": {
                    "description": "md5 hash of image contents. (READ-ONLY)", 
                    "maxLength": 32, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "container_format": {
                    "description": "Format of the container", 
                    "enum": [
                      null, 
                      "ami", 
                      "ari", 
                      "aki", 
                      "bare", 
                      "ovf", 
                      "ova"
                    ], 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "created_at": {
                    "description": "Date and time of image registration (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "direct_url": {
                    "description": "URL to access the image file kept in external store (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "disk_format": {
                    "description": "Format of the disk", 
                    "enum": [
                      null, 
                      "ami", 
                      "ari", 
                      "aki", 
                      "vhd", 
                      "vmdk", 
                      "raw", 
                      "qcow2", 
                      "vdi", 
                      "iso"
                    ], 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "file": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "id": {
                    "description": "An identifier for the image", 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "instance_uuid": {
                    "description": "ID of instance used to create this image.", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "kernel_id": {
                    "description": "ID of image stored in Glance that should be used as the kernel when booting an AMI-style image.", 
                    "is_base": false, 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "locations": {
                    "description": "A set of URLs to access the image file kept in external store", 
                    "items": {
                      "properties": {
                        "metadata": {
                          "type": "object"
                        }, 
                        "url": {
                          "maxLength": 255, 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "url", 
                        "metadata"
                      ], 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "min_disk": {
                    "description": "Amount of disk space (in GB) required to boot image.", 
                    "type": "integer"
                  }, 
                  "min_ram": {
                    "description": "Amount of ram (in MB) required to boot image.", 
                    "type": "integer"
                  }, 
                  "name": {
                    "description": "Descriptive name for the image", 
                    "maxLength": 255, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "os_distro": {
                    "description": "Common name of operating system distribution as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "os_version": {
                    "description": "Operating system version as specified by the distributor", 
                    "is_base": false, 
                    "type": "string"
                  }, 
                  "owner": {
                    "description": "Owner of the image", 
                    "maxLength": 255, 
                    "type": [
                      "null", 
                      "string"
                    ]
                  }, 
                  "protected": {
                    "description": "If true, image will not be deletable.", 
                    "type": "boolean"
                  }, 
                  "ramdisk_id": {
                    "description": "ID of image stored in Glance that should be used as the ramdisk when booting an AMI-style image.", 
                    "is_base": false, 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "schema": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "self": {
                    "description": "(READ-ONLY)", 
                    "type": "string"
                  }, 
                  "size": {
                    "description": "Size of image file in bytes (READ-ONLY)", 
                    "type": [
                      "null", 
                      "integer"
                    ]
                  }, 
                  "status": {
                    "description": "Status of the image (READ-ONLY)", 
                    "enum": [
                      "queued", 
                      "saving", 
                      "active", 
                      "killed", 
                      "deleted", 
                      "pending_delete"
                    ], 
                    "type": "string"
                  }, 
                  "tags": {
                    "description": "List of strings related to the image", 
                    "items": {
                      "maxLength": 255, 
                      "type": "string"
                    }, 
                    "type": "array"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last image modification (READ-ONLY)", 
                    "type": "string"
                  }, 
                  "virtual_size": {
                    "description": "Virtual size of image in bytes (READ-ONLY)", 
                    "type": [
                      "null", 
                      "integer"
                    ]
                  }, 
                  "visibility": {
                    "description": "Scope of image accessibility", 
                    "enum": [
                      "public", 
                      "private"
                    ], 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a json-schema document that represents an image entity. (Since Images v2.0.)", 
        "tags": [
          "image-schemas"
        ], 
        "title": "Get image schema"
      }
    ], 
    "/v2/schemas/images": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "An images entity is a container of image entities.\n\nThe following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "examples": {}, 
        "id": "getImagesSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "images", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "images": {
                    "items": {
                      "additionalProperties": {
                        "type": "string"
                      }, 
                      "links": [
                        {
                          "href": "{self}", 
                          "rel": "self"
                        }, 
                        {
                          "href": "{file}", 
                          "rel": "enclosure"
                        }, 
                        {
                          "href": "{schema}", 
                          "rel": "describedby"
                        }
                      ], 
                      "name": "image", 
                      "properties": {
                        "architecture": {
                          "description": "Operating system architecture as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "checksum": {
                          "description": "md5 hash of image contents. (READ-ONLY)", 
                          "maxLength": 32, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "container_format": {
                          "description": "Format of the container", 
                          "enum": [
                            null, 
                            "ami", 
                            "ari", 
                            "aki", 
                            "bare", 
                            "ovf", 
                            "ova"
                          ], 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "created_at": {
                          "description": "Date and time of image registration (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "direct_url": {
                          "description": "URL to access the image file kept in external store (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "disk_format": {
                          "description": "Format of the disk", 
                          "enum": [
                            null, 
                            "ami", 
                            "ari", 
                            "aki", 
                            "vhd", 
                            "vmdk", 
                            "raw", 
                            "qcow2", 
                            "vdi", 
                            "iso"
                          ], 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "file": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "id": {
                          "description": "An identifier for the image", 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "instance_uuid": {
                          "description": "ID of instance used to create this image.", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "kernel_id": {
                          "description": "ID of image stored in Glance that should be used as the kernel when booting an AMI-style image.", 
                          "is_base": false, 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "locations": {
                          "description": "A set of URLs to access the image file kept in external store", 
                          "items": {
                            "properties": {
                              "metadata": {
                                "type": "object"
                              }, 
                              "url": {
                                "maxLength": 255, 
                                "type": "string"
                              }
                            }, 
                            "required": [
                              "url", 
                              "metadata"
                            ], 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "min_disk": {
                          "description": "Amount of disk space (in GB) required to boot image.", 
                          "type": "integer"
                        }, 
                        "min_ram": {
                          "description": "Amount of ram (in MB) required to boot image.", 
                          "type": "integer"
                        }, 
                        "name": {
                          "description": "Descriptive name for the image", 
                          "maxLength": 255, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "os_distro": {
                          "description": "Common name of operating system distribution as specified in http://docs.openstack.org/trunk/openstack-compute/admin/content/adding-images.html", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "os_version": {
                          "description": "Operating system version as specified by the distributor", 
                          "is_base": false, 
                          "type": "string"
                        }, 
                        "owner": {
                          "description": "Owner of the image", 
                          "maxLength": 255, 
                          "type": [
                            "null", 
                            "string"
                          ]
                        }, 
                        "protected": {
                          "description": "If true, image will not be deletable.", 
                          "type": "boolean"
                        }, 
                        "ramdisk_id": {
                          "description": "ID of image stored in Glance that should be used as the ramdisk when booting an AMI-style image.", 
                          "is_base": false, 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "schema": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "self": {
                          "description": "(READ-ONLY)", 
                          "type": "string"
                        }, 
                        "size": {
                          "description": "Size of image file in bytes (READ-ONLY)", 
                          "type": [
                            "null", 
                            "integer"
                          ]
                        }, 
                        "status": {
                          "description": "Status of the image (READ-ONLY)", 
                          "enum": [
                            "queued", 
                            "saving", 
                            "active", 
                            "killed", 
                            "deleted", 
                            "pending_delete"
                          ], 
                          "type": "string"
                        }, 
                        "tags": {
                          "description": "List of strings related to the image", 
                          "items": {
                            "maxLength": 255, 
                            "type": "string"
                          }, 
                          "type": "array"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last image modification (READ-ONLY)", 
                          "type": "string"
                        }, 
                        "virtual_size": {
                          "description": "Virtual size of image in bytes (READ-ONLY)", 
                          "type": [
                            "null", 
                            "integer"
                          ]
                        }, 
                        "visibility": {
                          "description": "Scope of image accessibility", 
                          "enum": [
                            "public", 
                            "private"
                          ], 
                          "type": "string"
                        }
                      }
                    }, 
                    "type": "array"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a json-schema document that represents an images entity. (Since Images v2.0.)", 
        "tags": [
          "image-schemas"
        ], 
        "title": "Get images schema"
      }
    ], 
    "/v2/schemas/member": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "examples": {}, 
        "id": "getImageMemberSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "name": "member", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of image member creation", 
                    "type": "string"
                  }, 
                  "image_id": {
                    "description": "An identifier for the image", 
                    "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                    "type": "string"
                  }, 
                  "member_id": {
                    "description": "An identifier for the image member (tenantId)", 
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "status": {
                    "description": "The status of this image member", 
                    "enum": [
                      "pending", 
                      "accepted", 
                      "rejected"
                    ], 
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of last modification of image member", 
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a json-schema document that represents an image member entity. (Since Images v2.1.)", 
        "tags": [
          "image-schemas"
        ], 
        "title": "Get image member schema"
      }
    ], 
    "/v2/schemas/members": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "An image members entity is a container of image member entities.\n\nThe following schema is solely an example. Consider only the\nresponse to the API call as authoritative.", 
        "examples": {}, 
        "id": "getImageMembersSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "members", 
                "properties": {
                  "members": {
                    "items": {
                      "name": "member", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of image member creation", 
                          "type": "string"
                        }, 
                        "image_id": {
                          "description": "An identifier for the image", 
                          "pattern": "^([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}$", 
                          "type": "string"
                        }, 
                        "member_id": {
                          "description": "An identifier for the image member (tenantId)", 
                          "type": "string"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "status": {
                          "description": "The status of this image member", 
                          "enum": [
                            "pending", 
                            "accepted", 
                            "rejected"
                          ], 
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of last modification of image member", 
                          "type": "string"
                        }
                      }
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a json-schema document that represents an image members entity. (Since Images v2.1.)", 
        "tags": [
          "image-schemas"
        ], 
        "title": "Get image members schema"
      }
    ], 
    "/v2/schemas/metadefs/namespace": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefNamespaceSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "namespace", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of namespace creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "description": {
                    "description": "Provides a user friendly description of the namespace.", 
                    "maxLength": 500, 
                    "type": "string"
                  }, 
                  "display_name": {
                    "description": "The user friendly name for the namespace. Used by UI if available.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "namespace": {
                    "description": "The unique namespace text.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "objects": {
                    "items": {
                      "properties": {
                        "description": {
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }
                      }, 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "owner": {
                    "description": "Owner of the namespace.", 
                    "maxLength": 255, 
                    "type": "string"
                  }, 
                  "properties": {
                    "$ref": "#/definitions/property"
                  }, 
                  "protected": {
                    "description": "If true, namespace will not be deletable.", 
                    "type": "boolean"
                  }, 
                  "resource_type_associations": {
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string"
                        }, 
                        "prefix": {
                          "type": "string"
                        }, 
                        "properties_target": {
                          "type": "string"
                        }
                      }, 
                      "type": "object"
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "self": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last namespace modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "visibility": {
                    "description": "Scope of namespace accessibility.", 
                    "enum": [
                      "public", 
                      "private"
                    ], 
                    "type": "string"
                  }
                }, 
                "required": [
                  "namespace"
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition namespace entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition namespace schema"
      }
    ], 
    "/v2/schemas/metadefs/namespaces": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "A namespaces entity is a container for namespace entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefNamespacesSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "namespaces", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "namespaces": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "namespace", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of namespace creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "description": {
                          "description": "Provides a user friendly description of the namespace.", 
                          "maxLength": 500, 
                          "type": "string"
                        }, 
                        "display_name": {
                          "description": "The user friendly name for the namespace. Used by UI if available.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "namespace": {
                          "description": "The unique namespace text.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "objects": {
                          "items": {
                            "properties": {
                              "description": {
                                "type": "string"
                              }, 
                              "name": {
                                "type": "string"
                              }, 
                              "properties": {
                                "$ref": "#/definitions/property"
                              }, 
                              "required": {
                                "$ref": "#/definitions/stringArray"
                              }
                            }, 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "owner": {
                          "description": "Owner of the namespace.", 
                          "maxLength": 255, 
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "protected": {
                          "description": "If true, namespace will not be deletable.", 
                          "type": "boolean"
                        }, 
                        "resource_type_associations": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }, 
                              "prefix": {
                                "type": "string"
                              }, 
                              "properties_target": {
                                "type": "string"
                              }
                            }, 
                            "type": "object"
                          }, 
                          "type": "array"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "self": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last namespace modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "visibility": {
                          "description": "Scope of namespace accessibility.", 
                          "enum": [
                            "public", 
                            "private"
                          ], 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "namespace"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition namespaces entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition namespaces schema"
      }
    ], 
    "/v2/schemas/metadefs/object": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefObjectSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "object", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of object creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "description": {
                    "type": "string"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "properties": {
                    "$ref": "#/definitions/property"
                  }, 
                  "required": {
                    "$ref": "#/definitions/stringArray"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "self": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last object modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition object entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition object schema"
      }
    ], 
    "/v2/schemas/metadefs/objects": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "An objects entity is a container for object entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefObjectsSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "property": {
                    "additionalProperties": {
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "title", 
                        "type"
                      ], 
                      "type": "object"
                    }, 
                    "type": "object"
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "objects", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "objects": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "object", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of object creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "description": {
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "properties": {
                          "$ref": "#/definitions/property"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "schema": {
                          "type": "string"
                        }, 
                        "self": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last object modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition objects entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition objects schema"
      }
    ], 
    "/v2/schemas/metadefs/properties": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "A properties entity is a container for property entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefPropertiesSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "minItems": 1, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "properties", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "properties": {
                    "additionalProperties": {
                      "additionalProperties": false, 
                      "name": "property", 
                      "properties": {
                        "additionalItems": {
                          "type": "boolean"
                        }, 
                        "default": {}, 
                        "description": {
                          "type": "string"
                        }, 
                        "enum": {
                          "type": "array"
                        }, 
                        "items": {
                          "properties": {
                            "enum": {
                              "type": "array"
                            }, 
                            "type": {
                              "enum": [
                                "array", 
                                "boolean", 
                                "integer", 
                                "number", 
                                "object", 
                                "string", 
                                null
                              ], 
                              "type": "string"
                            }
                          }, 
                          "type": "object"
                        }, 
                        "maxItems": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maxLength": {
                          "$ref": "#/definitions/positiveInteger"
                        }, 
                        "maximum": {
                          "type": "number"
                        }, 
                        "minItems": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minLength": {
                          "$ref": "#/definitions/positiveIntegerDefault0"
                        }, 
                        "minimum": {
                          "type": "number"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "pattern": {
                          "format": "regex", 
                          "type": "string"
                        }, 
                        "readonly": {
                          "type": "boolean"
                        }, 
                        "required": {
                          "$ref": "#/definitions/stringArray"
                        }, 
                        "title": {
                          "type": "string"
                        }, 
                        "type": {
                          "enum": [
                            "array", 
                            "boolean", 
                            "integer", 
                            "number", 
                            "object", 
                            "string", 
                            null
                          ], 
                          "type": "string"
                        }, 
                        "uniqueItems": {
                          "default": false, 
                          "type": "boolean"
                        }
                      }, 
                      "required": [
                        "type", 
                        "title"
                      ]
                    }, 
                    "type": "object"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition properties entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition properties schema"
      }
    ], 
    "/v2/schemas/metadefs/property": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefPropertySchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "definitions": {
                  "positiveInteger": {
                    "minimum": 0, 
                    "type": "integer"
                  }, 
                  "positiveIntegerDefault0": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/positiveInteger"
                      }, 
                      {
                        "default": 0
                      }
                    ]
                  }, 
                  "stringArray": {
                    "items": {
                      "type": "string"
                    }, 
                    "minItems": 1, 
                    "type": "array", 
                    "uniqueItems": true
                  }
                }, 
                "name": "property", 
                "properties": {
                  "additionalItems": {
                    "type": "boolean"
                  }, 
                  "default": {}, 
                  "description": {
                    "type": "string"
                  }, 
                  "enum": {
                    "type": "array"
                  }, 
                  "items": {
                    "properties": {
                      "enum": {
                        "type": "array"
                      }, 
                      "type": {
                        "enum": [
                          "array", 
                          "boolean", 
                          "integer", 
                          "number", 
                          "object", 
                          "string", 
                          null
                        ], 
                        "type": "string"
                      }
                    }, 
                    "type": "object"
                  }, 
                  "maxItems": {
                    "$ref": "#/definitions/positiveInteger"
                  }, 
                  "maxLength": {
                    "$ref": "#/definitions/positiveInteger"
                  }, 
                  "maximum": {
                    "type": "number"
                  }, 
                  "minItems": {
                    "$ref": "#/definitions/positiveIntegerDefault0"
                  }, 
                  "minLength": {
                    "$ref": "#/definitions/positiveIntegerDefault0"
                  }, 
                  "minimum": {
                    "type": "number"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "pattern": {
                    "format": "regex", 
                    "type": "string"
                  }, 
                  "readonly": {
                    "type": "boolean"
                  }, 
                  "required": {
                    "$ref": "#/definitions/stringArray"
                  }, 
                  "title": {
                    "type": "string"
                  }, 
                  "type": {
                    "enum": [
                      "array", 
                      "boolean", 
                      "integer", 
                      "number", 
                      "object", 
                      "string", 
                      null
                    ], 
                    "type": "string"
                  }, 
                  "uniqueItems": {
                    "default": false, 
                    "type": "boolean"
                  }
                }, 
                "required": [
                  "type", 
                  "title", 
                  "name"
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition property entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition property schema"
      }
    ], 
    "/v2/schemas/metadefs/resource_type": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefResTypeAssocSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "name": "resource_type_association", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of resource type association (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "name": {
                    "description": "Resource type names should be aligned with Heat resource types whenever possible: http://docs.openstack.org/developer/heat/template_guide/openstack.html", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "prefix": {
                    "description": "Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "properties_target": {
                    "description": "Some resource types allow more than one key / value pair per instance.  For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.", 
                    "maxLength": 80, 
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last resource type association modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition namespace resource type association entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition namespace resource type association schema"
      }
    ], 
    "/v2/schemas/metadefs/resource_types": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "A resource type associations entity is a container for resource\ntype association entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefResTypeAssocsSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "resource_type_associations", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "resource_type_associations": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "resource_type_association", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of resource type association (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "name": {
                          "description": "Resource type names should be aligned with Heat resource types whenever possible: http://docs.openstack.org/developer/heat/template_guide/openstack.html", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "prefix": {
                          "description": "Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "properties_target": {
                          "description": "Some resource types allow more than one key / value pair per instance.  For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.", 
                          "maxLength": 80, 
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last resource type association modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }, 
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition namespace resource type associations entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition namespace resource type associations schema"
      }
    ], 
    "/v2/schemas/metadefs/tag": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefTagSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "additionalProperties": false, 
                "name": "tag", 
                "properties": {
                  "created_at": {
                    "description": "Date and time of tag creation (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "updated_at": {
                    "description": "Date and time of the last tag modification (READ-ONLY)", 
                    "format": "date-time", 
                    "type": "string"
                  }
                }, 
                "required": [
                  "name"
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition tag entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition tag schema"
      }
    ], 
    "/v2/schemas/metadefs/tags": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "A tags entity is a container for tag entities.\n\nThe following schema document is an example. The authoritative\nresponse is the actual response to the API call.", 
        "examples": {}, 
        "id": "getMetadefTagsSchema", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "{first}", 
                    "rel": "first"
                  }, 
                  {
                    "href": "{next}", 
                    "rel": "next"
                  }, 
                  {
                    "href": "{schema}", 
                    "rel": "describedby"
                  }
                ], 
                "name": "tags", 
                "properties": {
                  "first": {
                    "type": "string"
                  }, 
                  "next": {
                    "type": "string"
                  }, 
                  "schema": {
                    "type": "string"
                  }, 
                  "tags": {
                    "items": {
                      "additionalProperties": false, 
                      "name": "tag", 
                      "properties": {
                        "created_at": {
                          "description": "Date and time of tag creation (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }, 
                        "name": {
                          "type": "string"
                        }, 
                        "updated_at": {
                          "description": "Date and time of the last tag modification (READ-ONLY)", 
                          "format": "date-time", 
                          "type": "string"
                        }
                      }, 
                      "required": [
                        "name"
                      ]
                    }, 
                    "type": "array"
                  }
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Gets a JSON schema document that represents a metadata definition tags entity. (Since API v2.1.)", 
        "tags": [
          "metadef-schemas"
        ], 
        "title": "Get metadata definition tags schema"
      }
    ], 
    "/v2/tasks": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listTasks-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters by a specified task type. A valid value is ``import`` .", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters by a specified task status. A valid value is ``pending`` ,\n``processing`` , ``success`` , or ``failure`` .", 
            "format": "", 
            "in": "query", 
            "name": "status", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort key. A valid value is an attribute, such as ``name`` , for\nsorting. Default is ``created_at`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_key", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sort direction. A valid value is ``asc`` (ascending) or ``desc``\n(descending). Default is ``desc`` .", 
            "format": "", 
            "in": "query", 
            "name": "sort_dir", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "tasks": [
                  {
                    "id": "cbc36478b0bd8e67e89469c7749d4127", 
                    "status": "pending", 
                    "type": "import"
                  }, 
                  {
                    "id": "bbc36578b0bd8e67e89469c7749d4126", 
                    "status": "processing", 
                    "type": "import"
                  }
                ]
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists tasks.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "title": "List tasks"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "input": {
              "image_properties": {
                "container_format": "ovf", 
                "disk_format": "vhd"
              }, 
              "import_from": "http://example.com", 
              "import_from_format": "qcow2"
            }, 
            "type": "import"
          }
        }, 
        "id": "createTasks-v2", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a task.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "title": "Create tasks"
      }
    ], 
    "/v2/tasks/{task_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showTasks-v2", 
        "method": "get", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/showTasks-v2"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "e7e59ff6-fa2e-4075-87d3-1a1398a07dc3", 
                "status": "pending", 
                "type": "import"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified task.", 
        "tags": [
          "os-tasks-v2"
        ], 
        "title": "Show tasks"
      }
    ]
  }, 
  "schemes": {}, 
  "securityDefinitions": {}, 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "API versions", 
      "name": "versions-images", 
      "summary": ""
    }, 
    {
      "description": "Images", 
      "name": "images", 
      "summary": "Creates, lists, updates, and deletes images.\n\nImage operations show all fields in the response body. Any field\nwith no value is set to ``null`` value (JSON null data type).\n\nThe possible status values for images are:\n\nImage status\n\n+----------------+---------------------------------------------------------------------+\n| Status         | Description                                                         |\n+----------------+---------------------------------------------------------------------+\n| queued         | The Image service reserved an image ID for the image in the         |\n|                | registry but has not uploaded any image data.                       |\n+----------------+---------------------------------------------------------------------+\n| saving         | The Image service is currently uploading the raw data for the       |\n|                | image.                                                              |\n+----------------+---------------------------------------------------------------------+\n| active         | The image is active and fully available in the Image service.       |\n+----------------+---------------------------------------------------------------------+\n| killed         | An error occurred during the upload of image data.                  |\n+----------------+---------------------------------------------------------------------+\n| deleted        | The Image service retains information about the image but the image |\n|                | is no longer available for use.                                     |\n+----------------+---------------------------------------------------------------------+\n| pending_delete | Similar to the ``deleted`` status. An image in this state is not    |\n|                | recoverable.                                                        |\n+----------------+---------------------------------------------------------------------+"
    }, 
    {
      "description": "Image data", 
      "name": "image-data", 
      "summary": "Uploads and downloads raw image data."
    }, 
    {
      "description": "Image tags", 
      "name": "image-tags", 
      "summary": "Adds and deletes image tags."
    }, 
    {
      "description": "Members", 
      "name": "members", 
      "summary": ""
    }, 
    {
      "description": "Image schemas", 
      "name": "image-schemas", 
      "summary": "Gets a JSON-schema document that represents an images or image\nentity."
    }, 
    {
      "description": "Metadata definition resource types", 
      "name": "metadef-resourcetype", 
      "summary": "Lists resource types. Also, creates, lists, and removes resource\ntype associations in a specified namespace. (Since API v2.0.)"
    }, 
    {
      "description": "Metadata definition namespaces", 
      "name": "metadef-namespace", 
      "summary": "Creates, lists, gets details for, updates, and deletes metadata\ndefinition namespaces. Defines namespaces that can contain property\ndefinitions, object definitions, and resource type associations.\n(Since API v2.0.)"
    }, 
    {
      "description": "Metadata definition properties", 
      "name": "metadef-property", 
      "summary": "Creates, lists, gets details for, updates, and deletes metadata\ndefinition properties. (Since API v2.0.)"
    }, 
    {
      "description": "Metadata definition objects", 
      "name": "metadef-object", 
      "summary": "Creates, lists, gets details for, updates, and deletes metadata\ndefinition objects. (Since API v2.0.)"
    }, 
    {
      "description": "Metadata definition tags", 
      "name": "metadef-tag", 
      "summary": "Creates, lists, gets details for, updates, and deletes metadata\ndefinition tags. (Since API v2.0.)"
    }, 
    {
      "description": "Metadata definition schemas", 
      "name": "metadef-schemas", 
      "summary": "Gets a JSON-schema document that represents a metadata definition\nentity."
    }, 
    {
      "description": "Tasks", 
      "name": "os-tasks-v2", 
      "summary": "Creates, lists, and gets details for tasks. (Since API v2.2.)"
    }
  ]
}