{
  "basePath": {}, 
  "definitions": {
    "authenticate": {
      "properties": {
        "auth": {
          "description": "An ``auth`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "With password authentication, ``id`` uniquely identifies the user.\nHowever, ``name`` uniquely identifies the user when used in\nconjunction with a domain ``id`` or ``name`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "identity": {
          "description": "An ``identity`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password`` or ``token`` .\n\nWith password authentication, you can specify user ID and password,\nuser name and password scoped by domain ID or name, or user ID and\npassword scoped by project ID or name with or without domain scope.\n\nWith token authentication, you specify the token ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "password": {
          "description": "The password.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "scope": {
          "description": "Token can be scoped for a domain or project. Specify either an\n``id`` or ``name`` to uniquely identify the domain or project. Use\nproject ``name`` only in conjunction with a domain ``id`` or\n``name`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "token": {
          "description": "A ``token`` object. With token authentication, the ``id`` uniquely\nidentifies the token. This method is typically used in combination\nwith a request to change authorization scope.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object. Specify ``id`` or ``name`` to uniquely identify\nthe user and ``password`` . Use ``name`` only in conjunction with a\ndomain ``id`` or ``name`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createDomain": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables a domain.\n\nSet to ``true`` to enable the domain or ``false`` to disable the\ndomain.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createDomain_201": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If ``true`` , the domain is enabled. If ``false`` , the domain is\ndisabled.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createEndpoint": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which is ``admin`` , ``public`` , or\n``internal`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The service region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "The service URL.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createEndpoint_201": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which is ``admin`` , ``public`` , or\n``internal`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The service region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "The service URL.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createGroup": {
      "properties": {
        "description": {
          "description": "The group description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the group.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The group name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createPolicy": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob. From the\nperspective of the Identity API, a policy blob can be based on any\ntechnology. In OpenStack, the ``policy.json`` blob (\n``type=\"application/json\"`` ) is the conventional solution.\nHowever, you might want to use an alternative policy engine that\nuses a different policy language type. For example,\n``type=\"application/xacml+xml\"`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createPolicy_201": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createProject": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables a project.\n\nSet to ``true`` to enable the project or ``false`` to disable the\nproject. Default is ``true`` .", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "name": {
          "description": "The project name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_id": {
          "description": "The ID of the parent project.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createProject_201": {
      "properties": {
        "description": {
          "description": "The project description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If set to ``true`` , project is enabled. If set to ``false`` ,\nproject is disabled.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The project links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The project name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_id": {
          "description": "The ID of the parent project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createRegion": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "If the region is hierarchically a child of another region, set this\nparameter to the ID of the parent region.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createRegionWithID": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "If the region is hierarchically a child of another region, set this\nparameter to the ID of the parent region.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createRegionWithID_201": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "The ID for the parent region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createRegion_201": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "The ID for the parent region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createRole": {
      "properties": {
        "name": {
          "description": "The role name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createService": {
      "properties": {
        "enabled": {
          "description": "Enables or disables a service. If ``true`` , the service is\nenabled. If ``false`` , the service is disabled. Default is\n``true`` .", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createService_201": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The service links.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "services": {
          "description": "A ``services`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createUser": {
      "properties": {
        "default_project_id": {
          "description": "The default tenant for the new user.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the new user.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the new user.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables the new user. To enable the user, set to\n``true`` . To disable the user, set to ``false`` . Default is\n``true`` .", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "password": {
          "description": "The user password. Required for some authentication back ends.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createUser_201": {
      "properties": {
        "default_project_id": {
          "description": "The default tenant for the new user.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "The user description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The ID of the domain for the new user.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "email": {
          "description": "The email address for the new user.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If the user is enabled, this value is ``true`` . If the user is\ndisabled, this value is ``false`` .", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the new user.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the new user.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "password": {
          "description": "The user password. Required for some authentication back ends.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getDomain_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domains": {
          "description": "A ``domains`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If ``true`` , the domain is enabled. If ``false`` , the domain is\ndisabled.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The domain ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getGroup_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The domain ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getPolicy_200": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getRegion_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "The ID for the parent region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "getService_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If ``true`` , the service is enabled. If ``false`` , the service is\ndisabled.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The service links.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "service": {
          "description": "A ``service`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listCredentials_200": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listDomains_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If ``true`` , the domain is enabled. If ``false`` , the domain is\ndisabled.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listEndpoints_200": {
      "properties": {
        "enabled": {
          "description": "If ``true`` , the endpoint is enabled. If ``false`` , the endpoint\nis disabled.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "endpoints": {
          "description": "An ``endpoints`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The endpoint ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which is ``admin`` , ``public`` , or\n``internal`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The endpoint links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "region": {
          "description": "The service region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region_id": {
          "description": "The service region ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "The service URL.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listGroups_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "domain_id": {
          "description": "The domain ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listPolicies_200": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listRegions_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the regions resource.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "The ID for the parent region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "regions": {
          "description": "The ``regions`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listServices_200": {
      "properties": {
        "description": {
          "description": "The description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "If ``true`` , the service is enabled. If ``false`` , the service is\ndisabled.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The service links.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The service name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "services": {
          "description": "A ``services`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showVersionDetails-identity-v3_200": {
      "properties": {
        "id": {
          "description": "The version ID, such as ``v3.0`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The version links.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "media-types": {
          "description": "A ``media-types`` object, which shows the supported media types.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the version. For example, ``experimental`` or\n``stable`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "updated_at": {
          "description": "The date and time when the server or image was updated.\n\nThe date and time stamp format is ISO 8601 :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\nFor example, ``2015-08-27T09:49:58-05:00`` .\n\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nIf the updated-at date and time stamp is not set, its value is\n``null`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "version": {
          "description": "A ``version`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateDomain": {
      "properties": {
        "description": {
          "description": "The domain description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "enabled": {
          "description": "Enables or disables a domain.\n\nSet to ``true`` to enable the domain or ``false`` to disable the\ndomain.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "name": {
          "description": "The domain name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateEndpoint": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which is ``admin`` , ``public`` , or\n``internal`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The service region.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "url": {
          "description": "The service URL.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateEndpoint_200": {
      "properties": {
        "endpoint": {
          "description": "An ``endpoint`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interface": {
          "description": "The interface type, which is ``admin`` , ``public`` , or\n``internal`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The service region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "service_id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url": {
          "description": "The service URL.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updatePolicy_200": {
      "properties": {
        "blob": {
          "description": "The policy rule set itself, as a serialized blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The credential ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "Policy links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "project_id": {
          "description": "The UUID for the project.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The MIME media type of the serialized policy blob.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user_id": {
          "description": "The ID of the user who owns the credential.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateRegion": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "If the region is hierarchically a child of another region, set this\nparameter to the ID of the parent region.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateRegion_200": {
      "properties": {
        "description": {
          "description": "The region description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The ID for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The links for the region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "parent_region_id": {
          "description": "The ID for the parent region.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "region": {
          "description": "The ``region`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateService": {
      "properties": {
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateService_200": {
      "properties": {
        "id": {
          "description": "The service ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "services": {
          "description": "A ``services`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "The service type.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "validateTokens_200": {
      "properties": {
        "domain": {
          "description": "Specify either ``id`` or ``name`` to uniquely identify the domain.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "expires_at": {
          "description": "The date and time when the token expires.\n\nThe date and time stamp format is ISO 8601 :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nFor example, ``2015-08-27T09:49:58-05:00`` .\n\nA ``null`` value indicates that the token never expires.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The user ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "issued_at": {
          "description": "The date and time when the token was issued.\n\nThe date and time stamp format is ISO 8601 :\n\n::\n\n   CCYY-MM-DDThh:mm:ss\u00b1hh:mm\nThe ``\u00b1hh:mm`` value, if included, is the time zone as an offset\nfrom UTC.\n\nFor example, ``2015-08-27T09:49:58-05:00`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "links": {
          "description": "The user links.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "methods": {
          "description": "The authentication method, which is ``password`` or ``token`` .\n\nWith password authentication, you can specify user ID and password,\nuser name and password scoped by domain ID or name, or user ID and\npassword scoped by project ID or name with or without domain scope.\n\nWith token authentication, you specify the token ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The user name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "token": {
          "description": "A ``token`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "user": {
          "description": "A ``user`` object. Specify ``id`` or ``name`` to uniquely identify\nthe user and ``password`` . Use ``name`` only in conjunction with a\ndomain ``id`` or ``name`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }
  }, 
  "externalDocs": {}, 
  "host": {}, 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "service": "identity", 
    "title": "Identity", 
    "version": "v3"
  }, 
  "paths": {
    "/": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getVersions-identity-v3", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "versions": {
                  "values": [
                    {
                      "id": "v3.4", 
                      "links": [
                        {
                          "href": "http://localhost:35357/v3/", 
                          "rel": "self"
                        }
                      ], 
                      "media-types": [
                        {
                          "base": "application/json", 
                          "type": "application/vnd.openstack.identity-v3+json"
                        }
                      ], 
                      "status": "stable", 
                      "updated": "2015-03-30T00:00:00Z"
                    }, 
                    {
                      "id": "v2.0", 
                      "links": [
                        {
                          "href": "http://localhost:35357/v2.0/", 
                          "rel": "self"
                        }, 
                        {
                          "href": "http://docs.openstack.org/", 
                          "rel": "describedby", 
                          "type": "text/html"
                        }
                      ], 
                      "media-types": [
                        {
                          "base": "application/json", 
                          "type": "application/vnd.openstack.identity-v2.0+json"
                        }
                      ], 
                      "status": "stable", 
                      "updated": "2014-04-17T00:00:00Z"
                    }
                  ]
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists information about all Identity API versions.", 
        "tags": [
          "versions-identity"
        ], 
        "title": "List versions"
      }
    ], 
    "/v3": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Shows details for the Identity API v3.", 
        "examples": {}, 
        "id": "showVersionDetails-identity-v3", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "version": {
                  "id": "v3.4", 
                  "links": [
                    {
                      "href": "http://localhost:35357/v3/", 
                      "rel": "self"
                    }
                  ], 
                  "media-types": [
                    {
                      "base": "application/json", 
                      "type": "application/vnd.openstack.identity-v3+json"
                    }
                  ], 
                  "status": "stable", 
                  "updated": "2015-03-30T00:00:00Z"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "tags": [
          "versions-identity"
        ], 
        "title": "Show API version details"
      }
    ], 
    "/v3/OS-PKI/revoked": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "Headers:\nX-Auth-Token: d3f677afe73e4027aedbb4f559cfe8e8\n"
        }, 
        "id": "listRevokedTokens", 
        "method": "get", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The token ID.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "signed": "-----BEGIN CMS-----\nMIICGwYJKoZIhvcNAQcCoIICDDCCAggCAQExDTALBglghkgBZQMEAgEwawYJKoZI\nhvcNAQcBoF4EXHsicmV2b2tlZCI6IFt7ImV4cGlyZXMiOiAiMjAxNC0xMi0wMlQx\nNzowMDowOVoiLCAiaWQiOiAiODhiMjRmOTI5OTk0NGU1ZjhkODE0MDNjYzMyY2M5\nMmUifV19MYIBhTCCAYECAQEwXDBXMQswCQYDVQQGEwJVUzEOMAwGA1UECAwFVW5z\nZXQxDjAMBgNVBAcMBVVuc2V0MQ4wDAYDVQQKDAVVbnNldDEYMBYGA1UEAwwPd3d3\nLmV4YW1wbGUuY29tAgEBMAsGCWCGSAFlAwQCATANBgkqhkiG9w0BAQEFAASCAQA3\nc8EI58ZXtqkyuUWqLPJZdB5v7Ou978w22YkOsgL5ruUpQiWdhdgvL/sxqd7OPqi7\nZZV3N+io+z1m4uAiSbriumv7HOEnIUEAUhK4G0kw5kAAg4j50c0Omdiqdq75k0j/\nJPoRCXa8ieb0X87zhgfIq7ze/HZ7E2LoO20us3AEzmglNv023qgGcsSGPAUIHWN5\nloonPtgztiwVbmS2gs3Z9JB73mxEBviCX4CZEU/sNpchAzI/53tscKlqlzv+GBcm\n1dYP3hEZn3twFRI9zos4hTwFkUivn6D3qgQB684sVrvKlzOCIqOKVGGYVSy/FQLE\nWwQ5u58ZD8ohaJPu2Q6l\n-----END CMS-----\n"
              }
            }, 
            "headers": {
              "X-Auth-Token": {
                "description": "A valid authentication token for an administrative user.", 
                "format": "", 
                "required": true, 
                "type": "string"
              }, 
              "X-Subject-Token": {
                "description": "The token ID.", 
                "format": "", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists revoked PKI tokens.", 
        "tags": [
          "versions-identity"
        ], 
        "title": "List revoked tokens"
      }
    ], 
    "/v3/auth/tokens": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Each REST request against the Identity Service requires the ``X\n-Auth-Token`` header. Clients obtain this token and the URL\nendpoints for other service APIs by supplying their valid\ncredentials to the authentication service.\n\nA REST interface provides client authentication by using the POST\nmethod with ``auth/tokens`` the path. The body of the request must\ninclude a payload of credentials including the authentication\nmethod and, optionally, the authorization scope. The scope includes\neither a project or domain. If you include both project and domain,\nthis call returns the HTTP ``Bad Request (400)`` status code\nbecause a token cannot be simultaneously scoped as both a project\nand domain.\n\nIf you do not include the optional scope and the authenticating\nuser has a defined default project (the ``default_project_id``\nattribute for the user), that default project is treated as the\npreferred authorization scope.\n\nIf no default project is defined, the token is issued without an\nexplicit scope of authorization.\n\nProvide one of the following sets of credentials to authenticate:\nUser ID and password, user name and password scoped by domain ID or\nname, user ID and password scoped by project ID or name with or\nwithout domain scope, or token.\n\nThe following examples demonstrate authentication requests with\ndifferent types of credentials.\n\nIf ``scope`` is included, ``project id`` uniquely identifies the\n``project`` . However, ``project name`` uniquely identifies the\n``project`` only when used in conjunction with a ``domain ID`` or a\n``domain name`` .\n\nIf the authentication token has expired, this call returns the HTTP\n``401`` status code.\n\nIf the subject token has expired, this call returns the HTTP\n``404`` status code.\n\nThe Identity API treats expired tokens as no longer valid tokens.\n\nThe deployment determines how long expired tokens are stored.\n\nAs the following example responses show, the response to an\nauthentication request returns the token ID in the ``X-Subject-\nToken`` header instead of in the token data.\n\nIf the call has no explicit authorization scope, the response does\nnot contain the ``catalog`` , ``project`` , ``domain`` , or\n``roles`` fields. However, the response still uniquely identifies\nthe user.\n\nA token scoped to a ``project`` also has both a service ``catalog``\nand the user's roles applicable to the ``project`` .\n\nA token scoped to a ``domain`` also has both a service ``catalog``\nand the user's roles applicable to the ``project`` .\n\nOptionally, the Identity API implementation might return an\n``authentication`` attribute to indicate the supported\nauthentication methods.\n\nFor authentication processes that require multiple round trips, The\nIdentity API implementation might return an HTTP ``Unauthorized\n(401)`` status code with additional information for the next\nauthentication step.\n\nThe following examples illustrate several possible HTTP\n``Unauthorized (401)`` authentication errors. Other errors, like\nHTTP ``Forbidden (403)`` , are also possible.", 
        "examples": {
          "application/json": {
            "auth": {
              "identity": {
                "methods": [
                  "password"
                ], 
                "password": {
                  "user": {
                    "id": "0ca8f6", 
                    "password": "secretsecret"
                  }
                }
              }, 
              "scope": {
                "project": {
                  "domain": {
                    "name": "example.com"
                  }, 
                  "name": "project-x"
                }
              }
            }
          }
        }, 
        "id": "authenticate", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/authenticate"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "token": {
                  "catalog": [
                    {
                      "endpoints": [
                        {
                          "id": "example-a", 
                          "interface": "public", 
                          "links": {
                            "self": "https://region-a.example.com:35357/v3/endpoints/130_P"
                          }, 
                          "region_id": "region-a.geo-1", 
                          "service_id": "100", 
                          "url": "https://region-a.example.com:35357/v2.0/"
                        }, 
                        {
                          "id": "example-a", 
                          "interface": "public", 
                          "links": {
                            "self": "https://region-a.example.com:35357/v3/endpoints/example-a"
                          }, 
                          "region_id": "region-a.geo-1", 
                          "service_id": "100", 
                          "url": "https://region-a.example.com:35357/v3/"
                        }
                      ], 
                      "id": "100", 
                      "type": "identity"
                    }
                  ], 
                  "domain": {
                    "id": "1789d1", 
                    "links": {
                      "self": "http://identity:35357/v3/domains/1789d1"
                    }, 
                    "name": "example.com"
                  }, 
                  "expires_at": "2013-02-27T18:30:59.999999Z", 
                  "issued_at": "2013-02-27T16:30:59.999999Z", 
                  "methods": [
                    "password"
                  ], 
                  "roles": [
                    {
                      "id": "76e72a", 
                      "links": {
                        "self": "http://identity:35357/v3/roles/76e72a"
                      }, 
                      "name": "admin"
                    }, 
                    {
                      "id": "f4f392", 
                      "links": {
                        "self": "http://identity:35357/v3/roles/f4f392"
                      }, 
                      "name": "member"
                    }
                  ], 
                  "user": {
                    "domain": {
                      "id": "1789d1", 
                      "links": {
                        "self": "http://identity:35357/v3/domains/1789d1"
                      }, 
                      "name": "example.com"
                    }, 
                    "id": "0ca8f6", 
                    "links": {
                      "self": "http://identity:35357/v3/users/0ca8f6"
                    }, 
                    "name": "Joe"
                  }
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {
              "application/json": {
                "error": {
                  "code": 401, 
                  "identity": {
                    "challenge-response": {
                      "challenge": "What was the zip code of your birthplace?", 
                      "session_id": "123456"
                    }, 
                    "methods": [
                      "challenge-response"
                    ]
                  }, 
                  "message": "Additional authentications steps required.", 
                  "title": "Not Authorized"
                }
              }
            }, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Authenticates and generates a token.", 
        "tags": [
          "tokens"
        ], 
        "title": "Authenticate"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Pass your own token in the ``X-Auth-Token`` header. Pass the token\nto be validated in the ``X-Subject-Token`` header. The Identity API\nreturns the same response as when the subject token was issued by\n``POST /auth/tokens`` .", 
        "examples": {
          "text/plain": "Headers:\nX-Auth-Token: 1dd7e3\nX-Subject-Token: c67580\n"
        }, 
        "id": "validateTokens", 
        "method": "get", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The token ID.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "token": {
                  "expires_at": "2013-02-27T18:30:59.999999Z", 
                  "issued_at": "2013-02-27T16:30:59.999999Z", 
                  "methods": [
                    "password"
                  ], 
                  "user": {
                    "domain": {
                      "id": "1789d1", 
                      "links": {
                        "self": "http://identity:35357/v3/domains/1789d1"
                      }, 
                      "name": "example.com"
                    }, 
                    "id": "0ca8f6", 
                    "links": {
                      "self": "http://identity:35357/v3/users/0ca8f6"
                    }, 
                    "name": "Joe"
                  }
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates a specified token.", 
        "tags": [
          "tokens"
        ], 
        "title": "Validate token"
      }, 
      {
        "consumes": [], 
        "description": "This call is similar to ``GET /auth/tokens`` but no response body\nis provided even in the ``X-Subject-Token`` header.\n\nThe Identity API returns the same response as when the subject\ntoken was issued by ``POST /auth/tokens`` even if an error occurs\nbecause the token is not valid. An HTTP ``204`` status code\nindicates that the ``X-Subject-Token`` is valid.", 
        "examples": {
          "text/plain": "Headers:\nX-Auth-Token: 1dd7e3\nX-Subject-Token: c67580\n"
        }, 
        "id": "checkTokens", 
        "method": "head", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The token ID.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates a specified token.", 
        "tags": [
          "tokens"
        ], 
        "title": "Check token"
      }, 
      {
        "consumes": [], 
        "description": "This call is similar to ``HEAD /auth/tokens`` except that the ``X\n-Subject-Token`` token is immediately not valid, regardless of the\n``expires_at`` attribute value. An additional ``X -Auth-Token`` is\nnot required.", 
        "examples": {
          "text/plain": "Headers:\nX-Auth-Token: 1dd7e3\nX-Subject-Token: c67580\n"
        }, 
        "id": "revokeTokens", 
        "method": "delete", 
        "parameters": [
          {
            "description": "A valid authentication token for an administrative user.", 
            "format": "", 
            "in": "header", 
            "name": "X-Auth-Token", 
            "required": true, 
            "type": "string"
          }, 
          {
            "description": "The token ID.", 
            "format": "", 
            "in": "header", 
            "name": "X-Subject-Token", 
            "required": true, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Revokes a specified token.", 
        "tags": [
          "tokens"
        ], 
        "title": "Revoke token"
      }
    ], 
    "/v3/credentials": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listCredentials", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on user_id.", 
            "format": "", 
            "in": "query", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                  "id": "414243", 
                  "links": {
                    "self": "http://identity:35357/v3/credentials/414243"
                  }, 
                  "project_id": "456789", 
                  "type": "ec2", 
                  "user_id": "616263"
                }, 
                {
                  "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                  "id": "414243", 
                  "links": {
                    "self": "http://identity:35357/v3/credentials/414243"
                  }, 
                  "project_id": "456789", 
                  "type": "ec2", 
                  "user_id": "616263"
                }
              ]
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists credentials.", 
        "tags": [
          "credentials"
        ], 
        "title": "List credentials"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The following example shows how to create an EC2-style credential.\nThe credential blob is a string that contains a JSON-serialized\ndictionary with the ``access`` and ``secret`` keys. This format is\nrequired when you specify the ``ec2`` type. To specify other\ncredentials such as ``access_key`` , change the type and contents\nof the data blob.", 
        "examples": {
          "application/json": {
            "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
            "project_id": "456789", 
            "type": "ec2", 
            "user_id": "616263"
          }
        }, 
        "id": "createCredential", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                "id": "414243", 
                "links": {
                  "self": "http://identity:35357/v3/credentials/414243"
                }, 
                "project_id": "456789", 
                "type": "ec2", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a credential.", 
        "tags": [
          "credentials"
        ], 
        "title": "Create credential"
      }
    ], 
    "/v3/credentials/{credential_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getCredential", 
        "method": "get", 
        "parameters": [
          {
            "description": "The credential ID.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                "id": "414243", 
                "links": {
                  "self": "http://identity:35357/v3/credentials/414243"
                }, 
                "project_id": "456789", 
                "type": "ec2", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified credential.", 
        "tags": [
          "credentials"
        ], 
        "title": "Show credential details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
            "project_id": "456789", 
            "type": "ec2", 
            "user_id": "616263"
          }
        }, 
        "id": "updateCredential", 
        "method": "patch", 
        "parameters": [
          {
            "description": "The credential ID.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "blob": "{\"access\":\"181920\",\"secret\":\"secretKey\"}", 
                "id": "414243", 
                "links": {
                  "self": "http://identity:35357/v3/credentials/414243"
                }, 
                "project_id": "456789", 
                "type": "ec2", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified credential.", 
        "tags": [
          "credentials"
        ], 
        "title": "Update credential"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteCredential", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The credential ID.", 
            "format": "", 
            "in": "path", 
            "name": "credential_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified credential.", 
        "tags": [
          "credentials"
        ], 
        "title": "Delete credential"
      }
    ], 
    "/v3/domains": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listDomains", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on a name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on enabled or disabled roles. Values are ``true`` or\n``false`` .", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "domains": [
                  {
                    "description": "Domain description", 
                    "enabled": true, 
                    "id": "161718", 
                    "links": {
                      "self": "http://identity:35357/v3/domains/161718"
                    }, 
                    "name": "myDomain"
                  }, 
                  {
                    "description": "Another domain", 
                    "enabled": true, 
                    "id": "864369", 
                    "links": {
                      "self": "http://identity:35357/v3/domains/864369"
                    }, 
                    "name": "anotherDomain"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists domains.", 
        "tags": [
          "domains"
        ], 
        "title": "List domains"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "domain": {
              "description": "Domain description", 
              "enabled": true, 
              "name": "myDomain"
            }
          }
        }, 
        "id": "createDomain", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createDomain"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "domain": {
                  "description": "Domain description", 
                  "enabled": true, 
                  "id": "161718", 
                  "links": {
                    "self": "http://identity:35357/v3/domains/161718"
                  }, 
                  "name": "myDomain"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Create domain"
      }
    ], 
    "/v3/domains/{domain_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getDomain", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "domain": {
                  "description": "Domain description", 
                  "enabled": true, 
                  "id": "161718", 
                  "links": {
                    "self": "http://identity:35357/v3/domains/161718"
                  }, 
                  "name": "myDomain"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Show domain details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "domain": {
              "description": "my updated domain", 
              "enabled": true, 
              "name": "myUpdatedDomain"
            }
          }
        }, 
        "id": "updateDomain", 
        "method": "patch", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateDomain"
            }
          }, 
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "domain": {
                  "description": "my updated domain", 
                  "enabled": true, 
                  "id": "161718", 
                  "links": {
                    "self": "http://identity:35357/v3/domains/161718"
                  }, 
                  "name": "myUpdatedDomain"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Update domain"
      }, 
      {
        "consumes": [], 
        "description": "To minimize the risk of accidentally deleting a domain, you must\nfirst disable the domain by using the update domain method. If you\ntry to delete an enabled domain, this call returns an HTTP\n``Forbidden (403)`` status code.\n\nWhen you delete a domain, this call also deletes all entities owned\nby it, such as users, groups, and projects, and any credentials and\ngranted roles that relate to those entities.", 
        "examples": {}, 
        "id": "deleteDomain", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Delete domain"
      }
    ], 
    "/v3/domains/{domain_id}/groups/{group_id}/roles": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listDomainGroupRoles", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/domains/161718/groups/101112/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists roles for a specified domain group.", 
        "tags": [
          "domains"
        ], 
        "title": "List roles for domain group"
      }
    ], 
    "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "grantDomainGroupRole", 
        "method": "put", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Grants a specified role to a specified domain group.", 
        "tags": [
          "domains"
        ], 
        "title": "Grant role to domain group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "checkDomainGroupRole", 
        "method": "head", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates that a specified group has a specified role on a domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Check role for domain group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "revokeDomainGroupRole", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Revokes a role from a group on a domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Revoke role from domain group"
      }
    ], 
    "/v3/domains/{domain_id}/users/{user_id}/roles": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listDomainUserRoles", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/domains/161718/users/313233/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists roles for a user on a domain.", 
        "tags": [
          "domains"
        ], 
        "title": "List roles for domain user"
      }
    ], 
    "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "grantDomainUserRole", 
        "method": "put", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Grants a role to a specified domain user.", 
        "tags": [
          "domains"
        ], 
        "title": "Grant role to domain user"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "checkDomainUserRole", 
        "method": "head", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates that a specified user has a specified role on a domain.", 
        "tags": [
          "domains"
        ], 
        "title": "Check role for domain user"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "revokeDomainUserRole", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "path", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Revokes a role from a specified domain user.", 
        "tags": [
          "domains"
        ], 
        "title": "Revoke role from domain user"
      }
    ], 
    "/v3/endpoints": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listEndpoints", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters by interface.", 
            "format": "", 
            "in": "query", 
            "name": "interface", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters by service_id.", 
            "format": "", 
            "in": "query", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "endpoints": [
                  {
                    "id": "828384", 
                    "interface": "public", 
                    "links": {
                      "self": "http://identity:35357/v3/endpoints/828384"
                    }, 
                    "name": "the public volume endpoint", 
                    "service_id": "686766"
                  }, 
                  {
                    "id": "642136", 
                    "interface": "internal", 
                    "links": {
                      "self": "http://identity:35357/v3/endpoints/642136"
                    }, 
                    "name": "the internal volume endpoint", 
                    "service_id": "686766"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists available endpoints.", 
        "tags": [
          "endpoints"
        ], 
        "title": "List endpoints"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "endpoint": {
              "interface": "public", 
              "name": "name", 
              "region": "north", 
              "service_id": "686766", 
              "url": "http://identity:35357/v3/endpoints/828384"
            }
          }
        }, 
        "id": "createEndpoint", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createEndpoint"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "endpoint": {
                  "id": "828384", 
                  "interface": "internal", 
                  "links": {
                    "self": "http://identity:35357/v3/endpoints/828384"
                  }, 
                  "name": "the internal volume endpoint", 
                  "region": "north", 
                  "service_id": "686766", 
                  "url": "http://identity:35357/v3/endpoints/828384"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an endpoint.", 
        "tags": [
          "endpoints"
        ], 
        "title": "Create endpoint"
      }
    ], 
    "/v3/endpoints/{endpoint_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "endpoint": {
              "interface": "public", 
              "name": "Name", 
              "region": "north", 
              "service_id": "345678", 
              "url": "http://identity:35357/v3/endpoints/828384"
            }
          }
        }, 
        "id": "updateEndpoint", 
        "method": "patch", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateEndpoint"
            }
          }, 
          {
            "description": "The endpoint ID.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "endpoint": {
                  "id": "828384", 
                  "interface": "internal", 
                  "links": {
                    "self": "http://identity:35357/v3/endpoints/828384"
                  }, 
                  "name": "the internal volume endpoint", 
                  "region": "north", 
                  "service_id": "686766", 
                  "url": "http://identity:35357/v3/endpoints/828384"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified endpoint.", 
        "tags": [
          "endpoints"
        ], 
        "title": "Update endpoint"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteEndpoint", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The endpoint ID.", 
            "format": "", 
            "in": "path", 
            "name": "endpoint_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified endpoint.", 
        "tags": [
          "endpoints"
        ], 
        "title": "Delete endpoint"
      }
    ], 
    "/v3/groups": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listGroups", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "groups": [
                  {
                    "description": "Developers cleared for work on all general projects", 
                    "domain_id": "161718", 
                    "id": "101112", 
                    "links": {
                      "self": "http://identity:35357/v3/groups/101112"
                    }, 
                    "name": "Developers"
                  }, 
                  {
                    "description": "Developers cleared for work on secret projects", 
                    "domain_id": "161718", 
                    "id": "101113", 
                    "links": {
                      "self": "http://identity:35357/v3/groups/101113"
                    }, 
                    "name": "Secure Developers"
                  }, 
                  {
                    "description": "Testers cleared for work on all general projects", 
                    "domain_id": "161718", 
                    "id": "101114", 
                    "links": {
                      "self": "http://identity:35357/v3/groups/101114"
                    }, 
                    "name": "Testers"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/groups"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists groups.", 
        "tags": [
          "groups"
        ], 
        "title": "List groups"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "group": {
              "description": "Developers cleared for work on secret projects", 
              "domain_id": "161718", 
              "name": "Secure Developers"
            }
          }
        }, 
        "id": "createGroup", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createGroup"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "group": {
                  "description": "Developers cleared for work on secret projects", 
                  "domain_id": "161718", 
                  "id": "101112", 
                  "links": {
                    "self": "http://identity:35357/v3/groups/101112"
                  }, 
                  "name": "Secure Developers"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a group.", 
        "tags": [
          "groups"
        ], 
        "title": "Create group"
      }
    ], 
    "/v3/groups/{group_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getGroup", 
        "method": "get", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "group": {
                  "description": "Developers cleared for work on secret projects", 
                  "domain_id": "161718", 
                  "id": "101112", 
                  "links": {
                    "self": "http://identity:35357/v3/groups/101112"
                  }, 
                  "name": "Secure Developers"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Show group details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If the back-end driver does not allow this functionality, this\noperation might return the HTTP ``Not Implemented (501)`` status\ncode.", 
        "examples": {
          "application/json": {
            "group": {
              "description": "my updated group", 
              "name": "myUpdatedGroup"
            }
          }
        }, 
        "id": "updateGroup", 
        "method": "patch", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "group": {
                  "description": "my updated group", 
                  "domain_id": "161718", 
                  "id": "101112", 
                  "links": {
                    "self": "http://identity:35357/v3/groups/101112"
                  }, 
                  "name": "myUpdatedGroup"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Update group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteGroup", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Delete group"
      }
    ], 
    "/v3/groups/{group_id}/users": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listGroupUsers", 
        "method": "get", 
        "parameters": [
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "query", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on a description.", 
            "format": "", 
            "in": "query", 
            "name": "description", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on a name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on enabled or disabled roles. Values are ``true`` or\n``false`` .", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/groups/101112/users"
                }, 
                "users": [
                  {
                    "default_project_id": "414345", 
                    "description": "a user", 
                    "domain_id": "161718", 
                    "email": "user@example.com", 
                    "enabled": true, 
                    "id": "313233", 
                    "links": {
                      "self": "http://identity:35357/v3/users/313233"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "default_project_id": "414345", 
                    "description": "another user", 
                    "domain_id": "161718", 
                    "email": "user@example.com", 
                    "enabled": true, 
                    "id": "313233", 
                    "links": {
                      "self": "http://identity:35357/v3/users/313233"
                    }, 
                    "name": "someone"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists the users in a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "List users in group"
      }
    ], 
    "/v3/groups/{group_id}/users/{user_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "assignUserToGroup", 
        "method": "put", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Assigns a specified user to a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Assign user to group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteGroupUser", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified user from a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Remove user from group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "checkGroupUser", 
        "method": "head", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates that a specified user is in a specified group.", 
        "tags": [
          "groups"
        ], 
        "title": "Check user membership in group"
      }
    ], 
    "/v3/policies": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listPolicies", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters by service type. Service types include compute, ec2, image,\nand identity.", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "blob": {
                    "foobar_user": [
                      "role:compute-user"
                    ]
                  }, 
                  "id": "717273", 
                  "links": {
                    "self": "http://identity:35357/v3/policies/717273"
                  }, 
                  "project_id": "456789", 
                  "type": "application/json", 
                  "user_id": "616263"
                }, 
                {
                  "blob": {
                    "foobar_user": [
                      "role:compute-user"
                    ]
                  }, 
                  "id": "717274", 
                  "links": {
                    "self": "http://identity:35357/v3/policies/717274"
                  }, 
                  "project_id": "456789", 
                  "type": "application/json", 
                  "user_id": "616263"
                }
              ]
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists policies.", 
        "tags": [
          "policies"
        ], 
        "title": "List policies"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "blob": {
              "default": false
            }, 
            "project_id": "456789", 
            "type": "application/json", 
            "user_id": "616263"
          }
        }, 
        "id": "createPolicy", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "blob": {
                  "foobar_user": [
                    "role:compute-user"
                  ]
                }, 
                "id": "717273", 
                "links": {
                  "self": "http://identity:35357/v3/policies/717273"
                }, 
                "project_id": "456789", 
                "type": "application/json", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a policy.", 
        "tags": [
          "policies"
        ], 
        "title": "Create policy"
      }
    ], 
    "/v3/policies/{policy_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getPolicy", 
        "method": "get", 
        "parameters": [
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "blob": {
                  "foobar_user": [
                    "role:compute-user"
                  ]
                }, 
                "id": "717273", 
                "links": {
                  "self": "http://identity:35357/v3/policies/717273"
                }, 
                "project_id": "456789", 
                "type": "application/json", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified policy.", 
        "tags": [
          "policies"
        ], 
        "title": "Show policy details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "blob": {
              "foobar_user": [
                "role:compute-user"
              ]
            }, 
            "project_id": "456789", 
            "type": "application/json", 
            "user_id": "616263"
          }
        }, 
        "id": "updatePolicy", 
        "method": "patch", 
        "parameters": [
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "blob": {
                  "foobar_user": [
                    "role:compute-user"
                  ]
                }, 
                "id": "717273", 
                "links": {
                  "self": "http://identity:35357/v3/policies/717273"
                }, 
                "project_id": "456789", 
                "type": "application/json", 
                "user_id": "616263"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified policy.", 
        "tags": [
          "policies"
        ], 
        "title": "Update policy"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deletePolicy", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The policy ID.", 
            "format": "", 
            "in": "path", 
            "name": "policy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified policy.", 
        "tags": [
          "policies"
        ], 
        "title": "Delete policy"
      }
    ], 
    "/v3/projects": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listProjects", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "query", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on parent_id.", 
            "format": "", 
            "in": "query", 
            "name": "parent_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on a name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on enabled or disabled roles. Values are ``true`` or\n``false`` .", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "https://identity:35357/v3/users/9fe1d3/projects"
                }, 
                "projects": [
                  {
                    "domain_id": "1789d1", 
                    "enabled": true, 
                    "id": "263fd9", 
                    "links": {
                      "self": "https://identity:35357/v3/projects/263fd9"
                    }, 
                    "name": "Test Group", 
                    "parent_id": "123c56"
                  }, 
                  {
                    "domain_id": "1789d1", 
                    "enabled": true, 
                    "id": "50ef01", 
                    "links": {
                      "self": "https://identity:35357/v3/projects/50ef01"
                    }, 
                    "name": "Build Group", 
                    "parent_id": "123c56"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists projects.", 
        "tags": [
          "projects"
        ], 
        "title": "List projects"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "project": {
              "description": "My new project", 
              "domain_id": "1789d1", 
              "enabled": true, 
              "name": "myNewProject", 
              "parent_id": "123c56"
            }
          }
        }, 
        "id": "createProject", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createProject"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "project": {
                  "domain_id": "1789d1", 
                  "enabled": true, 
                  "id": "456789", 
                  "links": {
                    "self": "http://identity:35357/v3/projects/456789"
                  }, 
                  "name": "myNewProject", 
                  "parent_id": "123c56"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a project.", 
        "tags": [
          "projects"
        ], 
        "title": "Create project"
      }
    ], 
    "/v3/projects/{project_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getProject", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "project": {
                  "domain_id": "1789d1", 
                  "enabled": true, 
                  "id": "456789", 
                  "links": {
                    "self": "http://identity:35357/v3/projects/456789"
                  }, 
                  "name": "myNewProject", 
                  "parent_id": "123c56"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified project.", 
        "tags": [
          "projects"
        ], 
        "title": "Show project details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "project": {
              "description": "My updated project", 
              "domain_id": "1789d1", 
              "enabled": true, 
              "name": "myUpdatedProject", 
              "parent_id": "123c56"
            }
          }
        }, 
        "id": "updateProject", 
        "method": "patch", 
        "parameters": [
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "project": {
                  "description": "My updated project", 
                  "domain_id": "1789d1", 
                  "enabled": true, 
                  "id": "263fd9", 
                  "links": {
                    "self": "http://identity:35357/v3/projects/263fd9"
                  }, 
                  "name": "myUpdatedProject", 
                  "parent_id": "123c56"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified project.", 
        "tags": [
          "projects"
        ], 
        "title": "Update project"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteProject", 
        "method": "delete", 
        "parameters": [
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified project.", 
        "tags": [
          "projects"
        ], 
        "title": "Delete project"
      }
    ], 
    "/v3/projects/{project_id}/groups/{group_id}/roles": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listProjectGroupRoles", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/projects/456789/groups/101112/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists roles for a specified project group.", 
        "tags": [
          "projects"
        ], 
        "title": "List roles for project group"
      }
    ], 
    "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "grantProjectGroupRole", 
        "method": "put", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Grants a specified role to a specified project group.", 
        "tags": [
          "projects"
        ], 
        "title": "Grant role to project group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "checkProjectGroupRole", 
        "method": "head", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates that a specified project group has a specified role.", 
        "tags": [
          "projects"
        ], 
        "title": "Check role for project group"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "revokeProjectGroupRole", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The group ID.", 
            "format": "", 
            "in": "path", 
            "name": "group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Revokes a specified role from a specified project group.", 
        "tags": [
          "projects"
        ], 
        "title": "Revoke role from project group"
      }
    ], 
    "/v3/projects/{project_id}/users/{user_id}/roles": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listProjectUserRoles", 
        "method": "get", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/projects/456789/users/313233/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists roles for a specified user in a project.", 
        "tags": [
          "projects"
        ], 
        "title": "List roles for project user"
      }
    ], 
    "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "grantProjectUserRole", 
        "method": "put", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Grants a role to a specified user in a project.", 
        "tags": [
          "projects"
        ], 
        "title": "Grant role to project user"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "checkProjectUserRole", 
        "method": "head", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Validates that a specified user has a specified role in a project.", 
        "tags": [
          "projects"
        ], 
        "title": "Check role for project user"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "revokeProjectUserRole", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on the UUID for a project.", 
            "format": "", 
            "in": "path", 
            "name": "project_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Revokes a role from a specified project user.", 
        "tags": [
          "projects"
        ], 
        "title": "Revoke role from project user"
      }
    ], 
    "/v3/regions": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If you try to add a region with a parent region ID that does not\nexist, this call returns the HTTP ``Not Found (404)`` status code.\n\nIf you try to add a region with a parent region ID that would form\na circular relationship, this call returns the HTTP ``Conflict\n(409)`` status code.", 
        "examples": {
          "application/json": {
            "region": {
              "description": "US West Subregion 1", 
              "parent_region_id": "829551"
            }
          }
        }, 
        "id": "createRegion", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRegion"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "region": {
                  "description": "US West Subregion 1", 
                  "id": "8ebd7f", 
                  "links": {
                    "child_regions": "https://identity:35357/v3/regions?parent_region_id=8ebd7f", 
                    "self": "https://identity:35357/v3/regions/8ebd7f"
                  }, 
                  "parent_region_id": "829551"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a region.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "Create region"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listRegions", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters the results by the specified parent region, by ID.", 
            "format": "", 
            "in": "query", 
            "name": "parent_region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "https://identity:35357/v3/regions"
                }, 
                "regions": [
                  {
                    "description": "US East Region", 
                    "id": "us-east", 
                    "links": {
                      "child_regions": "https://identity:35357/v3/regions?parent_region_id=us-east", 
                      "self": "https://identity:35357/v3/regions/us-east"
                    }, 
                    "parent_region_id": "us-east-coast"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists regions.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "List regions"
      }
    ], 
    "/v3/regions/{region_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getRegion", 
        "method": "get", 
        "parameters": [
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "region": {
                  "description": "US Southwest Region", 
                  "id": "us-southwest", 
                  "links": {
                    "child_regions": "http://identity:35357/v3/regions?parent_region_id=us-southwest", 
                    "self": "https://identity:35357/v3/regions/us-southwest"
                  }, 
                  "parent_region_id": "us-west-coast"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified region, by ID.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "Show region details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If you try to update a region with a parent region ID that does not\nexist, this call returns the HTTP ``Not Found (404)`` status code.", 
        "examples": {
          "application/json": {
            "region": {
              "description": "US Southwest Subregion", 
              "parent_region_id": "us-southwest"
            }
          }
        }, 
        "id": "updateRegion", 
        "method": "patch", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateRegion"
            }
          }, 
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "region": {
                  "description": "US Southwest Subregion", 
                  "id": "us-southwest-1", 
                  "links": {
                    "child_regions": "https://identity:35357/v3/regions?parent_region_id=us-southwest-1", 
                    "self": "https://identity:35357/v3/regions/us-southwest-1"
                  }, 
                  "parent_region_id": "us-southwest"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified region.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "Update region"
      }, 
      {
        "consumes": [], 
        "description": "If you try to delete a region that has child regions, this call\nreturns the HTTP ``Conflict (409)`` status code.", 
        "examples": {}, 
        "id": "deleteRegion", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The region ID.", 
            "format": "", 
            "in": "path", 
            "name": "region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified region.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "Delete region"
      }
    ], 
    "/v3/regions/{user_defined_region_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The user-defined region ID must be unique to the OpenStack\ndeployment. If not, this call returns the HTTP ``Conflict (409)``\nstatus code. You must URL-encode the user-defined region ID if it\ncontains characters that are not allowed in an URI.\n\nIf you try to add a region with a parent region ID that does not\nexist, this call returns the HTTP ``Not Found (404)`` status code.\n\nIf you try to add a region with a parent region ID that would form\na circular relationship, this call returns the HTTP ``Conflict\n(409)`` status code.", 
        "examples": {
          "application/json": {
            "region": {
              "description": "US West Subregion 1", 
              "parent_region_id": "829551"
            }
          }
        }, 
        "id": "createRegionWithID", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRegionWithID"
            }
          }, 
          {
            "description": "A user-defined region ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_defined_region_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "region": {
                  "description": "US West Subregion 1", 
                  "id": "8ebd7f", 
                  "links": {
                    "child_regions": "https://identity:35357/v3/regions?parent_region_id=8ebd7f", 
                    "self": "https://identity:35357/v3/regions/8ebd7f"
                  }, 
                  "parent_region_id": "829551"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a region with a user-defined region ID.", 
        "tags": [
          "regions-v3"
        ], 
        "title": "Create region with user-defined ID"
      }
    ], 
    "/v3/role_assignments": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Because the role assignments list can be long, use the query\nparameters to filter the list.\n\nSome typical examples are:\n\n``GET /role_assignments?user.id={user_id}`` lists role assignments\nfor the specified user.\n\n``GET /role_assignments?scope.project.id={project_id}`` lists role\nassignments for the specified project.\n\nEach role assignment entity in the collection contains a link to\nthe assignment that created this entity.\n\nUse the ``effective`` query parameter to list effective assignments\nat the user, project, and domain level. This parameter allows for\nthe effects of group membership. The group role assignment entities\nthemselves are not returned in the collection. This represents the\neffective role assignments that would be included in a scoped\ntoken. You can use the other query parameters with the\n``effective`` parameter.\n\nFor example, to determine what a user can actually do, issue the\n``GET /role_assignments?user.id={user_id} & effective`` request.\n\nTo return the equivalent set of role assignments that would be\nincluded in the token response of a project-scoped token, issue the\n``GET /role_assignments?user.id={user_id} & s\ncope.project.id={project_id} & effective`` request.\n\nIn the response, the ``links`` entity section for entities that are\nincluded by virtue of group members also contains a URL that you\ncan use to access the membership of the group.", 
        "examples": {}, 
        "id": "listRoleAssignments", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/role_assignments?effective"
                }, 
                "role_assignments": [
                  {
                    "links": {
                      "assignment": "http://identity:35357/v3/domains/161718/users/313233/roles/123456"
                    }, 
                    "role": {
                      "id": "123456"
                    }, 
                    "scope": {
                      "domain": {
                        "id": "161718"
                      }
                    }, 
                    "user": {
                      "id": "313233"
                    }
                  }, 
                  {
                    "links": {
                      "assignment": "http://identity:35357/v3/projects/456789/groups/101112/roles/123456", 
                      "membership": "http://identity:35357/v3/groups/101112/users/313233"
                    }, 
                    "role": {
                      "id": "123456"
                    }, 
                    "scope": {
                      "project": {
                        "id": "456789"
                      }
                    }, 
                    "user": {
                      "id": "313234"
                    }
                  }
                ]
              }, 
              "text/plain": "GET /role_assignments?user.id={user_id}&scope.project.id={project_id}&effective\n"
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists role assignments.", 
        "tags": [
          "roles"
        ], 
        "title": "List role assignments"
      }
    ], 
    "/v3/roles": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listRoles", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on a name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/roles"
                }, 
                "roles": [
                  {
                    "id": "123456", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123456"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "id": "123457", 
                    "links": {
                      "self": "http://identity:35357/v3/roles/123457"
                    }, 
                    "name": "manager"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists roles.", 
        "tags": [
          "roles"
        ], 
        "title": "List roles"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "role": {
              "name": "a role name"
            }
          }
        }, 
        "id": "createRole", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createRole"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "id": "123456", 
                "links": {
                  "self": "http://identity:35357/v3/roles/123456"
                }, 
                "name": "a role name"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a role.", 
        "tags": [
          "roles"
        ], 
        "title": "Create role"
      }
    ], 
    "/v3/roles/{role_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getRole", 
        "method": "get", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "123456", 
                "links": {
                  "self": "http://identity:35357/v3/roles/131415"
                }, 
                "name": "a role name"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified role.", 
        "tags": [
          "roles"
        ], 
        "title": "Show role details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "role": {
              "name": "a new role name"
            }
          }
        }, 
        "id": "updateRole", 
        "method": "patch", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "123456", 
                "links": {
                  "self": "http://identity:35357/v3/roles/131415"
                }, 
                "name": "a role name"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified role.", 
        "tags": [
          "roles"
        ], 
        "title": "Update role"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteRole", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The role ID.", 
            "format": "", 
            "in": "path", 
            "name": "role_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified role.", 
        "tags": [
          "roles"
        ], 
        "title": "Delete role"
      }
    ], 
    "/v3/services": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listServices", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters by service type. Service types include compute, ec2, image,\nand identity.", 
            "format": "", 
            "in": "query", 
            "name": "type", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:5000/v3/services"
                }, 
                "services": [
                  {
                    "description": "Keystone Identity Service", 
                    "enabled": true, 
                    "id": "686766", 
                    "links": {
                      "self": "http://identity:5000/v3/services/686766"
                    }, 
                    "name": "keystone", 
                    "type": "identity"
                  }, 
                  {
                    "enabled": true, 
                    "id": "936521", 
                    "links": {
                      "self": "http://identity:5000/v3/services/936521"
                    }, 
                    "type": "volume"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists services.", 
        "tags": [
          "service-catalog"
        ], 
        "title": "List services"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "service": {
              "type": "volume"
            }
          }
        }, 
        "id": "createService", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createService"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "service": {
                  "enabled": true, 
                  "id": "686766", 
                  "links": {
                    "self": "http://identity:5000/v3/services/686766"
                  }, 
                  "type": "volume"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a service.", 
        "tags": [
          "service-catalog"
        ], 
        "title": "Create service"
      }
    ], 
    "/v3/services/{service_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getService", 
        "method": "get", 
        "parameters": [
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "service": {
                  "description": "Keystone Identity Service", 
                  "enabled": true, 
                  "id": "686766", 
                  "links": {
                    "self": "http://identity:5000/v3/services/686766"
                  }, 
                  "name": "keystone", 
                  "type": "identity"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified service.", 
        "tags": [
          "service-catalog"
        ], 
        "title": "Show service details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "type": "volume"
          }
        }, 
        "id": "updateService", 
        "method": "patch", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateService"
            }
          }, 
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "service": {
                  "id": "686766", 
                  "type": "volume"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified service.", 
        "tags": [
          "service-catalog"
        ], 
        "title": "Update service"
      }, 
      {
        "consumes": [], 
        "description": "If you try to delete a service when endpoints exist, this call\neither deletes all associated endpoints or fails until all\nendpoints are deleted.", 
        "examples": {}, 
        "id": "deleteService", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The service ID.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified service.", 
        "tags": [
          "service-catalog"
        ], 
        "title": "Delete service"
      }
    ], 
    "/v3/users": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listUsers", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filters on domain_id.", 
            "format": "", 
            "in": "query", 
            "name": "domain_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on a name.", 
            "format": "", 
            "in": "query", 
            "name": "name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filters on enabled or disabled roles. Values are ``true`` or\n``false`` .", 
            "format": "", 
            "in": "query", 
            "name": "enabled", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Enables you to page through the list.", 
            "format": "", 
            "in": "query", 
            "name": "page", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Sets the page size for paging through the list. Default page size\nis 30.", 
            "format": "", 
            "in": "query", 
            "name": "per_page", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users"
                }, 
                "users": [
                  {
                    "default_project_id": "263fd9", 
                    "description": "Admin user", 
                    "domain_id": "1789d1", 
                    "email": "admin@example.com", 
                    "enabled": true, 
                    "id": "0ca8f6", 
                    "links": {
                      "self": "https://identity:35357/v3/users/0ca8f6"
                    }, 
                    "name": "admin"
                  }, 
                  {
                    "default_project_id": "263fd9", 
                    "description": "John Smith's user", 
                    "domain_id": "1789d1", 
                    "email": "jsmith@example.com", 
                    "enabled": true, 
                    "id": "9fe1d3", 
                    "links": {
                      "self": "https://identity:35357/v3/users/9fe1d3"
                    }, 
                    "name": "jsmith"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists users.", 
        "tags": [
          "users"
        ], 
        "title": "List users"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "user": {
              "default_project_id": "263fd9", 
              "description": "James Doe's user", 
              "domain_id": "1789d1", 
              "email": "jdoe@example.com", 
              "enabled": true, 
              "name": "James Doe", 
              "password": "secretsecret"
            }
          }
        }, 
        "id": "createUser", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createUser"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "James Doe's user", 
                  "domain_id": "1789d1", 
                  "email": "jdoe@example.com", 
                  "enabled": true, 
                  "id": "ff4e51", 
                  "links": {
                    "self": "https://identity:35357/v3/users/ff4e51"
                  }, 
                  "name": "James Doe"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a user.", 
        "tags": [
          "users"
        ], 
        "title": "Create user"
      }
    ], 
    "/v3/users/{user_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "getUser", 
        "method": "get", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "John Smith's user", 
                  "domain_id": "1789d1", 
                  "email": "jsmith@example.com", 
                  "enabled": true, 
                  "id": "9fe1d3", 
                  "links": {
                    "self": "https://identity:35357/v3/users/9fe1d3"
                  }, 
                  "name": "jsmith"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified user.", 
        "tags": [
          "users"
        ], 
        "title": "Show user details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "If the back-end driver does not allow this functionality, this call\nmight return the HTTP ``Not Implemented (501)`` status code.", 
        "examples": {
          "application/json": {
            "user": {
              "default_project_id": "263fd9", 
              "description": "James Doe's user", 
              "email": "jamesdoe@example.com", 
              "enabled": true
            }
          }
        }, 
        "id": "updateUser", 
        "method": "patch", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "user": {
                  "default_project_id": "263fd9", 
                  "description": "James Doe's user", 
                  "domain_id": "1789d1", 
                  "email": "jamesdoe@example.com", 
                  "enabled": true, 
                  "id": "ff4e51", 
                  "links": {
                    "self": "https://identity:35357/v3/users/ff4e51"
                  }, 
                  "name": "jamesdoe"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates the password for or enables or disables a specified user.", 
        "tags": [
          "users"
        ], 
        "title": "Update user"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteUser", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified user.", 
        "tags": [
          "users"
        ], 
        "title": "Delete user"
      }
    ], 
    "/v3/users/{user_id}/groups": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listUserGroups", 
        "method": "get", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "groups": [
                  {
                    "description": "Developers cleared for work on all general projects", 
                    "domain_id": "1789d1", 
                    "id": "ea167b", 
                    "links": {
                      "self": "https://identity:35357/v3/groups/ea167b"
                    }, 
                    "name": "Developers"
                  }, 
                  {
                    "description": "Developers cleared for work on secret projects", 
                    "domain_id": "1789d1", 
                    "id": "a62db1", 
                    "links": {
                      "self": "https://identity:35357/v3/groups/a62db1"
                    }, 
                    "name": "Secure Developers"
                  }
                ], 
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users/9fe1d3/groups"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists groups for a specified user.", 
        "tags": [
          "users"
        ], 
        "title": "List groups for user"
      }
    ], 
    "/v3/users/{user_id}/projects": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listUserProjects", 
        "method": "get", 
        "parameters": [
          {
            "description": "The user ID.", 
            "format": "", 
            "in": "path", 
            "name": "user_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": {
                  "next": null, 
                  "previous": null, 
                  "self": "http://identity:35357/v3/users/313233/projects"
                }, 
                "projects": [
                  {
                    "description": "description of this project", 
                    "domain_id": "161718", 
                    "enabled": true, 
                    "id": "456788", 
                    "links": {
                      "self": "http://identity:35357/v3/projects/456788"
                    }, 
                    "name": "a project name", 
                    "parent_id": "212223"
                  }, 
                  {
                    "description": "description of this project", 
                    "domain_id": "161718", 
                    "enabled": true, 
                    "id": "456789", 
                    "links": {
                      "self": "http://identity:35357/v3/projects/456789"
                    }, 
                    "name": "another domain", 
                    "parent_id": "212223"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "List projects for a specified user.", 
        "tags": [
          "users"
        ], 
        "title": "List projects for user"
      }
    ]
  }, 
  "schemes": {}, 
  "securityDefinitions": {}, 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "API versions", 
      "name": "versions-identity", 
      "summary": ""
    }, 
    {
      "description": "Tokens", 
      "name": "tokens", 
      "summary": "Manages tokens."
    }, 
    {
      "description": "Service catalog", 
      "name": "service-catalog", 
      "summary": "Manages the catalog of services."
    }, 
    {
      "description": "Endpoints", 
      "name": "endpoints", 
      "summary": "Manages endpoints."
    }, 
    {
      "description": "Domains", 
      "name": "domains", 
      "summary": "Manages domains.\n\nDomains represent collections of users, groups, and projects. Each\nis owned by exactlyone domain. Users, however, can be associated\nwith multiple projects by granting rolesto the user on a project,\nincluding projects owned by other domains.\n\nEach domain defines a namespace where certain API-visible name\nattributes exist, whichaffects whether those names must be globally\nunique or unique within that domain. In theIdentity API, the\nuniqueness of the following attributes is as follows:\n\n- *Domain name*. Globally unique across alldomains.\n\n- *Role name*. Globally unique across alldomains.\n\n- *User name*. Unique within the owningdomain.\n\n- *Project name*. Unique within the owningdomain.\n\n- *Group name*. Unique within the owningdomain."
    }, 
    {
      "description": "Projects", 
      "name": "projects", 
      "summary": "Manages projects."
    }, 
    {
      "description": "Users", 
      "name": "users", 
      "summary": "Manages users."
    }, 
    {
      "description": "Groups", 
      "name": "groups", 
      "summary": "Manages groups."
    }, 
    {
      "description": "Credentials", 
      "name": "credentials", 
      "summary": "Manages credentials."
    }, 
    {
      "description": "Roles", 
      "name": "roles", 
      "summary": "Manages roles."
    }, 
    {
      "description": "Policies", 
      "name": "policies", 
      "summary": "Manages policies.\n\nYou can encode policy rule sets into a blob to be consumed byremote\nservices. To do so, set ``type`` to ``application/json`` and\nspecify policy rules as JSON strings in a ``blob`` . For example:\n\n::\n   \"blob\": {           \"default\": false       }\nOr:\n\n::\n   \"blob\": {           \"foobar_user\": [               \"role:compute-user\"           ]       }"
    }, 
    {
      "description": "Regions", 
      "name": "regions-v3", 
      "summary": "Manages regions.\n\nA region is a general division of an OpenStack deployment.You can\nassociate zero or more sub-regions with a regionto create a tree-\nlike structured hierarchy.\n\nAlthough a region does not have a geographical connotation,\nadeployment can use a geographical name for a region, such as ``us-\neast`` ."
    }
  ]
}