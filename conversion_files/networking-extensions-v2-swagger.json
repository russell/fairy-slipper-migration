{
  "basePath": {}, 
  "definitions": {
    "addRouterInterface": {
      "properties": {
        "port_id": {
          "description": "The port ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "addRouterInterface_200": {
      "properties": {
        "id": {
          "description": "The router ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "port_id": {
          "description": "The port ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The tenant ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createHealthMonitor": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "Maximum consecutive health probe tries.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "timeout": {
          "description": "Time in seconds to timeout each probe.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe that is sent by the load balancer to verify the\nmember state. A valid value is PING, TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url_path": {
          "description": "The path portion of URI that is probed if the type is HTTP or\nHTTPS.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createHealthMonitor_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the health monitor.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE`` . A valid value is from 1 to\n10.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the health monitor. Indicates whether the health\nmonitor is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum number of seconds for a monitor to wait for a\nconnection to be established before it times out. This value must\nbe less than the delay value.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is PING, TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string beginning with a forward slash (/).", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createIKEPolicy": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IKE policy. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "createIKEPolicy_201": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "createIPSecPolicy": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport`` . Default is ``tunnel`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec policy. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "createIPSecPolicy_201": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "Encapsulation mode: tunnel(default), or transport.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "createIPSecSiteConnection": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk`` , which is the\ndefault.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "ikepolicy_id": {
          "description": "Unique identifier of IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "ipsecpolicy_id": {
          "description": "Unique identifier of IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "mtu": {
          "description": "Maximum Transmission Unit to address fragmentation. Minimum is 68\nfor IPv4, and 1280 for IPv6.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static`` , which is the default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "status": {
          "description": "The operational status of the IPSec connection. A possible value is\n``ACTIVE`` , ``DOWN`` , ``BUILD`` , ``ERROR`` , ``PENDING_CREATE``\n, ``PENDING_UPDATE`` , or ``PENDING_DELETE`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "Unique identifier of VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createIPSecSiteConnection_201": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk`` , which is the\ndefault.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with Dead Peer Detection protocol controls.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "id": {
          "description": "The unique ID for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "Unique identifier of IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "ipsecpolicy_id": {
          "description": "Unique identifier of IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "Pre Shared Key: any string", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nPossible values include: ACTIVE, DOWN, BUILD, ERROR,\nPENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout, in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "Unique identifier of VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createListener": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).\n\nSet this attribute to ``false`` to create the listener in an\nadministratively down state.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The ID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "loadbalancer_id": {
          "description": "The ID of the load balancer.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid values is HTTP, HTTPS, TCP,\nor UDP.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "required": false, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the listener. Only administrative\nusers can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createLoadBalancer": {
      "properties": {
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name. Does not have to be unique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the load balancer. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createLoadBalancer_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the load balancer.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the load balancer. Indicates whether the load\nbalancer is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createMember": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "subnet_id": {
          "description": "If you omit this parameter, LBaaS uses the ``vip_subnet_id``\nparameter value for the subnet ID.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the member. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createMember_201": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The unique ID for the member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "Subnet in which to access this member.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the member. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "weight": {
          "description": "A positive integer value that indicates the relative portion of\ntraffic that this member should receive from the pool. For example,\na member with a weight of 10 receives five times as much traffic as\na member with a weight of 2.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "createMeteringLabel": {
      "properties": {
        "description": {
          "description": "The description for the metering label.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "metering_label": {
          "description": "The ``metering label`` object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createMeteringLabelRule": {
      "properties": {
        "direction": {
          "description": "Ingress or egress, which is the direction in which the metering\nrule is applied.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "excluded": {
          "description": "Indicates whether to count the traffic of a specific IP address\nwith the ``remote_ip_prefix`` value. Default is ``False`` .", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "metering_label_id": {
          "description": "The metering label ID to associate with this metering rule.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metering_label_rule": {
          "description": "The ``metering label rule`` object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to be associated with this metering rule\npacket.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createMeteringLabelRule_201": {
      "properties": {
        "direction": {
          "description": "Ingress or egress, which is the direction in which the metering\nrule is applied.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "excluded ": {
          "description": "Indicates whether to count the traffic of a specific IP address\nwith the ``remote_ip_prefix`` value. Default is ``False`` .", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The ID for the specified metering label rule.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metering_label_id": {
          "description": "The metering label ID to associate with this metering rule.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metering_label_rule": {
          "description": "The ``metering label rule`` object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "remote_ip_prefix": {
          "description": "The remote IP prefix to be associated with this metering rule\npacket.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createMeteringLabel_201": {
      "properties": {
        "description": {
          "description": "Description for the metering label.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The metering label ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "metering_label": {
          "description": "The ``metering label`` object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "The name of the metering label.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The tenant ID for the specified metering label.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createPool": {
      "properties": {
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the pool. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createPool_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "healthmonitor_id": {
          "description": "The ID of the health monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "members": {
          "description": "List of members that belong to the pool.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "The session persistence algorithm. This algorithm is a dictionary\nwith type and cookie_name keys.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the pool. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createSubnetPool": {
      "properties": {
        "address_scope_id": {
          "description": "An address scope to assign to the subnet pool.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet. Default is ``min_prefixlen`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. Default is no quota is enforced\non allocations from the subnet pool. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.\nFor IPv4 subnet pools, default is ``32`` . For IPv6 subnet pools,\ndefault is ``128`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool. For\nIPv4 subnet pools, default is ``8`` . For IPv6 subnet pools,\ndefault is ``64`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "A name for the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes to assign to the subnet pool. The API\nmerges adjacent prefixes and treats them as a single prefix.\n\nEach subnet prefix must be unique among all subnet prefixes in all\nsubnet pools that are associated with the specified address scope.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "shared": {
          "description": "Admin-only. Indicates whether this subnet pool is shared across all\ntenants.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool. Only administrative\nusers can specify a tenant ID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createSubnetPool_201": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "id": {
          "description": "The ID of the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "createVPNService": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, connections on service are not\nactive.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "router_id": {
          "description": "Router ID to which the VPN service is inserted.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "VPN service object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "createVPNService_201": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, the port does not forward\npackets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "router_id": {
          "description": "ID of the router into which the VPN service is inserted.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational.\nPossible values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE,\nPENDING_UPDATE, and PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "VPN service object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "listHealthMonitors_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the health monitor.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE`` . A valid value is from 1 to\n10.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the health monitor. Indicates whether the health\nmonitor is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum number of seconds for a monitor to wait for a\nconnection to be established before it times out. This value must\nbe less than the delay value.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is PING, TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string beginning with a forward slash (/).", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listIKEPolicies_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ikepolicies": {
          "description": "IKE policy objects.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "listIPSecPolicies_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "Encapsulation mode: tunnel(default), or transport.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ipsecpolicies": {
          "description": "IPSec policy objects.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "listIPSecSiteConnections_200": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk`` , which is the\ndefault.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with Dead Peer Detection protocol controls.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "id": {
          "description": "The unique ID for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "Unique identifier of IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "ipsec_site_connections": {
          "description": "IPSec site-to-site connection objects.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "ipsecpolicy_id": {
          "description": "Unique identifier of IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "Pre Shared Key: any string", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nPossible values include: ACTIVE, DOWN, BUILD, ERROR,\nPENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout, in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "Unique identifier of VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listLoadBalancers_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the load balancer.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "loadbalancers": {
          "description": "A ``loadbalancers`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the load balancer. Indicates whether the load\nbalancer is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listMembers_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The unique ID for the member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "Subnet in which to access this member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the member. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "weight": {
          "description": "Weight of member.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "listPools_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "required": false, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "Information about the health monitors that are associated with the\npool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "members": {
          "description": "List of members that belong to the pool.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "The session persistence algorithm, if any, to use. This algorithm\nis a dictionary with the ``type`` and ``cookie_name`` keys.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "All members of this pool are on this subnet.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the pool. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The ID of VIP.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listSubnetPools_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "id": {
          "description": "The ID of the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "subnetpools": {
          "description": "A ``subnetpools`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "listVPNServices_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, the port does not forward\npackets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "router_id": {
          "description": "ID of the router into which the VPN service is inserted.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational.\nPossible values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE,\nPENDING_UPDATE, and PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vpnservices": {
          "description": "VPN service objects.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }
      }, 
      "type": "object"
    }, 
    "showHealthMonitor_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the health monitor.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE`` . A valid value is from 1 to\n10.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the health monitor. Indicates whether the health\nmonitor is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum number of seconds for a monitor to wait for a\nconnection to be established before it times out. This value must\nbe less than the delay value.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is PING, TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string beginning with a forward slash (/).", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showIKEPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "showIPSecPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "Encapsulation mode: tunnel(default), or transport.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "showIPSecSiteConnection_200": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk`` , which is the\ndefault.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with Dead Peer Detection protocol controls.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "id": {
          "description": "The unique ID for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "Unique identifier of IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "ipsecpolicy_id": {
          "description": "Unique identifier of IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "Pre Shared Key: any string", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nPossible values include: ACTIVE, DOWN, BUILD, ERROR,\nPENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout, in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "Unique identifier of VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showLoadBalancer_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the load balancer.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the load balancer. Indicates whether the load\nbalancer is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showMember_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The unique ID for the member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "Subnet in which to access this member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the member. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "weight": {
          "description": "Weight of member.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "showPool_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "required": false, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "Information about the health monitors that are associated with the\npool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "members": {
          "description": "List of members that belong to the pool.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "The session persistence algorithm, if any, to use. This algorithm\nis a dictionary with the ``type`` and ``cookie_name`` keys.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "All members of this pool are on this subnet.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the pool. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The ID of VIP.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showQuota_200": {
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "showSubnetPool_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "id": {
          "description": "The ID of the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "showVPNService_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, the port does not forward\npackets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "router_id": {
          "description": "ID of the router into which the VPN service is inserted.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational.\nPossible values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE,\nPENDING_UPDATE, and PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "VPN service object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "showVersionDetailsv2-neutron_200": {
      "properties": {
        "location": {
          "description": "Full URL to a service or server.", 
          "format": "uri", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateHealthMonitor": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor. A valid value is\ntrue (UP) or false (DOWN).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "The list of HTTP status codes expected in response from the member\nto declare it healthy. A valid value is a single value such as 200,\na list such as 200, 202, or a range such as 200-204.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE`` . A valid value is from 1 to\n10.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "timeout": {
          "description": "The maximum number of seconds for a monitor to wait for a\nconnection to be established before it times out. This value must\nbe less than the delay value.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. A valid value is a string that begins with a forward\nslash (/).", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateHealthMonitor_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the health monitor, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "delay": {
          "description": "The time, in seconds, between sending probes to members.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "expected_codes": {
          "description": "Expected HTTP codes for a passing HTTP(S) monitor.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "http_method": {
          "description": "The HTTP method that the monitor uses for requests.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the health monitor.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "max_retries": {
          "description": "The number of allowed connection failures before changing the\nstatus of the member to ``INACTIVE`` . A valid value is from 1 to\n10.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the health monitor. Indicates whether the health\nmonitor is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the health monitor. Only\nadministrative users can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The maximum number of seconds for a monitor to wait for a\nconnection to be established before it times out. This value must\nbe less than the delay value.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "type": {
          "description": "The type of probe sent by the load balancer to verify the member\nstate, which is PING, TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "url_path": {
          "description": "The HTTP path of the request sent by the monitor to test the health\nof a member. Must be a string beginning with a forward slash (/).", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateIKEPolicy": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateIKEPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication hash algorithm. A valid value is ``sha1`` ,\nwhich is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ike_version": {
          "description": "The IKE version. A valid value is ``v1`` or ``v2`` . Default is\n``v1`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IKE policy. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "phase1_negotiation_mode": {
          "description": "The IKE mode. A valid value is ``main`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateIPSecPolicy": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "The encapsulation mode. A valid value is ``tunnel`` or\n``transport`` . Default is ``tunnel`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateIPSecPolicy_200": {
      "properties": {
        "auth_algorithm": {
          "description": "The authentication algorithm. A valid value is ``sha1`` , which is\nthe default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encapsulation_mode": {
          "description": "Encapsulation mode: tunnel(default), or transport.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "encryption_algorithm": {
          "description": "The encryption algorithm. A valid value is ``3des`` , ``aes-128`` ,\n``aes-192`` , ``aes-256`` , and so on. Default is ``aes-128`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lifetime": {
          "description": "The lifetime of the security association. The lifetime consists of\na unit and integer value. You can omit either the unit or value\nportion of the lifetime.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec policy. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "pfs": {
          "description": "Perfect forward secrecy (PFS). A valid value is ``Group2`` ,\n``Group5`` , ``Group14`` , and so on. Default is ``Group5`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "transform_protocol": {
          "description": "The transform protocol. A valid value is ``ESP`` , ``AH`` , or\n``AH-ESP`` . Default is ``ESP`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "units": {
          "description": "Units for lifetime of the security association. Default is seconds.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "value": {
          "description": "Lifetime value, as a positive integer. Default is 3600 seconds.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateIPSecSiteConnection": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with dead peer detection (DPD) protocol controls.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "mtu": {
          "description": "Maximum Transmission Unit to address fragmentation. Minimum is 68\nfor IPv4, and 1280 for IPv6.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "The pre-shared key. A valid value is any string.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateIPSecSiteConnection_200": {
      "properties": {
        "action": {
          "description": "The DPD action. A valid value is ``clear`` , ``hold`` , ``restart``\n, ``disabled`` , or ``restart-by-peer`` . Default value is ``hold``\n.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the IPSec connection, which is up (\n``true`` ) or down ( ``false`` ). If down, the connection does not\nforward packets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "auth_mode": {
          "description": "The authentication mode. A valid value is ``psk`` , which is the\ndefault.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Human-readable description for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "dpd": {
          "description": "A dictionary with Dead Peer Detection protocol controls.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "id": {
          "description": "The unique ID for the IPSec connection.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ikepolicy_id": {
          "description": "Unique identifier of IKE policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "initiator": {
          "description": "Indicates whether this VPN can only respond to connections or both\nrespond to and initiate connections. A valid value is ``response-\nonly`` or ``bi-directional`` . Default is ``bi-directional`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "interval": {
          "description": "The DPD interval, in seconds. A valid value is a positive integer.\nDefault is 30.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "ipsecpolicy_id": {
          "description": "Unique identifier of IPSec policy.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "mtu": {
          "description": "The maximum transmission unit (MTU) to address fragmentation. The\nminimum value for IPv4 is 68. The minimum value for IPv6 is 1280.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "Human-readable name for the IPSec connection. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_address": {
          "description": "Peer gateway public IPv4/IPv6 address or FQDN.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "peer_cidrs": {
          "description": "Unique list of valid peer private CIDRs in the form < net_address >\n/ < prefix > .", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "peer_id": {
          "description": "Peer router identity for authentication. Can be IPv4/IPv6 address,\ne-mail address, key id, or FQDN. Typically is same as\n``peer_address`` .", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "psk": {
          "description": "Pre Shared Key: any string", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "route_mode": {
          "description": "The route mode. A valid value is ``static`` , which is the default.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether the IPSec connection is currently operational.\nPossible values include: ACTIVE, DOWN, BUILD, ERROR,\nPENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the IPSec connection. Only administrative users can\nspecify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "timeout": {
          "description": "The DPD timeout, in seconds. A valid value is a positive integer\nthat is greater than the DPD ``interval`` value. Default is 120.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "vpnservice_id": {
          "description": "Unique identifier of VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateListener": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).\n\nSet this attribute to ``false`` to create the listener in an\nadministratively down state.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "connection_limit": {
          "description": "The maximum number of connections permitted for this load balancer.\nDefault is infinite.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "default_pool_id": {
          "description": "The ID of default pool. Must have compatible protocol with\nlistener.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "default_tls_container_ref": {
          "description": "A reference to a container of TLS secrets.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Detailed description of the listener.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "listener": {
          "description": "A ``listener`` object.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "loadbalancer_id": {
          "description": "The ID of the load balancer.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The listener name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol to load balance. A valid values is HTTP, HTTPS, TCP,\nor UDP.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The TCP or UDP port on which to listen.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "sni_container_refs": {
          "description": "A list of references to TLS secrets.", 
          "format": "", 
          "required": false, 
          "type": "array"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the listener. Only administrative\nusers can specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateLoadBalancer": {
      "properties": {
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "loadbalancer": {
          "description": "A ``loadbalancer`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name. Does not have to be unique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateLoadBalancer_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the load balancer, which is up (\n``true`` ) or down ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Load balancer description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the load balancer.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Load balancer name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "The status of the load balancer. Indicates whether the load\nbalancer is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the VIP. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_address": {
          "description": "The IP address of the VIP.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "vip_subnet_id": {
          "description": "The ID of the subnet on which to allocate the VIP address.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateMember": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the member, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }, 
    "updateMember_200": {
      "properties": {
        "address": {
          "description": "The IP address of the member.", 
          "format": "ipv4", 
          "required": true, 
          "type": "string"
        }, 
        "admin_state_up": {
          "description": "The administrative state of the member, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "id": {
          "description": "The unique ID for the member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol_port": {
          "description": "The port where the application is hosted.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "status": {
          "description": "The status of the member. Indicates whether the member is\noperational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "Subnet in which to access this member.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the member. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "weight": {
          "description": "Weight of member.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updatePool": {
      "properties": {
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updatePool_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the pool, which is up ( ``true`` ) or\ndown ( ``false`` ).", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "The description for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "health_monitors": {
          "description": "List of health monitors that are associated with the pool.", 
          "format": "", 
          "required": false, 
          "type": "array"
        }, 
        "health_monitors_status": {
          "description": "Information about the health monitors that are associated with the\npool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "lb_method": {
          "description": "The load-balancer algorithm, which is round-robin, least-\nconnections, and so on, that is used to distribute traffic to the\npool members. This value, which must be supported, is dependent on\nthe load-balancer provider. The round-robin algorithm must be\nsupported.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "members": {
          "description": "List of members that belong to the pool.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "name": {
          "description": "Pool name. Does not have to be unique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "protocol": {
          "description": "The protocol of the pool, which is TCP, HTTP, or HTTPS.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "provider": {
          "description": "The load-balancer provider.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "session_persistence": {
          "description": "The session persistence algorithm, if any, to use. This algorithm\nis a dictionary with the ``type`` and ``cookie_name`` keys.", 
          "format": "", 
          "required": false, 
          "type": "object"
        }, 
        "status": {
          "description": "The status of the pool. Indicates whether the pool is operational.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "All members of this pool are on this subnet.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the pool. Only administrative users\ncan specify a tenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vip_id": {
          "description": "The ID of VIP.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateQuota_200": {
      "properties": {
        "floatingip": {
          "description": "The number of floating IP addresses allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "network": {
          "description": "The number of networks allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "port": {
          "description": "The number of ports allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "router": {
          "description": "The number of routers allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "security_group": {
          "description": "The number of security groups allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "security_group_rule": {
          "description": "The number of security group rules allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "subnet": {
          "description": "The number of subnets allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "subnetpool": {
          "description": "The number of subnet pools allowed for each tenant.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }
      }, 
      "type": "object"
    }, 
    "updateRouter": {
      "properties": {
        "destination": {
          "description": "The destination CIDR.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "next_hop": {
          "description": "The IP address of the next hop.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "routes": {
          "description": "List of dictionary pairs in this format:\n\n::\n\n   [\n     {\n       \"nexthop\":\"IPADDRESS\",\n       \"destination\":\"CIDR\"\n     }\n   ]", 
          "format": "", 
          "required": false, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "updateSecGroup": {
      "properties": {
        "description": {
          "description": "Security group description.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateSecGroup_200": {
      "properties": {
        "description": {
          "description": "Security group description.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The security group ID.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "The security group name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "security_group": {
          "description": "A ``security_group`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The tenant.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateSubnetPool": {
      "properties": {
        "address_scope_id": {
          "description": "An address scope to assign to the subnet pool.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet. Default is ``min_prefixlen`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. Default is no quota is enforced\non allocations from the subnet pool. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.\n\nUpdating this parameter has no effect on existing subnet\nallocations. The existing subnet allocations for each tenant are\ncounted against the updated prefix space quota.", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.\nFor IPv4 subnet pools, default is ``32`` . For IPv6 subnet pools,\ndefault is ``128`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool. For\nIPv4 subnet pools, default is ``8`` . For IPv6 subnet pools,\ndefault is ``64`` .", 
          "format": "", 
          "required": false, 
          "type": "integer"
        }, 
        "name": {
          "description": "A name for the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes to assign to the subnet pool. The API\nmerges adjacent prefixes and treats them as a single prefix.\n\nTo update the subnet prefixes, pass a list that contains the\nexisting set of prefixes and the new set of prefixes. You cannot\nshrink the prefix list of a subnet pool. You can only add prefixes\nto it to expand it.\n\nEnsure that each subnet prefix is unique among all subnet prefixes\nin all subnet pools that are associated with the specified address\nscope.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool. Only administrative\nusers can specify a tenant ID other than their own. You cannot\nchange this value through authorization policies.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateSubnetPool_200": {
      "properties": {
        "address_scope_id": {
          "description": "The address scope.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "default_prefixlen": {
          "description": "The size of the prefix to allocate when the ``cidr`` or\n``prefixlen`` attributes are not specified when you create the\nsubnet.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "default_quota": {
          "description": "A per-tenant quota on the prefix space that can be allocated from\nthe subnet pool for tenant subnets. For IPv4 subnet pools,\n``default_quota`` is measured in units of /32. For IPv6 subnet\npools, ``default_quota`` is measured units of /64. All tenants that\nuse the subnet pool have the same prefix quota applied.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "id": {
          "description": "The ID of the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "ip_version": {
          "description": "The IP address family of the list of prefixes passed to the\n``prefixes`` attribute.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "max_prefixlen": {
          "description": "The maximum prefix size that can be allocated from the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "min_prefixlen": {
          "description": "The smallest prefix that can be allocated from a subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "integer"
        }, 
        "name": {
          "description": "The subnet pool name.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "prefixes": {
          "description": "A list of subnet prefixes that are assigned to the subnet pool. The\nAPI merges adjacent prefixes and treats them as a single prefix.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }, 
        "shared": {
          "description": "Indicates whether this subnet pool is shared across all tenants.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "subnetpool": {
          "description": "A ``subnetpool`` object.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "The ID of the tenant who owns the subnet pool.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }
      }, 
      "type": "object"
    }, 
    "updateVPNService": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, connections on service are not\nactive.", 
          "format": "", 
          "required": false, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": false, 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "VPN service object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }
      }, 
      "type": "object"
    }, 
    "updateVPNService_200": {
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the VPN service, which is up ( ``true``\n) or down ( ``false`` ). If down, the port does not forward\npackets.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "description": {
          "description": "Human-readable description for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "id": {
          "description": "The unique ID for the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Human-readable name for the VPN service. Does not have to be\nunique.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "router_id": {
          "description": "ID of the router into which the VPN service is inserted.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Indicates whether IPSec VPN service is currently operational.\nPossible values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE,\nPENDING_UPDATE, and PENDING_DELETE.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "subnet_id": {
          "description": "The subnet where the tenant wants the VPN service.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "tenant_id": {
          "description": "Owner of the VPN service. Only administrative users can specify a\ntenant ID other than their own.", 
          "format": "", 
          "required": true, 
          "type": "string"
        }, 
        "vpnservice": {
          "description": "VPN service object.", 
          "format": "", 
          "required": true, 
          "type": "object"
        }
      }, 
      "type": "object"
    }
  }, 
  "externalDocs": {}, 
  "host": {}, 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "service": "networking-extensions", 
    "title": "Networking extensions", 
    "version": "v2"
  }, 
  "paths": {
    "/": [], 
    "/v2.0": [], 
    "/v2.0/extensions": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Lists available Networking API extensions.", 
        "examples": {}, 
        "id": "listExtensions", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "extensions": [
                  {
                    "alias": "service-type", 
                    "description": "API for retrieving service providers for Neutron advanced services", 
                    "links": [], 
                    "name": "Neutron Service Type Management", 
                    "updated": "2013-01-20T00:00:00-00:00"
                  }, 
                  {
                    "alias": "security-group", 
                    "description": "The security groups extension.", 
                    "links": [], 
                    "name": "security-group", 
                    "updated": "2012-10-05T10:00:00-00:00"
                  }, 
                  {
                    "alias": "l3_agent_scheduler", 
                    "description": "Schedule routers among l3 agents", 
                    "links": [], 
                    "name": "L3 Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas_agent_scheduler", 
                    "description": "Schedule pools among lbaas agents", 
                    "links": [], 
                    "name": "Loadbalancer Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "ext-gw-mode", 
                    "description": "Extension of the router abstraction for specifying whether SNAT should occur on the external gateway", 
                    "links": [], 
                    "name": "Neutron L3 Configurable external gateway mode", 
                    "updated": "2013-03-28T10:00:00-00:00"
                  }, 
                  {
                    "alias": "binding", 
                    "description": "Expose port bindings of a virtual port to external application", 
                    "links": [], 
                    "name": "Port Binding", 
                    "updated": "2014-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "provider", 
                    "description": "Expose mapping of virtual networks to physical networks", 
                    "links": [], 
                    "name": "Provider Network", 
                    "updated": "2012-09-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "agent", 
                    "description": "The agent management extension.", 
                    "links": [], 
                    "name": "agent", 
                    "updated": "2013-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "quotas", 
                    "description": "Expose functions for quotas management per tenant", 
                    "links": [], 
                    "name": "Quota management support", 
                    "updated": "2012-07-29T10:00:00-00:00"
                  }, 
                  {
                    "alias": "dhcp_agent_scheduler", 
                    "description": "Schedule networks among dhcp agents", 
                    "links": [], 
                    "name": "DHCP Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "multi-provider", 
                    "description": "Expose mapping of virtual networks to multiple physical networks", 
                    "links": [], 
                    "name": "Multi Provider Network", 
                    "updated": "2013-06-27T10:00:00-00:00"
                  }, 
                  {
                    "alias": "external-net", 
                    "description": "Adds external network attribute to network resource.", 
                    "links": [], 
                    "name": "Neutron external network", 
                    "updated": "2013-01-14T10:00:00-00:00"
                  }, 
                  {
                    "alias": "router", 
                    "description": "Router abstraction for basic L3 forwarding between L2 Neutron networks and access to external networks via a NAT gateway.", 
                    "links": [], 
                    "name": "Neutron L3 Router", 
                    "updated": "2012-07-20T10:00:00-00:00"
                  }, 
                  {
                    "alias": "allowed-address-pairs", 
                    "description": "Provides allowed address pairs", 
                    "links": [], 
                    "name": "Allowed Address Pairs", 
                    "updated": "2013-07-23T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extra_dhcp_opt", 
                    "description": "Extra options configuration for DHCP. For example PXE boot options to DHCP clients can be specified (e.g. tftp-server, server-ip-address, bootfile-name)", 
                    "links": [], 
                    "name": "Neutron Extra DHCP opts", 
                    "updated": "2013-03-17T12:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas", 
                    "description": "Extension for LoadBalancing service", 
                    "links": [], 
                    "name": "LoadBalancing service", 
                    "updated": "2012-10-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extraroute", 
                    "description": "Extra routes configuration for L3 router", 
                    "links": [], 
                    "name": "Neutron Extra Route", 
                    "updated": "2013-02-01T10:00:00-00:00"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "203": {
            "examples": {
              "application/json": {
                "extensions": [
                  {
                    "alias": "service-type", 
                    "description": "API for retrieving service providers for Neutron advanced services", 
                    "links": [], 
                    "name": "Neutron Service Type Management", 
                    "updated": "2013-01-20T00:00:00-00:00"
                  }, 
                  {
                    "alias": "security-group", 
                    "description": "The security groups extension.", 
                    "links": [], 
                    "name": "security-group", 
                    "updated": "2012-10-05T10:00:00-00:00"
                  }, 
                  {
                    "alias": "l3_agent_scheduler", 
                    "description": "Schedule routers among l3 agents", 
                    "links": [], 
                    "name": "L3 Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas_agent_scheduler", 
                    "description": "Schedule pools among lbaas agents", 
                    "links": [], 
                    "name": "Loadbalancer Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "ext-gw-mode", 
                    "description": "Extension of the router abstraction for specifying whether SNAT should occur on the external gateway", 
                    "links": [], 
                    "name": "Neutron L3 Configurable external gateway mode", 
                    "updated": "2013-03-28T10:00:00-00:00"
                  }, 
                  {
                    "alias": "binding", 
                    "description": "Expose port bindings of a virtual port to external application", 
                    "links": [], 
                    "name": "Port Binding", 
                    "updated": "2014-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "provider", 
                    "description": "Expose mapping of virtual networks to physical networks", 
                    "links": [], 
                    "name": "Provider Network", 
                    "updated": "2012-09-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "agent", 
                    "description": "The agent management extension.", 
                    "links": [], 
                    "name": "agent", 
                    "updated": "2013-02-03T10:00:00-00:00"
                  }, 
                  {
                    "alias": "quotas", 
                    "description": "Expose functions for quotas management per tenant", 
                    "links": [], 
                    "name": "Quota management support", 
                    "updated": "2012-07-29T10:00:00-00:00"
                  }, 
                  {
                    "alias": "dhcp_agent_scheduler", 
                    "description": "Schedule networks among dhcp agents", 
                    "links": [], 
                    "name": "DHCP Agent Scheduler", 
                    "updated": "2013-02-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "multi-provider", 
                    "description": "Expose mapping of virtual networks to multiple physical networks", 
                    "links": [], 
                    "name": "Multi Provider Network", 
                    "updated": "2013-06-27T10:00:00-00:00"
                  }, 
                  {
                    "alias": "external-net", 
                    "description": "Adds external network attribute to network resource.", 
                    "links": [], 
                    "name": "Neutron external network", 
                    "updated": "2013-01-14T10:00:00-00:00"
                  }, 
                  {
                    "alias": "router", 
                    "description": "Router abstraction for basic L3 forwarding between L2 Neutron networks and access to external networks via a NAT gateway.", 
                    "links": [], 
                    "name": "Neutron L3 Router", 
                    "updated": "2012-07-20T10:00:00-00:00"
                  }, 
                  {
                    "alias": "allowed-address-pairs", 
                    "description": "Provides allowed address pairs", 
                    "links": [], 
                    "name": "Allowed Address Pairs", 
                    "updated": "2013-07-23T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extra_dhcp_opt", 
                    "description": "Extra options configuration for DHCP. For example PXE boot options to DHCP clients can be specified (e.g. tftp-server, server-ip-address, bootfile-name)", 
                    "links": [], 
                    "name": "Neutron Extra DHCP opts", 
                    "updated": "2013-03-17T12:00:00-00:00"
                  }, 
                  {
                    "alias": "lbaas", 
                    "description": "Extension for LoadBalancing service", 
                    "links": [], 
                    "name": "LoadBalancing service", 
                    "updated": "2012-10-07T10:00:00-00:00"
                  }, 
                  {
                    "alias": "extraroute", 
                    "description": "Extra routes configuration for L3 router", 
                    "links": [], 
                    "name": "Neutron Extra Route", 
                    "updated": "2013-02-01T10:00:00-00:00"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "tags": [
          "extensions"
        ], 
        "title": "List extensions"
      }
    ], 
    "/v2.0/extensions/{alias}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Gets detailed information for a specified extension.", 
        "examples": {}, 
        "id": "getExtension", 
        "method": "get", 
        "parameters": [
          {
            "description": "The alias of an extension.", 
            "format": "", 
            "in": "path", 
            "name": "alias", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "extension": {
                  "alias": "agent", 
                  "description": "The agent management extension.", 
                  "links": [], 
                  "name": "agent", 
                  "updated": "2013-02-03T10:00:00-00:00"
                }
              }
            }, 
            "headers": {}
          }, 
          "203": {
            "examples": {
              "application/json": {
                "extension": {
                  "alias": "agent", 
                  "description": "The agent management extension.", 
                  "links": [], 
                  "name": "agent", 
                  "updated": "2013-02-03T10:00:00-00:00"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "tags": [
          "extensions"
        ], 
        "title": "Get extension details"
      }
    ], 
    "/v2.0/floatingips": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings return only those floating IPs that are\nowned by the tenant who submits the request, unless an admin user\nsubmits the request.\n\nThis example request lists floating IPs in JSON format:\n\n::\n\n   GET /v2.0/floatingips\n   Accept: application/json\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. Additionally, you can filter results\nby using query string parameters. For information, see Filtering\nand Column Selection .", 
        "examples": {}, 
        "id": "listFloatingIps", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "floatingips": [
                  {
                    "fixed_ip_address": "10.0.0.3", 
                    "floating_ip_address": "172.24.4.228", 
                    "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                    "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                    "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                    "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                    "status": "ACTIVE", 
                    "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                  }, 
                  {
                    "fixed_ip_address": null, 
                    "floating_ip_address": "172.24.4.227", 
                    "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                    "id": "61cea855-49cb-4846-997d-801b70c71bdd", 
                    "port_id": null, 
                    "router_id": null, 
                    "status": "DOWN", 
                    "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists floating IPs that are accessible to the tenant who submits the request.", 
        "tags": [
          "layer3"
        ], 
        "title": "List floating IPs"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "To associate the floating IP with an internal port, specify the\nport ID attribute in the request body. If you do not specify a port\nID in the request, you can issue a PUT request instead of a POST\nrequest.\n\nDefault policy settings enable only administrative users to set\nfloating IP addresses and some non-administrative users might\nrequire a floating IP address. If you do not specify a floating IP\naddress in the request, the API automatically allocates one.\n\nBy default, this operation associates the floating IP address with\na single fixed IP address that is configured on an OpenStack\nNetworking port. If a port has multiple IP addresses, you must\nspecify the ``fixed_ip_address`` attribute in the request body to\nassociate a specific fixed IP address with the floating IP address.\n\nYou can create floating IPs on external networks only.\n\nYou must configure an IP address with the internal OpenStack\nNetworking port that is associated with the floating IP address.\n\nError codes:\n\n- ``400`` The operation returns this error code for one of these\n  reasons:\n - The specified network is not external, such as\n   ``router:external=False`` .\n\n - The specified internal OpenStack Networking port is not associated\n   with the floating IP address.\n\n - The requested floating IP address does not fall in the subnet\n   range for the external network.\n\n - The specified fixed IP address is not valid.\n\n\n- ``401`` The operation is not authorized.\n\n- ``404`` The specified port ID is not valid.\n\n- ``409`` The operation returns this error code for one of these\n  reasons:\n - The requested floating IP address is already in use.\n\n - The internal OpenStack Networking port and specified fixed IP\n   address are already associated with another floating IP.", 
        "examples": {
          "application/json": {
            "floatingip": {
              "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
              "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab"
            }
          }
        }, 
        "id": "createFloatingIp", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": "10.0.0.3", 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a floating IP, and, if you specify port information, associates the floating IP with an internal port.", 
        "tags": [
          "layer3"
        ], 
        "title": "Create floating IP"
      }
    ], 
    "/v2.0/floatingips/{floatingip_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Use the ``fields`` query parameter to control which fields are\nreturned in the response body. For information, see Filtering and\nColumn Selection .\n\nThis example request shows details for a floating IP in JSON\nformat. This example also filters the result by the\n``fixed_ip_address`` and ``floating_ip_address`` fields.\n\n::\n\n   GET /v2.0/floatingips/{floatingip_id}?fields=fixed_ip_address\n   &\n   fields=floating_ip_address\n   Accept: application/json", 
        "examples": {}, 
        "id": "showFloatingIp", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the floating IP.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": "10.0.0.3", 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": "ce705c24-c1ef-408a-bda3-7bbd946164ab", 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified floating IP.", 
        "tags": [
          "layer3"
        ], 
        "title": "Show floating IP details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The association process is the same as the process for the create\nfloating IP operation.\n\nTo disassociate a floating IP from a port, set the ``port_id``\nattribute to null or omit it from the request body.\n\nThis example updates a floating IP:\n\n::\n\n   PUT /v2.0/floatingips/{floatingip_id}\n   Accept: application/json\nDepending on the request body that you submit, this request\nassociates a port with or disassociates a port from a floating IP.", 
        "examples": {
          "application/json": {
            "floatingip": {
              "port_id": null
            }
          }
        }, 
        "id": "updateFloatingIp", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID of the floating IP.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "floatingip": {
                  "fixed_ip_address": null, 
                  "floating_ip_address": "172.24.4.228", 
                  "floating_network_id": "376da547-b977-4cfe-9cba-275c80debf57", 
                  "id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7", 
                  "port_id": null, 
                  "router_id": "d23abc8d-2991-4a55-ba98-2aaea84cc72f", 
                  "status": "ACTIVE", 
                  "tenant_id": "4969c491a3c74ee4af974e6d800c62de"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a floating IP and its association with an internal port.", 
        "tags": [
          "layer3"
        ], 
        "title": "Update floating IP"
      }, 
      {
        "consumes": [], 
        "description": "This example deletes a floating IP:\n\n::\n\n   DELETE /v2.0/floatingips/{floatingip_id}\n   Accept: application/json", 
        "examples": {}, 
        "id": "deleteFloatingIp", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID of the floating IP.", 
            "format": "", 
            "in": "path", 
            "name": "floatingip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a floating IP and, if present, its associated port.", 
        "tags": [
          "layer3"
        ], 
        "title": "Delete floating IP"
      }
    ], 
    "/v2.0/lb/health_monitors": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listHealthMonitors", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "health_monitors": [
                  {
                    "admin_state_up": true, 
                    "delay": 10, 
                    "id": "466c8345-28d8-4f84-a246-e04380b0461d", 
                    "max_retries": 1, 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                    "timeout": 1, 
                    "type": "PING"
                  }, 
                  {
                    "admin_state_up": true, 
                    "delay": 5, 
                    "expected_codes": "200", 
                    "http_method": "GET", 
                    "id": "5d4b5228-33b0-4e60-b225-9b727c1a20e7", 
                    "max_retries": 2, 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                    "timeout": 2, 
                    "type": "HTTP", 
                    "url_path": "/"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists health monitors.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List health monitors"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "healthmonitor": {
              "admin_state_up": true, 
              "delay": "1", 
              "expected_codes": "200,201,202", 
              "http_method": "GET", 
              "max_retries": 5, 
              "pool_id": "74aa2010-a59f-4d35-a436-60a6da882819", 
              "timeout": 1, 
              "type": "HTTP", 
              "url_path": "/index.html"
            }
          }
        }, 
        "id": "createHealthMonitor", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "healthmonitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                    }
                  ], 
                  "tenant_id": "6f3584d5754048a18e30685362b88411", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create a load balancer health monitor"
      }
    ], 
    "/v2.0/lb/health_monitors/{health_monitor_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showHealthMonitor", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "healthmonitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                    }
                  ], 
                  "tenant_id": "6f3584d5754048a18e30685362b88411", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show health monitor details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "health_monitor": {
              "delay": "3"
            }
          }
        }, 
        "id": "updateHealthMonitor", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "health_monitor": {
                  "admin_state_up": true, 
                  "delay": 5, 
                  "http_method": "GET", 
                  "id": "b05e44b5-81f9-4551-b474-711a722698f7", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "pool_id": "6e55751f-6ad4-4e53-b8d4-02e442cd21df", 
                      "status": "PENDING_CREATE", 
                      "status_description": null
                    }
                  ], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869", 
                  "timeout": 1, 
                  "type": "PING"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update health monitor"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteHealthMonitor", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified load balancer health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Delete health monitor"
      }
    ], 
    "/v2.0/lb/members": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listMembers", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "members": [
                  {
                    "address": "10.0.0.4", 
                    "admin_state_up": true, 
                    "id": "701b531b-111a-4f21-ad85-4795b7b12af6", 
                    "pool_id": "72741b06-df4d-4715-b142-276b6bce75ab", 
                    "protocol_port": 80, 
                    "status": "ACTIVE", 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                    "weight": 1
                  }, 
                  {
                    "address": "10.0.0.3", 
                    "admin_state_up": true, 
                    "id": "beb53b4d-230b-4abd-8118-575b8fa006ef", 
                    "pool_id": "72741b06-df4d-4715-b142-276b6bce75ab", 
                    "protocol_port": 80, 
                    "status": "ACTIVE", 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                    "weight": 1
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists members.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List members"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "member": {
              "address": "10.0.0.8", 
              "admin_state_up": true, 
              "protocol_port": "80", 
              "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
              "weight": "1"
            }
          }
        }, 
        "id": "createMember", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.8", 
                  "admin_state_up": true, 
                  "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                  "protocol_port": 80, 
                  "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create a load balancer member"
      }
    ], 
    "/v2.0/lb/members/{member_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showMember", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.8", 
                  "admin_state_up": true, 
                  "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                  "protocol_port": 80, 
                  "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified member.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show member details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "member": {
              "admin_state_up": false
            }
          }
        }, 
        "id": "updateMember", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.5", 
                  "admin_state_up": false, 
                  "id": "48a471ea-64f1-4eb6-9be7-dae6bbe40a0f", 
                  "pool_id": "7803631d-f181-4500-b3a2-1b68ba2a75fd", 
                  "protocol_port": 8080, 
                  "status": "PENDING_UPDATE", 
                  "status_description": null, 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update member"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteMember", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the member.", 
            "format": "", 
            "in": "path", 
            "name": "member_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified load balancer member.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Delete member"
      }
    ], 
    "/v2.0/lb/pools": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listPools", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pools": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "health_monitors": [
                      "466c8345-28d8-4f84-a246-e04380b0461d", 
                      "5d4b5228-33b0-4e60-b225-9b727c1a20e7"
                    ], 
                    "id": "72741b06-df4d-4715-b142-276b6bce75ab", 
                    "lb_method": "ROUND_ROBIN", 
                    "members": [
                      "701b531b-111a-4f21-ad85-4795b7b12af6", 
                      "beb53b4d-230b-4abd-8118-575b8fa006ef"
                    ], 
                    "name": "app_pool", 
                    "protocol": "HTTP", 
                    "status": "ACTIVE", 
                    "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                    "vip_id": "4ec89087-d057-4e2c-911f-60a3b47ee304"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists pools.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List pools"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "pool": {
              "admin_state_up": true, 
              "description": "simple pool", 
              "lb_algorithm": "ROUND_ROBIN", 
              "listener_id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
              "name": "pool1", 
              "protocol": "HTTP", 
              "session_persistence": {
                "cookie_name": "my_cookie", 
                "type": "APP_COOKIE"
              }
            }
          }
        }, 
        "id": "createPool", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "healthmonitor_id": null, 
                  "id": "12ff63af-4127-4074-a251-bcb2ecc53ebe", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "listeners": [
                    {
                      "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829"
                    }
                  ], 
                  "members": [], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "session_persistence": {
                    "cookie_name": "my_cookie", 
                    "type": "APP_COOKIE"
                  }, 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create a load balancer pool"
      }
    ], 
    "/v2.0/lb/pools/{pool_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showPool", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "healthmonitor_id": null, 
                  "id": "4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "listeners": [
                    {
                      "id": "35cb8516-1173-4035-8dae-0dae3453f37f"
                    }
                  ], 
                  "members": [], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show pool details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "pool": {
              "name": "SuperPool"
            }
          }
        }, 
        "id": "updatePool", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "", 
                  "health_monitors": [], 
                  "id": "61b1f87a-7a21-4ad3-9dda-7f81d249944f", 
                  "lb_method": "ROUND_ROBIN", 
                  "members": [], 
                  "name": "SuperPool", 
                  "protocol": "TCP", 
                  "status": "PENDING_UPDATE", 
                  "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                  "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea", 
                  "vip_id": null
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update pool"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deletePool", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified load balancer pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Delete pool"
      }
    ], 
    "/v2.0/lb/pools/{pool_id}/health_monitors": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "health_monitor": {
              "id": "b624decf-d5d3-4c66-9a3d-f047e7786181"
            }
          }
        }, 
        "id": "associateHealthMonitor", 
        "method": "post", 
        "parameters": [
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "health_monitor": {}
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Associates a health monitor with a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Associate health monitor with pool"
      }
    ], 
    "/v2.0/lb/pools/{pool_id}/health_monitors/{health_monitor_id}": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "disassociateHealthMonitor", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the health monitor.", 
            "format": "", 
            "in": "path", 
            "name": "health_monitor_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "The UUID for the pool.", 
            "format": "", 
            "in": "path", 
            "name": "pool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Disassociates a specified health monitor from a pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Disassociate health monitor from pool"
      }
    ], 
    "/v2.0/lb/vips": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listVIPs", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vips": [
                  {
                    "address": "10.0.0.10", 
                    "admin_state_up": true, 
                    "connection_limit": 1000, 
                    "description": "", 
                    "id": "4ec89087-d057-4e2c-911f-60a3b47ee304", 
                    "name": "my-vip", 
                    "pool_id": "72741b06-df4d-4715-b142-276b6bce75ab", 
                    "port_id": "b5a743d6-056b-468b-862d-fb13a9aa694e", 
                    "protocol": "HTTP", 
                    "protocol_port": 80, 
                    "session_persistence": {
                      "cookie_name": "MyAppCookie", 
                      "type": "APP_COOKIE"
                    }, 
                    "status": "ACTIVE", 
                    "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                    "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists VIPs.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List VIPs"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "vip": {
              "admin_state_up": true, 
              "name": "NewVip", 
              "pool_id": "61b1f87a-7a21-4ad3-9dda-7f81d249944f", 
              "protocol": "HTTP", 
              "protocol_port": "80", 
              "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861"
            }
          }
        }, 
        "id": "createVIP", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.11", 
                  "admin_state_up": true, 
                  "connection_limit": -1, 
                  "description": "", 
                  "id": "c987d2be-9a3c-4ac9-a046-e8716b1350e2", 
                  "name": "NewVip", 
                  "pool_id": "61b1f87a-7a21-4ad3-9dda-7f81d249944f", 
                  "port_id": "f7e6fe6a-b8b5-43a8-8215-73456b32e0f5", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "status": "PENDING_CREATE", 
                  "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                  "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create a load balancer VIP"
      }
    ], 
    "/v2.0/lb/vips/{vip_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showVIP", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.10", 
                  "admin_state_up": true, 
                  "connection_limit": 1000, 
                  "description": "", 
                  "id": "4ec89087-d057-4e2c-911f-60a3b47ee304", 
                  "name": "my-vip", 
                  "pool_id": "72741b06-df4d-4715-b142-276b6bce75ab", 
                  "port_id": "b5a743d6-056b-468b-862d-fb13a9aa694e", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "session_persistence": {
                    "cookie_name": "MyAppCookie", 
                    "type": "APP_COOKIE"
                  }, 
                  "status": "ACTIVE", 
                  "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                  "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified VIP.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show VIP details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "vip": {
              "connection_limit": "1000"
            }
          }
        }, 
        "id": "updateVIP", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vip": {
                  "address": "10.0.0.11", 
                  "admin_state_up": true, 
                  "connection_limit": 1000, 
                  "description": "", 
                  "id": "c987d2be-9a3c-4ac9-a046-e8716b1350e2", 
                  "name": "NewVip", 
                  "pool_id": "61b1f87a-7a21-4ad3-9dda-7f81d249944f", 
                  "port_id": "f7e6fe6a-b8b5-43a8-8215-73456b32e0f5", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "status": "PENDING_UPDATE", 
                  "subnet_id": "8032909d-47a1-4715-90af-5153ffe39861", 
                  "tenant_id": "83657cfcdfe44cd5920adaf26c48ceea"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update VIP"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteVIP", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the VIP.", 
            "format": "", 
            "in": "path", 
            "name": "vip_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified load balancer VIP.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Delete VIP"
      }
    ], 
    "/v2.0/lbaas/health_monitors": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new health monitor based on the\nconfiguration defined in the request object. After the request is\nvalidated and progress has started on the provisioning process, a\nresponse object is returned. The object contains a unique\nidentifier.\n\nThe caller of this operation must specify these health monitor\nattributes, at a minimum:\n\n- ``tenant_id`` . Only required if the caller has an administrative\n  role and wants to create a health monitor for another tenant.\n\n- ``type`` . The type of health monitor. Must be one of TCP, HTTP,\n  HTTPS\n\n- ``delay`` . The interval in seconds between health checks.\n\n- ``timeout`` . The time in seconds that a health check times out.\n\n- ``max_retries`` . Number of failed health checks before marked as\n  OFFLINE.\n\n- ``pool_id`` . The pool that this health monitor will monitor.\n\nSome attributes will receive default values if not specified in the\nrequest and are only useful when health monitor type of HTTP(S) is\nspecified:\n\n- ``http_method`` . The default is GET.\n\n- ``url_path`` . The default is ``/`` .\n\n- ``expected_codes`` . The expected http status codes to get from a\n  successful health check. Default is 200.\n\n- ``admin_state_up`` . The default is true.\n\nIf the request cannot be fulfilled due to insufficient data or data\nthat is not valid, an HTTP 400 (Bad Request) error response is\nreturned with information regarding the nature of the failure in\nthe response body. Failures in the validation process are non-\nrecoverable and require the caller to correct the cause of the\nfailure and POST the request again.\n\nYou can configure all documented features of the health monitor at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nUsers with an administrative role can create health monitors on\nbehalf of other tenants by specifying a ``tenant_id`` attribute\ndifferent than their own.\n\nTo update a health monitor, the load balancer to which it is being\nattached must have an ACTIVE provisioning status.\n\nExample: Create a health monitor", 
        "examples": {
          "application/json": {
            "healthmonitor": {
              "admin_state_up": true, 
              "delay": "1", 
              "expected_codes": "200,201,202", 
              "http_method": "GET", 
              "max_retries": 5, 
              "pool_id": "74aa2010-a59f-4d35-a436-60a6da882819", 
              "timeout": 1, 
              "type": "HTTP", 
              "url_path": "/index.html"
            }
          }
        }, 
        "id": "createHealthMonitor", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createHealthMonitor"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "healthmonitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                    }
                  ], 
                  "tenant_id": "6f3584d5754048a18e30685362b88411", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create health monitor"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all health monitors associated with your\ntenant account.\n\nThis operation returns a list, which might be empty, each element\nin the list is a health monitor that can contain the following\nattributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``type``\n\n- ``delay``\n\n- ``timeout``\n\n- ``max_retries``\n\n- ``http_method``\n\n- ``url_path``\n\n- ``expected_codes``\n\n- ``admin_state_up``\n\n- ``pool_id``\n\n- ``pools``\n\nExample: List health monitors", 
        "examples": {}, 
        "id": "listHealthMonitors", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "healthmonitors": [
                  {
                    "admin_state_up": true, 
                    "delay": 1, 
                    "expected_codes": "200,201,202", 
                    "http_method": "GET", 
                    "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                    "max_retries": 5, 
                    "pools": [
                      {
                        "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                      }
                    ], 
                    "tenant_id": "6f3584d5754048a18e30685362b88411", 
                    "timeout": 1, 
                    "type": "HTTP", 
                    "url_path": "/index.html"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists health monitors.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List health monitors"
      }
    ], 
    "/v2.0/lbaas/health_monitors/{health_monitor_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a health monitor object identified by\n``health_monitor_id`` . If the user is not an administrative user\nand the health monitor object does not belong to her tenant\naccount, the service returns the HTTP ``Forbidden (403)`` response\ncode.\n\nIf this operation succeeds, it returns a health monitor element\nthat can contain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``type``\n\n- ``delay``\n\n- ``timeout``\n\n- ``max_retries``\n\n- ``http_method``\n\n- ``url_path``\n\n- ``expected_codes``\n\n- ``admin_state_up``\n\n- ``pool_id``\n\n- ``pools``\n\nExample: Show health monitor details", 
        "examples": {}, 
        "id": "showHealthMonitor", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "healthmonitor": {
                  "admin_state_up": true, 
                  "delay": 1, 
                  "expected_codes": "200,201,202", 
                  "http_method": "GET", 
                  "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                  "max_retries": 5, 
                  "pools": [
                    {
                      "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                    }
                  ], 
                  "tenant_id": "6f3584d5754048a18e30685362b88411", 
                  "timeout": 1, 
                  "type": "HTTP", 
                  "url_path": "/index.html"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show health monitor details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of the specified health\nmonitor. Upon successful validation of the request, the service\nreturns the HTTP ``Accepted (202)`` response code.\n\nThe update operation enables you to change one or more health\nmonitor attributes:\n\n- ``delay``\n\n- ``timeout``\n\n- ``max_retries``\n\n- ``http_method``\n\n- ``url_path``\n\n- ``expected_codes``\n\n- ``admin_state_up``\n\nNote: The health monitor ID, ``tenant_id`` , ``pool_id`` , and type\nare immutable attributes and cannot be updated. If you specify an\nunsupported attribute, the service returns the HTTP ``Immutable\n(422)`` response code.", 
        "examples": {
          "application/json": {
            "healthmonitor": {
              "admin_state_up": false, 
              "delay": "2", 
              "expected_codes": "200", 
              "http_method": "POST", 
              "max_retries": 2, 
              "timeout": 2, 
              "url_path": "/page.html"
            }
          }
        }, 
        "id": "updateHealthMonitor", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateHealthMonitor"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "healthmonitor": {
                  "admin_state_up": false, 
                  "delay": 2, 
                  "expected_codes": "200", 
                  "http_method": "POST", 
                  "id": "0a9ac99d-0a09-4b18-8499-a0796850279a", 
                  "max_retries": 2, 
                  "pools": [
                    {
                      "id": "74aa2010-a59f-4d35-a436-60a6da882819"
                    }
                  ], 
                  "tenant_id": "6f3584d5754048a18e30685362b88411", 
                  "timeout": 2, 
                  "type": "HTTP", 
                  "url_path": "/page.html"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update health monitor"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes the specified health monitor and its\nassociated configuration from the tenant account. Any and all\nconfiguration data is immediately purged and cannot be recovered.\n\nYou cannot delete a health monitor if the attached load balancer\ndoes not have a ``provisioning_status`` value of ``ACTIVE`` .\n\nExample: Delete a health monitor", 
        "examples": {}, 
        "id": "deleteHealthMonitor", 
        "method": "delete", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified health monitor.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Remove health monitor"
      }
    ], 
    "/v2.0/lbaas/listeners": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new listener based on the configuration\ndefined in the request object. After the request is validated and\nthe provisioning process begins, a response object is returned. The\nobject contains a unique identifier.\n\nAt a minimum, you must specify these listener attributes:\n\n- ``tenant_id`` . Required only if the caller has an administrative\n  role and wants to create a listener for another tenant.\n\n- ``loadbalancer_id`` . The load balancer on which this listener is\n  provisioned. A tenant can only create listeners on load balancers\n  authorized by policy. For example, her own load balancers.\n\n- ``description`` . The load balancer description.\n\n- ``protocol`` . The protocol for which the front end listens. Must\n  be TCP, HTTP, or HTTPS.\n\n- ``protocol_port`` . The port on which the front end listens. Must\n  be an integer from 1 to 65535.\n\n- ``default_tls_container_ref`` . The reference to a container that\n  holds TLS secrets. If you also specify ``sni_container_refs`` ,\n  this container is the default.\n\n- ``sni_container_refs`` . A list of references to containers that\n  hold TLS secrets that are used for Server Name Indication (SNI).\n\nSome attributes receive default values if not specified in the\nrequest:\n\n- ``admin_state_up`` . The default is ``true`` .\n\n- ``name`` . The default is an empty string.\n\n- ``description`` . The default is an empty string.\n\n- ``connection_limit`` . The default is ``-1`` , which indicates an\n  infinite limit.\n\nIf the request cannot be fulfilled due to insufficient or invalid\ndata, the service returns the HTTP ``Bad Request (400)`` response\ncode with information about the failure in the response body.\nValidation errors require that you correct the error and submit the\nrequest again.\n\nYou can configure all documented features of the listener at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nUsers with an administrative role can create listeners on behalf of\nother tenants by specifying a ``tenant_id`` attribute different\nthan their own.\n\nA listener cannot be updated if the load balancer that it is\nattempting to be attached to does not have a\n``provisioning_status`` of ``ACTIVE`` .\n\nExample: Create a listener", 
        "examples": {
          "application/json": {
            "listener": {
              "admin_state_up": true, 
              "connection_limit": 100, 
              "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
              "description": "listener one", 
              "loadbalancer_id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
              "name": "listener1", 
              "protocol": "HTTP", 
              "protocol_port": "80", 
              "sni_container_refs": [
                "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
              ]
            }
          }
        }, 
        "id": "createListener", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createListener"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": true, 
                  "connection_limit": 100, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "listener one", 
                  "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
                  "loadbalancers": [
                    {
                      "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c"
                    }
                  ], 
                  "name": "listener1", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a listener.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create listener"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all listeners that are associated with your\ntenant account.\n\nThis operation returns a list, which might be empty. Each list\nelement is a listener that can contain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``protocol``\n\n- ``protocol_port``\n\n- ``connection_limit``\n\n- ``default_pool_id``\n\n- ``admin_state_up``\n\n- ``loadbalancers``\n\n- ``default_tls_container_ref``\n\n- ``sni_container_refs``\n\nExample: List listeners", 
        "examples": {}, 
        "id": "listListeners", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "listeners": [
                  {
                    "admin_state_up": true, 
                    "connection_limit": 100, 
                    "default_pool_id": null, 
                    "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                    "description": "", 
                    "id": "35cb8516-1173-4035-8dae-0dae3453f37f", 
                    "loadbalancers": [
                      {
                        "id": "a9729389-6147-41a3-ab22-a24aed8692b2"
                      }
                    ], 
                    "name": "", 
                    "protocol": "HTTP", 
                    "protocol_port": 80, 
                    "sni_container_refs": [
                      "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                      "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                    ], 
                    "tenant_id": "3e4d8bec50a845fcb09e03a4375c691d"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists listeners.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List listeners"
      }
    ], 
    "/v2.0/lbaas/listeners/{listener_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a listener object identified by\n``listener_id`` . If the user is not an administrative user and the\nlistener object does not belong to her tenant account, the call\nreturns the HTTP ``Forbidden (403)`` response code.\n\nIf this operation succeeds, it returns a listener element that can\ncontain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``protocol``\n\n- ``protocol_port``\n\n- ``connection_limit``\n\n- ``default_pool_id``\n\n- ``admin_state_up``\n\n- ``loadbalancers``\n\n- ``default_tls_container_ref``\n\n- ``sni_container_refs``\n\nExample: Show listener details", 
        "examples": {}, 
        "id": "showListener", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": true, 
                  "connection_limit": 100, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "", 
                  "id": "35cb8516-1173-4035-8dae-0dae3453f37f", 
                  "loadbalancers": [
                    {
                      "id": "a9729389-6147-41a3-ab22-a24aed8692b2"
                    }
                  ], 
                  "name": "", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "3e4d8bec50a845fcb09e03a4375c691d"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified listener.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show listener details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of a specified listener. Upon\nsuccessful validation of the request, the service returns the HTTP\n``Accepted (202)`` response code.\n\nThe update operation enables the caller to change one or more of\nthe following listener attributes:\n\n- ``name``\n\n- ``description``\n\n- ``admin_state_up``\n\n- ``connection_limit``\n\n- ``default_tls_container_ref``\n\n- ``sni_container_refs``\n\nExample: Update a listener\n\nNote: You cannot update the ``listener_id`` , ``tenant_id`` ,\n``loadbalancer_id`` , ``loadbalancers`` , ``default_pool_id`` ,\n``protocol`` , and ``protocol_port`` listener attributes.\nAttempting to update an immutable attribute results in the HTTP\n``Immutable (422)`` response code.\n\nNote: You cannot update a listener if the load balancer to which\nthe listener is attached does not have a ``provisioning_status`` of\n``ACTIVE`` .", 
        "examples": {
          "application/json": {
            "listener": {
              "admin_state_up": false, 
              "connection_limit": 200, 
              "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
              "description": "listener two", 
              "name": "listener2", 
              "sni_container_refs": [
                "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
              ]
            }
          }
        }, 
        "id": "updateListener", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateListener"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "listener": {
                  "admin_state_up": false, 
                  "connection_limit": 200, 
                  "default_pool_id": null, 
                  "default_tls_container_ref": "https://barbican.endpoint/containers/a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "description": "listener two", 
                  "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
                  "loadbalancers": [
                    {
                      "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c"
                    }
                  ], 
                  "name": "listener2", 
                  "protocol": "HTTP", 
                  "protocol_port": 80, 
                  "sni_container_refs": [
                    "https://barbican.endpoint/containers/b36c20d0-18e9-42ce-88fd-82a35977ee8d", 
                    "https://barbican.endpoint/containers/c36c20d0-18e9-42ce-88fd-82a35977ee8e"
                  ], 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified listener.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update listener"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes a specified listener and its associated\nconfiguration from the tenant account. Any and all configuration\ndata is immediately purged and cannot be recovered.\n\nYou cannot delete a listener if the load balancer to which it is\nattached does not have a ``provisioning_status`` of ``ACTIVE`` .\n\nExample: Delete a listener", 
        "examples": {}, 
        "id": "deleteListener", 
        "method": "delete", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified listener.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Remove listener"
      }
    ], 
    "/v2.0/lbaas/loadbalancers": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Lists all load balancers that are associated with your tenant\naccount.\n\nThis operation returns a list, which might be empty. Each element\nin the list is a load balancer that can contain the following\nattributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``vip_subnet_id``\n\n- ``vip_address``\n\n- ``admin_state_up``\n\n- ``listeners``\n\n- ``provisioning_status``\n\n- ``operating_status``", 
        "examples": {}, 
        "id": "listLoadBalancers", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "loadbalancers": [
                  {
                    "admin_state_up": true, 
                    "description": "A very simple example load balancer.", 
                    "id": "3b98602c-3cfe-4f91-bfa4-c3a11c9e7fe0", 
                    "name": "Example LB", 
                    "status": "ACTIVE", 
                    "tenant_id": "783b31af-6635-48b2-a807-091d9973e3a9"
                  }, 
                  {
                    "admin_state_up": true, 
                    "description": "A very simple example load balancer.", 
                    "id": "c617c538-daa5-4ead-be88-59521d8745a7", 
                    "name": "Example LB", 
                    "status": "ACTIVE", 
                    "tenant_id": "783b31af-6635-48b2-a807-091d9973e3a9"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists load balancers.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List load balancers"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new load balancer based on the\nconfiguration defined in the request object. After the request is\nvalidated and progress has started on the provisioning process, a\nresponse object is returned. The object contains a unique\nidentifier and the status of provisioning the load balancer.\n\nThe ``provisioning_status`` of the load balancer in the response\ncan have one of the following values: ``ACTIVE`` ,\n``PENDING_CREATE`` , or ``ERROR`` .\n\nIf the status is ``PENDING_CREATE`` , the caller can view the\nprogress of the provisioning operation by performing a GET on\n``/lbaas/loadbalancers/loadbalancer_id`` . When the status of the\nload balancer changes to ``ACTIVE`` , the load balancer was\nsuccessfully provisioned and is operational for traffic handling.\n\nIf the request cannot be fulfilled due to insufficient or invalid\ndata, the service returns the HTTP ``Bad Request (400)`` response\ncode with information about the failure in the response body.\nValidation errors require that you correct the error and submit the\nrequest again.\n\nYou can configure all documented features of the load balancer at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nUsers with an administrative role can create load balancers on\nbehalf of other tenants by specifying a ``tenant_id`` attribute\ndifferent than their own.\n\n**Example: Create a load balancer**\n\n- ``tenant_id`` . only required if the caller has an administrative\n  role and wants to create a load balancer for another tenant.\n\n- ``vip_subnet_id`` . The network on which to allocate the VIP\n  address for the load balancer. A tenant can only create load\n  balancer VIPs on networks that are authorized by the policy, such\n  as her own networks or shared or provider networks.\n\nSome attributes receive default values if not specified in the\nrequest:\n\n- ``admin_state_up`` . The default is true.\n\n- ``name`` . The default is an empty string.\n\n- ``description`` . The default is an empty string.\n\nIf the request cannot be fulfilled due to insufficient data or data\nthat is not valid, the service returns the HTTP ``Bad Request\n(400)`` response code with information about the failure in the\nresponse body. Validation errors require that you correct the error\nand submit the request again.\n\nYou can configure all documented features of the load balancer at\ncreation time by specifying the additional elements or attributes\nin the request.\n\nUsers with an administrative role can create load balancers on\nbehalf of other tenants by specifying a ``tenant_id`` attribute\nthat is different than their own.\n\nA user can supply a ``vip_address`` field if she owns the subnet on\nwhich the load balancer's VIP will be created. If a ``vip_address``\nis not specified in the payload, the LBaaS service allocates one\nfrom the load balancer VIP's subnet.\n\nExample: Create a load balancer", 
        "examples": {
          "application/json": {
            "loadbalancer": {
              "admin_state_up": true, 
              "description": "simple lb", 
              "name": "loadbalancer1", 
              "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
              "vip_address": "10.0.0.4", 
              "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
            }
          }
        }, 
        "id": "createLoadBalancer", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createLoadBalancer"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": true, 
                  "description": "simple lb", 
                  "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "listeners": [], 
                  "name": "loadbalancer1", 
                  "operating_status": "ONLINE", 
                  "provisioning_status": "ACTIVE", 
                  "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
                  "vip_address": "10.0.0.4", 
                  "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create load balancer"
      }
    ], 
    "/v2.0/lbaas/loadbalancers/{loadbalancer_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a load balancer object identified by\n``loadbalancer_id`` . If the user is not an administrative user and\nthe load balancer object does not belong to her tenant account, the\nservice returns the HTTP ``Forbidden (403)`` response code.\n\nIf this operation succeeds, it returns a load balancer element that\ncan contain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``vip_subnet_id``\n\n- ``vip_address``\n\n- ``admin_state_up``\n\n- ``listeners``\n\n- ``provisioning_status``\n\n- ``operating_status``\n\n**Example: Show load balancer details**", 
        "examples": {}, 
        "id": "showLoadBalancer", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": true, 
                  "description": "A very simple example load balancer.", 
                  "id": "8992a43f-83af-4b49-9afd-c2bfbd82d7d7", 
                  "name": "Example LB", 
                  "status": "ACTIVE", 
                  "tenant_id": "7725fe12-1c14-4f45-ba8e-44bf01763578", 
                  "vip_address": "1.2.3.4", 
                  "vip_subnet_id": "SUBNET_ID"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show load balancer details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of the specified load\nbalancer. Upon successful validation of the request, the service\nreturns the ``Accepted (202)`` response code. A caller should check\nthat the load balancer ``provisioning_status`` has changed to\n``ACTIVE`` to confirm that the update has taken effect. If the load\nbalancer ``provisioning_status`` is ``PENDING_UPDATE`` , the caller\ncan poll the load balancer object by using a GET operation to wait\nfor the changes to be applied.\n\nThe update operation enables you to change one or more of the\nfollowing load balancer attributes:\n\n- ``name``\n\n- ``description``\n\n- ``admin_state_up``\n\nThis operation returns the updated load balancer object. The\n``provisioning_status`` value can be ``ACTIVE`` ,\n``PENDING_UPDATE`` , or ``ERROR`` .", 
        "examples": {
          "application/json": {
            "loadbalancer": {
              "admin_state_up": false, 
              "description": "simple lb2", 
              "name": "loadbalancer2"
            }
          }
        }, 
        "id": "updateLoadBalancer", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateLoadBalancer"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "loadbalancer": {
                  "admin_state_up": false, 
                  "description": "simple lb2", 
                  "id": "a36c20d0-18e9-42ce-88fd-82a35977ee8c", 
                  "listeners": [], 
                  "name": "loadbalancer2", 
                  "operating_status": "ONLINE", 
                  "provisioning_status": "PENDING_UPDATE", 
                  "tenant_id": "b7c1a69e88bf4b21a8148f787aef2081", 
                  "vip_address": "10.0.0.4", 
                  "vip_subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update load balancer"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes the specified load balancer and its\nassociated configuration from the tenant account. Any and all\nconfiguration data is immediately purged and cannot be recovered.\n\nExample: Delete a load balancer", 
        "examples": {}, 
        "id": "deleteLoadBalancer", 
        "method": "delete", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified load balancer.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Remove load balancer"
      }
    ], 
    "/v2.0/lbaas/pools": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new pool based on the configuration\ndefined in the request object. After the request is validated and\nprogress has started on the provisioning process, a response object\nis returned. The object contains a unique identifier.\n\nThe caller of this operation must specify these pool attributes, at\na minimum:\n\n- ``tenant_id`` . Required only if the caller has an administrative\n  role and wants to create a pool for another tenant.\n\n- ``protocol`` . The protocol for which this pool and its members\n  listen. A valid value is TCP, HTTP, or HTTPS.\n\n- ``lb_method`` . The load-balancer algorithm, which is round-robin,\n  least-connections, and so on, that is used to distribute traffic\n  to the pool members. This value, which must be supported, is\n  dependent on the load-balancer provider. The round-robin\n  algorithm must be supported.\n\n- ``protocol_port`` . The port on which the front end listens. Must\n  be an integer from 1 to 65535.\n\n- ``listener_id`` . The ID of the listener in which this pool\n  becomes the default pool. Each listener can have only one default\n  pool.\n\nSome attributes receive default values if not specified in the\nrequest:\n\n- ``admin_state_up`` . The default is ``true`` .\n\n- ``name`` . The default is an empty string.\n\n- ``description`` . The default is an empty string.\n\n- ``session_persistence`` . The default is an empty dictionary.\n\nIf the request cannot be fulfilled due to insufficient or invalid\ndata, the service returns the HTTP ``Bad Request (400)`` response\ncode with information about the failure in the response body.\nValidation errors require that you correct the error and submit the\nrequest again.\n\nUsers can configure all documented features at creation time by\nproviding the additional elements or attributes in the request.\n\nUsers with an administrative role can create pools on behalf of\nother tenants by specifying a ``tenant_id`` attribute that is\ndifferent than their own.\n\nYou cannot update a pool if the load balancer to which it is\nattempting to be attached does not have a ``provisioning_status``\nof ``ACTIVE`` .\n\nExample: Create a pool", 
        "examples": {
          "application/json": {
            "pool": {
              "admin_state_up": true, 
              "description": "simple pool", 
              "lb_algorithm": "ROUND_ROBIN", 
              "listener_id": "39de4d56-d663-46e5-85a1-5b9d5fa17829", 
              "name": "pool1", 
              "protocol": "HTTP", 
              "session_persistence": {
                "cookie_name": "my_cookie", 
                "type": "APP_COOKIE"
              }
            }
          }
        }, 
        "id": "createPool", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createPool"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "healthmonitor_id": null, 
                  "id": "12ff63af-4127-4074-a251-bcb2ecc53ebe", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "listeners": [
                    {
                      "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829"
                    }
                  ], 
                  "members": [], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "session_persistence": {
                    "cookie_name": "my_cookie", 
                    "type": "APP_COOKIE"
                  }, 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Create pool"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all pools that are associated with your tenant\naccount.\n\nThis operation returns a response body that contains a list, which\nmight be empty. Each pool element in the list can contain the\nfollowing attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``protocol``\n\n- ``lb_method``\n\n- ``session_persistence``\n\n- ``admin_state_up``\n\n- ``listeners``\n\n- ``members``\n\n- ``health_monitor_id``\n\nExample: List pools", 
        "examples": {}, 
        "id": "listPools", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pools": [
                  {
                    "admin_state_up": true, 
                    "description": "simple pool", 
                    "healthmonitor_id": null, 
                    "id": "4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5", 
                    "lb_algorithm": "ROUND_ROBIN", 
                    "listeners": [
                      {
                        "id": "35cb8516-1173-4035-8dae-0dae3453f37f"
                      }
                    ], 
                    "members": [], 
                    "name": "pool1", 
                    "protocol": "HTTP", 
                    "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists pools.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List pools"
      }
    ], 
    "/v2.0/lbaas/pools/{pool_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a pool object identified by ``pool_id`` . If\nthe user is not an administrative user and the pool object does not\nbelong to her tenant account, the call returns the HTTP ``Forbidden\n(403)`` response code.\n\nIf this operation succeeds, it returns a ``pool`` element that can\ncontain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``name``\n\n- ``description``\n\n- ``protocol``\n\n- ``lb_method``\n\n- ``session_persistence``\n\n- ``admin_state_up``\n\n- ``listeners``\n\n- ``members``\n\n- ``health_monitor_id``\n\nExample: Show pool details", 
        "examples": {}, 
        "id": "showPool", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": true, 
                  "description": "simple pool", 
                  "healthmonitor_id": null, 
                  "id": "4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5", 
                  "lb_algorithm": "ROUND_ROBIN", 
                  "listeners": [
                    {
                      "id": "35cb8516-1173-4035-8dae-0dae3453f37f"
                    }
                  ], 
                  "members": [], 
                  "name": "pool1", 
                  "protocol": "HTTP", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show pool details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of the specified pool. Upon\nsuccessful validation of the request, the service returns the HTTP\n``Accepted (202)`` response code.\n\nThe update operation enables the caller to change one or more of\nthe following pool attributes:\n\n- ``name``\n\n- ``description``\n\n- ``admin_state_up``\n\n- ``lb_method``\n\n- ``session_persistence``\n\nNote: You cannot update the pool ID, ``tenant_id`` ,\n``listener_id`` , ``listeners`` , ``health_monitor_id`` ,\n``protocol`` , and ``members`` immutable attributes. If you try to\nupdate any of these attributes, the service returns the HTTP\n``Immutable (422)`` response code.\n\nNote: You cannot update a pool if the load balancer to which it is\nattached does not have a ``provisioning_status`` of ``ACTIVE`` .\n\nExample: Update a pool", 
        "examples": {
          "application/json": {
            "pool": {
              "admin_state_up": false, 
              "description": "pool two", 
              "lb_algorithm": "LEAST_CONNECTIONS", 
              "name": "pool2", 
              "session_persistence": {
                "type": "HTTP_COOKIE"
              }
            }
          }
        }, 
        "id": "updatePool", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updatePool"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "pool": {
                  "admin_state_up": false, 
                  "description": "pool two", 
                  "healthmonitor_id": null, 
                  "id": "12ff63af-4127-4074-a251-bcb2ecc53ebe", 
                  "lb_algorithm": "LEAST_CONNECTIONS", 
                  "listeners": [
                    {
                      "id": "39de4d56-d663-46e5-85a1-5b9d5fa17829"
                    }
                  ], 
                  "members": [], 
                  "name": "pool2", 
                  "protocol": "HTTP", 
                  "session_persistence": {
                    "cookie_name": null, 
                    "type": "HTTP_COOKIE"
                  }, 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update pool"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes a specified pool and its associated\nconfiguration from the tenant account. Any and all configuration\ndata is immediately purged and cannot be recovered.\n\nYou cannot delete a pool if the load balancer to which it is\nattached does not have a ``provisioning_status`` of ``ACTIVE`` .\n\nExample: Delete a pool", 
        "examples": {}, 
        "id": "deletePool", 
        "method": "delete", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Remove pool"
      }
    ], 
    "/v2.0/lbaas/pools/{pool_id}/members": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation provisions a new member and adds it to a pool based\non the configuration defined in the request object. After the\nrequest is validated and progress has started on the provisioning\nprocess, a response object is returned. The object contains a\nunique identifier.\n\nAt a minimum, you must specify the following pool attributes:\n\n- ``tenant_id`` . Only required if the caller has an administrative\n  role and wants to create a pool for another tenant.\n\n- ``address`` . The IP address of the member to receive traffic from\n  the load balancer.\n\n- ``protocol_port`` The port on which the member is listening to\n  receive traffic.\n\nSome attributes receive default values if not specified in the\nrequest:\n\n- ``admin_state_up`` . The default is ``true`` .\n\n- ``weight`` . The default is ``1`` .\n\nIf you omit the ``subnet_id`` parameter, LBaaS uses the\n``vip_subnet_id`` parameter value for the subnet ID.\n\nIf the request fails due to incorrect data, the service returns the\nHTTP ``Bad Request (400)`` response code with information about the\nfailure in the response body. Validation errors require that you\ncorrect the error and submit the request again.\n\nTo configure all documented member features at creation time,\nspecify additional elements or attributes in the request.\n\nUsers with an administrative role can create members on behalf of\nother tenants by specifying a ``tenant_id`` attribute that is\ndifferent than their own.\n\nTo update a member, the load balancer must have a\n``provisioning_status`` of ``ACTIVE`` .", 
        "examples": {
          "application/json": {
            "member": {
              "address": "10.0.0.8", 
              "admin_state_up": true, 
              "protocol_port": "80", 
              "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
              "weight": "1"
            }
          }
        }, 
        "id": "createMember", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMember"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.8", 
                  "admin_state_up": true, 
                  "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                  "protocol_port": 80, 
                  "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Adds a member to a pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Add member to pool"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Lists all members that are associated with a pool that is\nassociated with your tenant account. The list of members includes\nonly members that belong to the pool object identified by\n``pool_id`` .\n\nThis operation returns a list, which might be empty. Each element\nin the list is a member that can contain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``address``\n\n- ``protocol_port``\n\n- ``weight``\n\n- ``subnet_id``\n\n- ``admin_state_up``\n\nExample: List pool members", 
        "examples": {}, 
        "id": "listMembers", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "members": [
                  {
                    "address": "10.0.0.8", 
                    "admin_state_up": true, 
                    "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                    "protocol_port": 80, 
                    "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                    "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                    "weight": 1
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists members of a specified pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "List pool members"
      }
    ], 
    "/v2.0/lbaas/pools/{pool_id}/members/{member_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a member object identified by ``member_id``\nthat belongs to a pool object identified by ``pool_id`` . If the\nuser is not an administrative user and the pool or member object\ndoes not belong to her tenant account, the service returns the HTTP\n``Forbidden (403)`` response code.\n\nIf this operation succeeds, it returns a pool element that can\ncontain the following attributes:\n\n- ``id``\n\n- ``tenant_id``\n\n- ``address``\n\n- ``protocol_port``\n\n- ``weight``\n\n- ``subnet_id``\n\n- ``admin_state_up``\n\nExample: Show pool member details", 
        "examples": {}, 
        "id": "showMember", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.8", 
                  "admin_state_up": true, 
                  "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                  "protocol_port": 80, 
                  "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "weight": 1
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified pool member.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Show pool member details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of the specified pool. Upon\nsuccessful validation of the request, the service returns the HTTP\n``OK (200)`` response code.\n\nThe update operation enables you to change one or more of these\npool attributes:\n\n- ``weight``\n\n- ``admin_state_up``\n\nNote: You cannot update the member ID, ``tenant_id`` , ``address``\n, ``protocol_port`` , and ``subnet_id`` attributes. If you attempt\nto update any of these attributes, the service returns the HTTP\n``Immutable (422)`` response code.\n\nNote: You cannot update a member if the attached load balancer does\nnot have a ``provisioning_status`` of ``ACTIVE`` .", 
        "examples": {
          "application/json": {
            "member": {
              "admin_state_up": false, 
              "weight": 5
            }
          }
        }, 
        "id": "updateMember", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateMember"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "member": {
                  "address": "10.0.0.8", 
                  "admin_state_up": false, 
                  "id": "9a7aff27-fd41-4ec1-ba4c-3eb92c629313", 
                  "protocol_port": 80, 
                  "subnet_id": "013d3059-87a4-45a5-91e9-d721068ae0b2", 
                  "tenant_id": "1a3e005cf9ce40308c900bcb08e5320c", 
                  "weight": 5
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified member of a pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Update pool member"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes the specified member and its associated\nconfiguration from the tenant account. Any and all configuration\ndata is immediately purged and cannot be recovered.\n\nA member cannot be deleted if the attached load balancer does not\nhave a ``provisioning_status`` of ``ACTIVE`` .\n\nExample: Remove a member from a pool", 
        "examples": {}, 
        "id": "deleteMember", 
        "method": "delete", 
        "parameters": [], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "500": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a member from a pool.", 
        "tags": [
          "lbaas"
        ], 
        "title": "Remove member from pool"
      }
    ], 
    "/v2.0/metering/metering-label-rules": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The list provides the unique ID for each metering label rule.\n\nThis operation does not require a request body. This operation\nreturns a response body.", 
        "examples": {
          "text/plain": "GET /v2.0/metering/metering-label-rules HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "listMeteringLabelRules", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "metering_label_rules": [
                  {
                    "direction": "ingress", 
                    "excluded": false, 
                    "id": "9536641a-7d14-4dc5-afaf-93a973ce0eb8", 
                    "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "remote_ip_prefix": "20.0.0.0/24"
                  }, 
                  {
                    "direction": "ingress", 
                    "excluded": false, 
                    "id": "ffc6fd15-40de-4e7d-b617-34d3f7a93aec", 
                    "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "remote_ip_prefix": "10.0.0.0/24"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists a summary of all l3 metering label rules belonging to the specified tenant.", 
        "tags": [
          "metering"
        ], 
        "title": "List metering label rules"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation requires a request body.\n\nThis operation returns a response body.", 
        "examples": {
          "application/json": {
            "metering_label_rule": {
              "direction": "ingress", 
              "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
              "remote_ip_prefix": "10.0.1.0/24"
            }
          }
        }, 
        "id": "createMeteringLabelRule", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabelRule"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "metering_label_rule": {
                  "direction": "ingress", 
                  "excluded": false, 
                  "id": "00e13b58-b4f2-4579-9c9c-7ac94615f9ae", 
                  "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                  "remote_ip_prefix": "10.0.1.0/24"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a l3 metering label rule.", 
        "tags": [
          "metering"
        ], 
        "title": "Create metering label rule"
      }
    ], 
    "/v2.0/metering/metering-label-rules/{metering-label-rule-id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation does not require a request body.\n\nThis operation returns a response body, which contains the\nfollowing information about the metering label rule:\n\n- ``direction`` . Either ingress or egress.\n\n- ``excluded`` . Either True or False.\n\n- The ID for the specified metering label rule\n\n- The remote IP prefix\n\n- The metering label ID for the metering label with which the rule\n  is associated", 
        "examples": {
          "text/plain": "GET /v2.0/metering/metering-label-rules/9536641a-7d14-4dc5-afaf-93a973ce0eb8 HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "getMeteringLabelRule", 
        "method": "get", 
        "parameters": [
          {
            "description": "The unique identifier of metering label rule.", 
            "format": "", 
            "in": "path", 
            "name": "metering-label-rule-id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "metering_label_rule": {
                  "direction": "ingress", 
                  "excluded": false, 
                  "id": "9536641a-7d14-4dc5-afaf-93a973ce0eb8", 
                  "metering_label_id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                  "remote_ip_prefix": "20.0.0.0/24"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows detailed information for a specified metering label rule.", 
        "tags": [
          "metering"
        ], 
        "title": "Show metering label rule"
      }, 
      {
        "consumes": [], 
        "description": "This operation does not require a request body.\n\nThis operation does not return a response body.", 
        "examples": {
          "text/plain": "DELETE /v2.0/metering/metering-labels/37b31179-71ee-4f0a-b130-0eeb28e7ede7 HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "deleteMeteringLabelRule", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The unique identifier of metering label rule.", 
            "format": "", 
            "in": "path", 
            "name": "metering-label-rule-id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {
              "text/plain": "status: 204\n"
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified l3 metering label rule.", 
        "tags": [
          "metering"
        ], 
        "title": "Delete metering label rule"
      }
    ], 
    "/v2.0/metering/metering-labels": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The list includes the unique ID for each metering labels.\n\nThis operation does not require a request body.\n\nThis operation returns a response body.", 
        "examples": {
          "text/plain": "GET /v2.0/metering/metering-labels HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "listMeteringLabels", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "metering_labels": [
                  {
                    "description": "label1 description", 
                    "id": "a6700594-5b7a-4105-8bfe-723b346ce866", 
                    "name": "label1", 
                    "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                  }, 
                  {
                    "description": "label2 description", 
                    "id": "e131d186-b02d-4c0b-83d5-0c0725c4f812", 
                    "name": "label2", 
                    "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists all l3 metering labels that belong to the specified tenant.", 
        "tags": [
          "metering"
        ], 
        "title": "List metering labels"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation requires a request body.\n\nThe following table describes the required and optional attributes\nin the request body:", 
        "examples": {
          "application/json": {
            "metering_label": {
              "description": "description of label1", 
              "name": "label1"
            }
          }
        }, 
        "id": "createMeteringLabel", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createMeteringLabel"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "metering_label": {
                  "description": "description of label1", 
                  "id": "bc91b832-8465-40a7-a5d8-ba87de442266", 
                  "name": "label1", 
                  "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a l3 metering label.", 
        "tags": [
          "metering"
        ], 
        "title": "Create metering label"
      }
    ], 
    "/v2.0/metering/metering-labels/{metering_label_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation does not require a request body.\n\nThis operation returns a response body that contains the\ndescription, name, ID.", 
        "examples": {
          "text/plain": "GET /v2.0/metering/metering-labels/a6700594-5b7a-4105-8bfe-723b346ce866 HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "getMeteringLabel", 
        "method": "get", 
        "parameters": [
          {
            "description": "The unique identifier of the metering label.", 
            "format": "", 
            "in": "path", 
            "name": "metering_label_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "metering_label": {
                  "description": "label1 description", 
                  "id": "a6700594-5b7a-4105-8bfe-723b346ce866", 
                  "name": "label1", 
                  "tenant_id": "45345b0ee1ea477fac0f541b2cb79cd4"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows information for a specified metering label.", 
        "tags": [
          "metering"
        ], 
        "title": "Show metering label"
      }, 
      {
        "consumes": [], 
        "description": "This operation deletes a l3 metering label.\n\nThis operation does not require a request body. This operation does\nnot return a response body.", 
        "examples": {
          "text/plain": "DELETE /v2.0/metering/metering-labels/a6700594-5b7a-4105-8bfe-723b346ce866 HTTP/1.1\nHost: controlnode:9696\nUser-Agent: python-neutronclient\nContent-Type: application/json\nAccept: application/json\nX-Auth-Token: c52a1b304fec4ca0ac85dc1741eec6e2\n"
        }, 
        "id": "deleteMeteringLabel", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The unique identifier of the metering label.", 
            "format": "", 
            "in": "path", 
            "name": "metering_label_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {
              "text/plain": "status: 204\n"
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a l3 metering label.", 
        "tags": [
          "metering"
        ], 
        "title": "Delete metering label"
      }
    ], 
    "/v2.0/networks": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listProviderNetworks", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "d32019d3-bc6e-4319-9c1d-6722fc136a22", 
                  "mtu": 0, 
                  "name": "private-network", 
                  "port_security_enabled": true, 
                  "router:external": false, 
                  "shared": true, 
                  "status": "ACTIVE", 
                  "subnets": [
                    "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
                  ], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists networks that are accessible to the tenant who submits the request.", 
        "tags": [
          "network-provider"
        ], 
        "title": "List networks"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "network": {
              "admin_state_up": true, 
              "name": "sample_network"
            }
          }
        }, 
        "id": "createProviderNetwork", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "name": "net1", 
                  "router:external": false, 
                  "segments": [
                    {
                      "provider:network_type": "vlan", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 2
                    }, 
                    {
                      "provider:network_type": "stt", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": null
                    }
                  ], 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a network.", 
        "tags": [
          "network-provider"
        ], 
        "title": "Create network"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listMultiNetworks", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "networks": [
                  {
                    "admin_state_up": true, 
                    "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                    "name": "net1", 
                    "router:external": false, 
                    "segments": [
                      {
                        "provider:network_type": "vlan", 
                        "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                        "provider:segmentation_id": 2
                      }, 
                      {
                        "provider:network_type": "stt", 
                        "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                        "provider:segmentation_id": 0
                      }
                    ], 
                    "shared": false, 
                    "status": "ACTIVE", 
                    "subnets": [], 
                    "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                  }, 
                  {
                    "admin_state_up": true, 
                    "id": "db193ab3-96e3-4cb3-8fc5-05f4296d0324", 
                    "name": "private", 
                    "provider:network_type": "local", 
                    "provider:physical_network": null, 
                    "provider:segmentation_id": null, 
                    "router:external": true, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "08eae331-0402-425a-923c-34f7cfe39c1b"
                    ], 
                    "tenant_id": "26a7980765d0414dbc1fc1f88cdb7e6e"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists networks that are accessible to the tenant who submits the request. Networks with multiple segments include the ``segments`` list in the response.", 
        "tags": [
          "network-multi-provider"
        ], 
        "title": "List networks"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "network": {
              "admin_state_up": true, 
              "name": "net1", 
              "segments": [
                {
                  "provider:network_type": "vlan", 
                  "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                  "provider:segmentation_id": "2"
                }, 
                {
                  "provider:network_type": "stt", 
                  "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453"
                }
              ]
            }
          }
        }, 
        "id": "createMultiNetwork", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "name": "net1", 
                  "segments": [
                    {
                      "provider:network_type": "vlan", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 2
                    }, 
                    {
                      "provider:network_type": "stt", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": null
                    }
                  ], 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a network with multiple segment mappings.", 
        "tags": [
          "network-multi-provider"
        ], 
        "title": "Create network with multiple segment mappings"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listVTNetworks", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "networks": [
                  {
                    "admin_state_up": true, 
                    "id": "f5e6d63c-04a4-4b2c-8b27-a9854412d5a7", 
                    "name": "net1", 
                    "router:external": false, 
                    "shared": false, 
                    "status": "ACTIVE", 
                    "subnets": [], 
                    "tenant_id": "e252a863-92ee-480f-8bd8-71be77089499", 
                    "vlan_transparent": true
                  }, 
                  {
                    "admin_state_up": true, 
                    "id": "37e11503-3244-49f1-b92a-9f21bab017d9", 
                    "name": "private", 
                    "router:external": false, 
                    "shared": true, 
                    "status": "ACTIVE", 
                    "subnets": [
                      "3daba37a-bced-4153-a4bb-d83dcc0552d9"
                    ], 
                    "tenant_id": "109e5fae-d976-4791-84c7-6ae0bb3896c3", 
                    "vlan_transparent": false
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists networks. The response shows the VLAN transparency attribute.", 
        "tags": [
          "network-vlan-transparency"
        ], 
        "title": "List networks with VLAN transparency attribute"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "network": {
              "admin_state_up": true, 
              "name": "net1", 
              "vlan_transparent": true
            }
          }
        }, 
        "id": "createVTNetwork", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "3114f6e9-f9bc-4570-a941-7329b3b9759f", 
                  "name": "net1", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "5831268f-1f52-49a7-88d5-bc0d7a74d523", 
                  "vlan_transparent": true
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a VLAN-transparent network.", 
        "tags": [
          "network-vlan-transparency"
        ], 
        "title": "Create VLAN-transparent network"
      }
    ], 
    "/v2.0/networks/{network_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showProviderNetwork", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the network of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "d32019d3-bc6e-4319-9c1d-6722fc136a22", 
                  "mtu": 0, 
                  "name": "private-network", 
                  "port_security_enabled": true, 
                  "router:external": false, 
                  "shared": true, 
                  "status": "ACTIVE", 
                  "subnets": [
                    "54d6f61d-db07-451c-9ab3-b9609b6b6f0b"
                  ], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified network.", 
        "tags": [
          "network-provider"
        ], 
        "title": "Show network details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "network": {
              "name": "sample_network_5_updated"
            }
          }
        }, 
        "id": "updateProviderNetwork", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the network of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "1f370095-98f6-4079-be64-6d3d4a6adcc6", 
                  "mtu": 0, 
                  "name": "sample_network_5_updated", 
                  "port_security_enabled": true, 
                  "provider:network_type": "local", 
                  "provider:physical_network": null, 
                  "provider:segmentation_id": null, 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "4fd44f30292945e481c7b8a0c8908869"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified network.", 
        "tags": [
          "network-provider"
        ], 
        "title": "Update network"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deleteProviderNetwork", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the network of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified network.", 
        "tags": [
          "network-provider"
        ], 
        "title": "Delete network"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showMultiNetwork", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the network of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "4e8e5957-649f-477b-9e5b-f1f75b21c03c", 
                  "name": "net1", 
                  "router:external": false, 
                  "segments": [
                    {
                      "provider:network_type": "vlan", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 2
                    }, 
                    {
                      "provider:network_type": "stt", 
                      "provider:physical_network": "8bab8453-1bc9-45af-8c70-f83aa9b50453", 
                      "provider:segmentation_id": 0
                    }
                  ], 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "9bacb3c5d39d41a79512987f338cf177"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified network with multiple segments.", 
        "tags": [
          "network-multi-provider"
        ], 
        "title": "Show details for a network with multiple segments"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showVTNetwork", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the network of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "network_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "network": {
                  "admin_state_up": true, 
                  "id": "20403fe9-6c9c-48e5-9edb-c3426a955068", 
                  "name": "net1", 
                  "router:external": false, 
                  "shared": false, 
                  "status": "ACTIVE", 
                  "subnets": [], 
                  "tenant_id": "e926fd5a-e9f6-4dc8-8043-a352d974ceaf", 
                  "vlan_transparent": true
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified VLAN-transparent network.", 
        "tags": [
          "network-vlan-transparency"
        ], 
        "title": "Show VLAN-transparent network details"
      }
    ], 
    "/v2.0/ports": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listPorts", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ports": [
                  {
                    "admin_state_up": true, 
                    "allowed_address_pairs": [], 
                    "binding:host_id": "devstack", 
                    "binding:profile": {}, 
                    "binding:vif_details": {
                      "ovs_hybrid_plug": true, 
                      "port_filter": true
                    }, 
                    "binding:vif_type": "ovs", 
                    "binding:vnic_type": "normal", 
                    "device_id": "9ae135f4-b6e0-4dad-9e91-3c223e385824", 
                    "device_owner": "network:router_gateway", 
                    "extra_dhcp_opts": [], 
                    "fixed_ips": [
                      {
                        "ip_address": "172.24.4.2", 
                        "subnet_id": "008ba151-0b8c-4a67-98b5-0d2b87666062"
                      }
                    ], 
                    "id": "d80b1a3b-4fc1-49f3-952e-1e2ab7081d8b", 
                    "mac_address": "fa:16:3e:58:42:ed", 
                    "name": "", 
                    "network_id": "70c1db1f-b701-45bd-96e0-a313ee3430b3", 
                    "port_security_enabled": true, 
                    "security_groups": [], 
                    "status": "ACTIVE", 
                    "tenant_id": ""
                  }, 
                  {
                    "admin_state_up": true, 
                    "allowed_address_pairs": [], 
                    "binding:host_id": "devstack", 
                    "binding:profile": {}, 
                    "binding:vif_details": {
                      "ovs_hybrid_plug": true, 
                      "port_filter": true
                    }, 
                    "binding:vif_type": "ovs", 
                    "binding:vnic_type": "normal", 
                    "device_id": "9ae135f4-b6e0-4dad-9e91-3c223e385824", 
                    "device_owner": "network:router_interface", 
                    "extra_dhcp_opts": [], 
                    "fixed_ips": [
                      {
                        "ip_address": "10.0.0.1", 
                        "subnet_id": "288bf4a1-51ba-43b6-9d0a-520e9005db17"
                      }
                    ], 
                    "id": "f71a6703-d6de-4be1-a91a-a570ede1d159", 
                    "mac_address": "fa:16:3e:bb:3c:e4", 
                    "name": "", 
                    "network_id": "f27aa545-cbdd-4907-b0c6-c9e8b039dcc2", 
                    "port_security_enabled": true, 
                    "security_groups": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "d397de8a63f341818f198abb0966f6f3"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists ports to which the tenant has access.", 
        "tags": [
          "port-binding"
        ], 
        "title": "List ports"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "port": {
              "admin_state_up": true, 
              "network_id": "ee2d3158-3e80-4fb3-ba87-c99f515d85e7"
            }
          }
        }, 
        "id": "createPort", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "", 
                  "binding:profile": {}, 
                  "binding:vif_details": {}, 
                  "binding:vif_type": "unbound", 
                  "binding:vnic_type": "normal", 
                  "device_id": "", 
                  "device_owner": "", 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.2", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "65c0ee9f-d634-4522-8954-51021b570b0d", 
                  "mac_address": "fa:16:3e:c9:cb:f0", 
                  "name": "private-port", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "security_groups": [
                    "f0ac4394-7e4a-4409-9701-ba8be283dbc3"
                  ], 
                  "status": "DOWN", 
                  "tenant_id": "d6700c0c9ffa4f1cb322cd4a1f3906fa"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a port on the specified network.", 
        "tags": [
          "port-binding"
        ], 
        "title": "Create port"
      }
    ], 
    "/v2.0/ports/{port_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showPort", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the port of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "devstack", 
                  "binding:profile": {}, 
                  "binding:vif_details": {
                    "ovs_hybrid_plug": true, 
                    "port_filter": true
                  }, 
                  "binding:vif_type": "ovs", 
                  "binding:vnic_type": "normal", 
                  "device_id": "5e3898d7-11be-483e-9732-b2f5eccd2b2e", 
                  "device_owner": "network:router_interface", 
                  "extra_dhcp_opts": [], 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.1", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "46d4bfb9-b26e-41f3-bd2e-e6dcc1ccedb2", 
                  "mac_address": "fa:16:3e:23:fd:d7", 
                  "name": "", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "port_security_enabled": false, 
                  "security_groups": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "7e02058126cc4950b75f9970368ba177"
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows information for the specified port.", 
        "tags": [
          "port-binding"
        ], 
        "title": "Show port"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "port": {
              "admin_state_up": true, 
              "network_id": "ee2d3158-3e80-4fb3-ba87-c99f515d85e7"
            }
          }
        }, 
        "id": "updatePort", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID for the port of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "port": {
                  "admin_state_up": true, 
                  "allowed_address_pairs": [], 
                  "binding:host_id": "", 
                  "binding:profile": {}, 
                  "binding:vif_details": {}, 
                  "binding:vif_type": "unbound", 
                  "binding:vnic_type": "normal", 
                  "device_id": "", 
                  "device_owner": "", 
                  "fixed_ips": [
                    {
                      "ip_address": "10.0.0.2", 
                      "subnet_id": "a0304c3a-4f08-4c43-88af-d796509c97d2"
                    }
                  ], 
                  "id": "65c0ee9f-d634-4522-8954-51021b570b0d", 
                  "mac_address": "fa:16:3e:c9:cb:f0", 
                  "name": "private-port", 
                  "network_id": "a87cc70a-3e15-4acf-8205-9b711a3531b7", 
                  "security_groups": [
                    "f0ac4394-7e4a-4409-9701-ba8be283dbc3"
                  ], 
                  "status": "DOWN", 
                  "tenant_id": "d6700c0c9ffa4f1cb322cd4a1f3906fa"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates the specified port.", 
        "tags": [
          "port-binding"
        ], 
        "title": "Update port"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "deletePort", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the port of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "port_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes the specified port.", 
        "tags": [
          "port-binding"
        ], 
        "title": "Delete port"
      }
    ], 
    "/v2.0/quotas": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listQuotas", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "quotas": [
                  {
                    "floatingip": 50, 
                    "ikepolicy": -1, 
                    "ipsec_site_connection": -1, 
                    "ipsecpolicy": -1, 
                    "network": 15, 
                    "port": 30, 
                    "router": 10, 
                    "security_group": 10, 
                    "security_group_rule": 100, 
                    "subnet": 10, 
                    "subnetpool": -1, 
                    "tenant_id": "b7445f221cda4f4a8ac7db6b218b1339", 
                    "vpnservice": -1
                  }, 
                  {
                    "floatingip": 50, 
                    "ikepolicy": -1, 
                    "ipsec_site_connection": -1, 
                    "ipsecpolicy": -1, 
                    "network": 5, 
                    "port": 30, 
                    "router": 10, 
                    "security_group": 10, 
                    "security_group_rule": 100, 
                    "subnet": 10, 
                    "subnetpool": -1, 
                    "tenant_id": "666a45fe39fe4e67bd3e542e8fd5087d", 
                    "vpnservice": -1
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists quotas for tenants who have non-default quota values.", 
        "tags": [
          "quotas"
        ], 
        "title": "List quotas"
      }
    ], 
    "/v2.0/quotas/{tenant_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showQuota", 
        "method": "get", 
        "parameters": [
          {
            "description": "The tenant ID.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "quota": {
                  "floatingip": 50, 
                  "network": 10, 
                  "port": 50, 
                  "router": 10, 
                  "security_group": 1, 
                  "security_group_rule": 100, 
                  "subnet": 10, 
                  "subnetpool": -1
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows quotas for a specified tenant.", 
        "tags": [
          "quotas"
        ], 
        "title": "Show quota"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "quota": {
              "floatingip": 30, 
              "network": 10, 
              "port": 30, 
              "router": 50, 
              "subnet": 40
            }
          }
        }, 
        "id": "updateQuota", 
        "method": "put", 
        "parameters": [
          {
            "description": "The tenant ID.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "quota": {
                  "floatingip": 30, 
                  "network": 10, 
                  "port": 30, 
                  "router": 50, 
                  "subnet": 40
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates quotas for a specified tenant. Use when non-default quotas are desired.", 
        "tags": [
          "quotas"
        ], 
        "title": "Update quota"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {}, 
        "id": "resetQuota", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The tenant ID.", 
            "format": "", 
            "in": "path", 
            "name": "tenant_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Resets quotas to default values for a specified tenant.", 
        "tags": [
          "quotas"
        ], 
        "title": "Reset quota"
      }
    ], 
    "/v2.0/routers": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings return only those routers that are owned by\nthe tenant who submits the request, unless an admin user submits\nthe request.\n\nThis example request lists routers in JSON format:\n\n::\n\n   GET /v2.0/routers\n   Accept: application/json\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. Additionally, you can filter results\nby using query string parameters. For information, see Filtering\nand Column Selection .", 
        "examples": {}, 
        "id": "listRouters", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "routers": [
                  {
                    "admin_state_up": true, 
                    "external_gateway_info": null, 
                    "id": "7177abc4-5ae9-4bb7-b0d4-89e94a4abf3b", 
                    "name": "second_routers", 
                    "routes": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                  }, 
                  {
                    "admin_state_up": true, 
                    "external_gateway_info": {
                      "external_fixed_ips": [
                        {
                          "ip": "192.168.10.2", 
                          "subnet_id": "255.255.255.0"
                        }
                      ], 
                      "network_id": "3c5bcddd-6af9-4e6b-9c3e-c153e521cab8"
                    }, 
                    "id": "a9254bdb-2613-4a13-ac4c-adc581fba50d", 
                    "name": "router1", 
                    "routes": [], 
                    "status": "ACTIVE", 
                    "tenant_id": "33a40233088643acb66ff6eb0ebea679"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists logical routers that are accessible to the tenant who submits the request.", 
        "tags": [
          "layer3"
        ], 
        "title": "List routers"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation creates a new logical router. When it is created, a\nlogical router does not have any internal interface; it is not\nassociated to any subnet. You can optionally specify an external\ngateway for a router at create time. The external gateway for the\nrouter must be plugged into an external network. An external\nnetwork has its extended field ``router:external`` set to ``true``\n. To specify an external gateway, the identifier of the external\nnetwork must be passed in the ``external_gateway_info`` attribute\nin the request body, as follows:\n\n.. code-block:: json\n\n   {\n      \"router\": {\n         \"external_gateway_info\": {\n            \"network_id\": \"8ca37218-28ff-41cb-9b10-039601ea7e6b\"\n         }\n      }\n   }", 
        "examples": {
          "application/json": {
            "router": {
              "admin_state_up": true, 
              "external_gateway_info": {
                "enable_snat": "True", 
                "external_fixed_ips": [
                  {
                    "ip": "192.168.10.1", 
                    "subnet_id": "255.255.255.0"
                  }
                ], 
                "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
              }, 
              "name": "another_router"
            }
          }
        }, 
        "id": "createRouter", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "external_gateway_info": {
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
                  }, 
                  "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                  "name": "another_router", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a logical router.", 
        "tags": [
          "layer3"
        ], 
        "title": "Create router"
      }
    ], 
    "/v2.0/routers/{router_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This example request shows details for a router in JSON format:\n\n::\n\n   GET /v2.0/routers/{router_id}\n   Accept: application/json\nUse the ``fields`` query parameter to control which fields are\nreturned in the response body. For information, see Filtering and\nColumn Selection .", 
        "examples": {}, 
        "id": "showRouter", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "external_gateway_info": {
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "85d76829-6415-48ff-9c63-5c5ca8c61ac6"
                  }, 
                  "id": "a07eea83-7710-4860-931b-5fe220fae533", 
                  "name": "router1", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "d6554fe62e2f41efbb6e026fad5c1542"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified router.", 
        "tags": [
          "layer3"
        ], 
        "title": "Show router details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "You can update the name, administrative state, and the external\ngateway. For more information about how to set the external gateway\nfor a router, see the create router operation. This operation does\nnot enable the update of router interfaces. To update a router, use\nthe add router interface and remove router interface operations.\n\nThis example updates the external gateway information for a router:\n\n::\n\n   PUT /v2.0/routers/{router_id}\n   Accept: application/json", 
        "examples": {
          "application/json": {
            "router": {
              "external_gateway_info": {
                "enable_snat": "True", 
                "external_fixed_ips": [
                  {
                    "ip": "192.168.10.1", 
                    "subnet_id": "255.255.255.0"
                  }
                ], 
                "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
              }
            }
          }
        }, 
        "id": "updateRouter", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "external_gateway_info": {
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "8ca37218-28ff-41cb-9b10-039601ea7e6b"
                  }, 
                  "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                  "name": "another_router", 
                  "routes": [], 
                  "status": "ACTIVE", 
                  "tenant_id": "6b96ff0cb17a4b859e1e575d221683d3"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a logical router.", 
        "tags": [
          "layer3"
        ], 
        "title": "Update router"
      }, 
      {
        "consumes": [], 
        "description": "This operation fails if the router has attached interfaces.\n\nUse the remove router interface operation to remove all router\ninterfaces before you delete the router.\n\nThis example deletes a router:\n\n::\n\n   DELETE /v2.0/routers/{router_id}\n   Accept: application/json", 
        "examples": {}, 
        "id": "deleteRouter", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a logical router and, if present, its external gateway interface.", 
        "tags": [
          "layer3"
        ], 
        "title": "Delete router"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The next hop IP address must be a part of one of the subnets to\nwhich the router interfaces are connected. Otherwise, the server\nresponds with the ``400 Bad Request`` error code.\n\nWhen a validation error is detected, such as a format error of IP\naddress or CIDR, the server responds with the ``400 Bad Request``\nerror code.\n\nWhen Networking receives a request to delete the router interface\nfor subnets that are used by one or more routes, it responds with a\n``409 Conflict`` error code.", 
        "examples": {
          "application/json": {
            "router": {
              "routes": [
                {
                  "destination": "40.0.1.0/24", 
                  "nexthop": "10.1.0.10"
                }
              ]
            }
          }
        }, 
        "id": "updateRouter", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateRouter"
            }
          }, 
          {
            "description": "The UUID for the router of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "router": {
                  "admin_state_up": true, 
                  "external_gateway_info": {
                    "external_fixed_ips": [
                      {
                        "ip": "192.168.10.2", 
                        "subnet_id": "255.255.255.0"
                      }
                    ], 
                    "network_id": "5c26e0bb-a9a9-429c-9703-5c417a221096"
                  }, 
                  "id": "babc8173-46f6-4b6f-8b95-38c1683a4e22", 
                  "name": "router1", 
                  "routes": [
                    {
                      "destination": "40.0.1.0/24", 
                      "nexthop": "10.1.0.10"
                    }
                  ], 
                  "status": "ACTIVE", 
                  "tenant_id": "936fa220b2c24a87af51026439af7a3e"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Configures extra routes on a specified router.", 
        "tags": [
          "extraroute"
        ], 
        "title": "Update router"
      }
    ], 
    "/v2.0/routers/{router_id}/add_router_interface": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Attaches a subnet to an internal router interface.\n\nSpecify a subnet ID or port ID in the request body:\n\n- Subnet ID. The gateway IP address for the subnet is used to create\n  the router interface.\n\n- Port ID. The IP address associated with the port is used to create\n  the router interface.\n\nIf you specify both IDs, the operation returns a ``400 Bad\nRequest`` error.\n\nIf the port is already used, the operation returns a ``409\nConflict`` error.\n\nThe port ID that is returned by this operation can be either:\n\n- The same ID that is passed in the request body.\n\n- The ID of a port that is created by this operation to attach the\n  specified subnet to the router.\n\nAfter you run this operation:\n\n- The device ID of this port is set to the router ID.\n\n- The ``device_owner`` attribute is set to\n  ``network:router_interface`` .", 
        "examples": {
          "application/json": {
            "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1"
          }
        }, 
        "id": "addRouterInterface", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/addRouterInterface"
            }
          }, 
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "b0294d7e-7da4-4202-9882-2ab1de9dabc0", 
                "port_id": "3a44f4e5-1694-493a-a1fb-393881c673a4", 
                "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1", 
                "tenant_id": "6ba032e4730d42e2ad928f430f5da33e"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Adds an internal interface to a logical router.", 
        "tags": [
          "layer3"
        ], 
        "title": "Add interface to router"
      }
    ], 
    "/v2.0/routers/{router_id}/remove_router_interface": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation removes an internal router interface, which detaches\na subnet from the router. You must specify either a subnet ID or\nport ID in the request body; this value is used to identify the\nrouter interface to remove.\n\nYou can also specify both a subnet ID and port ID. If you specify\nboth IDs, the subnet ID must correspond to the subnet ID of the\nfirst IP address on the port specified by the port ID. Otherwise,\nthe operation returns a ``409 Conflict`` error. The response\ncontains information about the affected router and interface.\n\nThe operation returns a ``404 Not Found`` if the router or the\nsubnet and port do not exist or are not visible to you. As a\nconsequence of this operation, the port connecting the router with\nthe subnet is removed from the subnet for the network.\n\nThis example removes an interface from a router:\n\n::\n\n   PUT /v2.0/routers/{router_id}/remove_router_interface\n   Accept: application/json", 
        "examples": {
          "application/json": {
            "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1"
          }
        }, 
        "id": "removeRouterInterface", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID of the router.", 
            "format": "", 
            "in": "path", 
            "name": "router_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "8604a0de-7f6b-409a-a47c-a1cc7bc77b2e", 
                "port_id": "3a44f4e5-1694-493a-a1fb-393881c673a4", 
                "subnet_id": "a2f1f29d-571b-4533-907f-5803ab96ead1", 
                "tenant_id": "2f245a7b-796b-4f26-9cf9-9e82d248fda7"
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes an internal interface from a logical router.", 
        "tags": [
          "layer3"
        ], 
        "title": "Remove interface from router"
      }
    ], 
    "/v2.0/security-group-rules": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The list provides the unique ID for each security group rule.", 
        "examples": {
          "text/plain": "GET /v2.0/security-group-rules/\nAccept: application/json"
        }, 
        "id": "listSecGroupRules", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "security_group_rules": [
                  {
                    "direction": "egress", 
                    "ethertype": "IPv6", 
                    "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": null, 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "egress", 
                    "ethertype": "IPv4", 
                    "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": null, 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "ingress", 
                    "ethertype": "IPv6", 
                    "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }, 
                  {
                    "direction": "ingress", 
                    "ethertype": "IPv4", 
                    "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                    "port_range_max": null, 
                    "port_range_min": null, 
                    "protocol": null, 
                    "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "remote_ip_prefix": null, 
                    "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists a summary of all OpenStack Networking security group rules that the specified tenant can access.", 
        "tags": [
          "security_group-ruless"
        ], 
        "title": "List security group rules"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "security_group_rule": {
              "direction": "ingress", 
              "ethertype": "IPv4", 
              "port_range_max": "80", 
              "port_range_min": "80", 
              "protocol": "tcp", 
              "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
              "security_group_id": "a7734e61-b545-452d-a3cd-0189cbd9747a"
            }
          }
        }, 
        "id": "createSecGroupRule", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "security_group_rule": {
                  "direction": "ingress", 
                  "ethertype": "IPv4", 
                  "id": "2bc0accf-312e-429a-956e-e4407625eb62", 
                  "port_range_max": 80, 
                  "port_range_min": 80, 
                  "protocol": "tcp", 
                  "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "remote_ip_prefix": null, 
                  "security_group_id": "a7734e61-b545-452d-a3cd-0189cbd9747a", 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an OpenStack Networking security group rule.", 
        "tags": [
          "security_group-ruless"
        ], 
        "title": "Create security group rule"
      }
    ], 
    "/v2.0/security-group-rules/{rules-security-groups-id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The response body contains the following information about the\nsecurity group rule:", 
        "examples": {
          "text/plain": "GET /v2.0/security-group-rules/ 3c0e45ff-adaf-4124-b083-bf390e5482ff\nAccept: application/json"
        }, 
        "id": "getSecGroupRule", 
        "method": "get", 
        "parameters": [
          {
            "description": "The unique identifier of the security group rule.", 
            "format": "", 
            "in": "path", 
            "name": "rules-security-groups-id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "security_group_rule": {
                  "direction": "egress", 
                  "ethertype": "IPv6", 
                  "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                  "port_range_max": null, 
                  "port_range_min": null, 
                  "protocol": null, 
                  "remote_group_id": null, 
                  "remote_ip_prefix": null, 
                  "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows detailed information for a specified security group rule.", 
        "tags": [
          "security_group-ruless"
        ], 
        "title": "Show security group rule"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {
          "text/plain": "DELETE /v2.0/security-group-rules/fc3c327a-b5b5-4cd3-9577-52893289ce08\nContent-Type: application/json\nAccept: application/json"
        }, 
        "id": "deleteSecGroupRule", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The unique identifier of the security group rule.", 
            "format": "", 
            "in": "path", 
            "name": "rules-security-groups-id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {
              "text/plain": "status: 204"
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified rule from an OpenStack Networking security group.", 
        "tags": [
          "security_group-ruless"
        ], 
        "title": "Delete security group rule"
      }
    ], 
    "/v2.0/security-groups": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The list shows the unique ID for and the rules that are associated\nwith each security group.", 
        "examples": {
          "text/plain": "GET /v2.0/security-groups\nAccept: application/json"
        }, 
        "id": "listSecGroups", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "security_groups": [
                  {
                    "description": "default", 
                    "id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                    "name": "default", 
                    "security_group_rules": [
                      {
                        "direction": "egress", 
                        "ethertype": "IPv6", 
                        "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": null, 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "egress", 
                        "ethertype": "IPv4", 
                        "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": null, 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "ingress", 
                        "ethertype": "IPv6", 
                        "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }, 
                      {
                        "direction": "ingress", 
                        "ethertype": "IPv4", 
                        "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                        "port_range_max": null, 
                        "port_range_min": null, 
                        "protocol": null, 
                        "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "remote_ip_prefix": null, 
                        "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                        "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                      }
                    ], 
                    "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists OpenStack Networking security groups to which the specified tenant has access.", 
        "tags": [
          "security-groups"
        ], 
        "title": "List security groups"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation creates a security group with default security group\nrules for the IPv4 and IPv6 ether types.", 
        "examples": {
          "application/json": {
            "security_group": {
              "description": "security group for webservers", 
              "name": "new-webservers"
            }
          }
        }, 
        "id": "createSecGroup", 
        "method": "post", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "security group for webservers", 
                  "id": "2076db17-a522-4506-91de-c6dd8e837028", 
                  "name": "new-webservers", 
                  "security_group_rules": [
                    {
                      "direction": "egress", 
                      "ethertype": "IPv4", 
                      "id": "38ce2d8e-e8f1-48bd-83c2-d33cb9f50c3d", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "2076db17-a522-4506-91de-c6dd8e837028", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "egress", 
                      "ethertype": "IPv6", 
                      "id": "565b9502-12de-4ffd-91e9-68885cff6ae1", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "2076db17-a522-4506-91de-c6dd8e837028", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }
                  ], 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an OpenStack Networking security group.", 
        "tags": [
          "security-groups"
        ], 
        "title": "Create security group"
      }
    ], 
    "/v2.0/security-groups/{security_group_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation returns a response body that contains the\ndescription, name, ID, and security group rules associated with the\nspecified security group and tenant ID.", 
        "examples": {
          "text/plain": "GET /v2.0/security-groups/85cc3048-abc3-43cc-89b3-377341426ac5\nAccept: application/json"
        }, 
        "id": "getSecGroup", 
        "method": "get", 
        "parameters": [
          {
            "description": "The unique identifier of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "default", 
                  "id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                  "name": "default", 
                  "security_group_rules": [
                    {
                      "direction": "egress", 
                      "ethertype": "IPv6", 
                      "id": "3c0e45ff-adaf-4124-b083-bf390e5482ff", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "egress", 
                      "ethertype": "IPv4", 
                      "id": "93aa42e5-80db-4581-9391-3a608bd0e448", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": null, 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "ingress", 
                      "ethertype": "IPv6", 
                      "id": "c0b09f00-1d49-4e64-a0a7-8a186d928138", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }, 
                    {
                      "direction": "ingress", 
                      "ethertype": "IPv4", 
                      "id": "f7d45c89-008e-4bab-88ad-d6811724c51c", 
                      "port_range_max": null, 
                      "port_range_min": null, 
                      "protocol": null, 
                      "remote_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "remote_ip_prefix": null, 
                      "security_group_id": "85cc3048-abc3-43cc-89b3-377341426ac5", 
                      "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                    }
                  ], 
                  "tenant_id": "e4f50856753b4dc6afee5fa6b9b6c550"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified security group.", 
        "tags": [
          "security-groups"
        ], 
        "title": "Show security group"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "security_group": {
              "description": "my security group", 
              "name": "mysecgroup"
            }
          }
        }, 
        "id": "updateSecGroup", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateSecGroup"
            }
          }, 
          {
            "description": "The unique identifier of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "security_group": {
                  "description": "my security group", 
                  "id": "01fbade5-b664-42f6-83ae-4e214f4263fa", 
                  "name": "mysecgroup", 
                  "rules": [], 
                  "tenant_id": "a52cdb9cc7854a39a23d3af73a40899e"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "405": {
            "examples": {}, 
            "headers": {}
          }, 
          "413": {
            "examples": {}, 
            "headers": {}
          }, 
          "503": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified security group.", 
        "tags": [
          "security-groups"
        ], 
        "title": "Update security group"
      }, 
      {
        "consumes": [], 
        "description": "This operation deletes an OpenStack Networking security group and\nits associated security group rules, provided that a port is not\nassociated with the security group.\n\nThis operation does not require a request body. This operation does\nnot return a response body.", 
        "examples": {
          "text/plain": "DELETE /v2.0/security-groups/e470bdfc-4869-459b-a561-cb3377efae59\nContent-Type: application/json\nAccept: application/json"
        }, 
        "id": "deleteSecGroup", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The unique identifier of the security group.", 
            "format": "", 
            "in": "path", 
            "name": "security_group_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {
              "text/plain": "status: 204"
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes an OpenStack Networking security group.", 
        "tags": [
          "security-groups"
        ], 
        "title": "Delete security group"
      }
    ], 
    "/v2.0/subnetpools": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Default policy settings returns exclusively subnet pools owned by\nthe tenant submitting the request, unless the request is submitted\nby a user with administrative rights.", 
        "examples": {}, 
        "id": "listSubnetPools", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "subnetpools": [
                  {
                    "address_scope_id": null, 
                    "default_prefixlen": "64", 
                    "default_quota": null, 
                    "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                    "ip_version": 6, 
                    "max_prefixlen": "64", 
                    "min_prefixlen": "64", 
                    "name": "my-subnet-pool-ipv6", 
                    "prefixes": [
                      "2001:db8:0:2::/64", 
                      "2001:db8::/63"
                    ], 
                    "shared": false, 
                    "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                  }, 
                  {
                    "address_scope_id": null, 
                    "default_prefixlen": "25", 
                    "default_quota": null, 
                    "id": "f49a1319-423a-4ee6-ba54-1d95a4f6cc68", 
                    "ip_version": 4, 
                    "max_prefixlen": "30", 
                    "min_prefixlen": "24", 
                    "name": "my-subnet-pool-ipv4", 
                    "prefixes": [
                      "10.10.0.0/21", 
                      "192.168.0.0/16"
                    ], 
                    "shared": false, 
                    "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists subnet pools to which the specified tenant has access.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "title": "List subnet pools"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "subnetpool": {
              "default_prefixlen": 25, 
              "max_prefixlen": 30, 
              "min_prefixlen": 24, 
              "name": "my-subnet-pool", 
              "prefixes": [
                "192.168.0.0/16", 
                "10.10.0.0/21"
              ], 
              "shared": "false"
            }
          }
        }, 
        "id": "createSubnetPool", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createSubnetPool"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "default_prefixlen": "25", 
                  "default_quota": null, 
                  "id": "f49a1319-423a-4ee6-ba54-1d95a4f6cc68", 
                  "ip_version": 4, 
                  "max_prefixlen": "30", 
                  "min_prefixlen": "24", 
                  "name": "my-subnet-pool", 
                  "prefixes": [
                    "10.10.0.0/21", 
                    "192.168.0.0/16"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "title": "Create subnet pool"
      }
    ], 
    "/v2.0/subnetpools/{subnetpool_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Use the ``fields`` query parameter to filter the results.", 
        "examples": {}, 
        "id": "showSubnetPool", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the subnet pool of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "default_prefixlen": "64", 
                  "default_quota": null, 
                  "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                  "ip_version": 6, 
                  "max_prefixlen": "64", 
                  "min_prefixlen": "64", 
                  "name": "my-subnet-pool", 
                  "prefixes": [
                    "2001:db8:0:2::/64", 
                    "2001:db8::/63"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows information for a specified subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "title": "Show subnet pool"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "subnetpool": {
              "default_prefixlen": 64, 
              "max_prefixlen": 64, 
              "min_prefixlen": 64, 
              "name": "my-new-subnetpool-name", 
              "prefixes": [
                "2001:db8::/64", 
                "2001:db8:0:1::/64", 
                "2001:db8:0:2::/64"
              ]
            }
          }
        }, 
        "id": "updateSubnetPool", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateSubnetPool"
            }
          }, 
          {
            "description": "The UUID for the subnet pool of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "subnetpool": {
                  "address_scope_id": null, 
                  "default_prefixlen": 64, 
                  "default_quota": null, 
                  "id": "03f761e6-eee0-43fc-a921-8acf64c14988", 
                  "ip_version": 6, 
                  "max_prefixlen": 64, 
                  "min_prefixlen": 64, 
                  "name": "my-new-subnetpool-name", 
                  "prefixes": [
                    "2001:db8::/63", 
                    "2001:db8:0:2::/64"
                  ], 
                  "shared": false, 
                  "tenant_id": "9fadcee8aa7c40cdb2114fff7d569c08"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "title": "Update subnet pool"
      }, 
      {
        "consumes": [], 
        "description": "The operation fails if any subnets allocated from the subnet pool\nare still in use.", 
        "examples": {}, 
        "id": "removeSubnetPool", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the subnet pool of interest to you.", 
            "format": "", 
            "in": "path", 
            "name": "subnetpool_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified subnet pool.", 
        "tags": [
          "subnetpools-ext"
        ], 
        "title": "Delete subnet pool"
      }
    ], 
    "/v2.0/vpn/ikepolicies": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The IKE policy is used for phases one and two negotiation of the\nVPN connection. You can specify both the authentication and\nencryption algorithms for connections.", 
        "examples": {
          "application/json": {
            "ikepolicy": {
              "auth_algorithm": "sha1", 
              "encryption_algorithm": "aes-128", 
              "ike_version": "v1", 
              "lifetime": {
                "units": "seconds", 
                "value": 7200
              }, 
              "name": "ikepolicy1", 
              "pfs": "group5", 
              "phase1_negotiation_mode": "main"
            }
          }
        }, 
        "id": "createIKEPolicy", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIKEPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 7200
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Create IKE policy"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all IKE policies.", 
        "examples": {}, 
        "id": "listIKEPolicies", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ikepolicies": [
                  {
                    "auth_algorithm": "sha1", 
                    "description": "", 
                    "encryption_algorithm": "aes-256", 
                    "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                    "ike_version": "v1", 
                    "lifetime": {
                      "units": "seconds", 
                      "value": 3600
                    }, 
                    "name": "ikepolicy1", 
                    "pfs": "group5", 
                    "phase1_negotiation_mode": "main", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists IKE policies.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "List IKE policies"
      }
    ], 
    "/v2.0/vpn/ikepolicies/{ikepolicy_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Shows the details for a specified IKE policy.", 
        "examples": {}, 
        "id": "showIKEPolicy", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-256", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Show IKE policies"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "ikepolicy": {
              "encryption_algorithm": "aes-256"
            }
          }
        }, 
        "id": "updateIKEPolicy", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIKEPolicy"
            }
          }, 
          {
            "description": "The UUID for the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ikepolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encryption_algorithm": "aes-256", 
                  "id": "5522aff7-1b3c-48dd-9c3c-b50f016b73db", 
                  "ike_version": "v1", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ikepolicy1", 
                  "pfs": "group5", 
                  "phase1_negotiation_mode": "main", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates policy settings in a specified IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Update IKE policy"
      }, 
      {
        "consumes": [], 
        "description": "Removes the IKE policy specified in the request.", 
        "examples": {}, 
        "id": "deleteIKEPolicy", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the IKE policy.", 
            "format": "", 
            "in": "path", 
            "name": "ikepolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified IKE policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Remove IKE policy"
      }
    ], 
    "/v2.0/vpn/ipsecpolicies": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "The IP security policy specifies the authentication and encryption\nalgorithms and encapsulation mode to use for the established VPN\nconnection.", 
        "examples": {
          "application/json": {
            "ipsecpolicy": {
              "auth_algorithm": "sha1", 
              "encapsulation_mode": "tunnel", 
              "encryption_algorithm": "aes-128", 
              "lifetime": {
                "units": "seconds", 
                "value": 7200
              }, 
              "name": "ipsecpolicy1", 
              "pfs": "group5", 
              "transform_protocol": "esp"
            }
          }
        }, 
        "id": "createIPSecPolicy", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIPSecPolicy"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 7200
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group5", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Create IPSec policy"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all IPSec policies.", 
        "examples": {}, 
        "id": "listIPSecPolicies", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsecpolicies": [
                  {
                    "auth_algorithm": "sha1", 
                    "description": "", 
                    "encapsulation_mode": "tunnel", 
                    "encryption_algorithm": "aes-128", 
                    "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                    "lifetime": {
                      "units": "seconds", 
                      "value": 3600
                    }, 
                    "name": "ipsecpolicy1", 
                    "pfs": "group14", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                    "transform_protocol": "esp"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists IPSec policies.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "List IPSec policies"
      }
    ], 
    "/v2.0/vpn/ipsecpolicies/{ipsecpolicy_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Shows details for a specified IPSec policy.", 
        "examples": {}, 
        "id": "showIPSecPolicy", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group14", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Show IPSec policy"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "ipsecpolicy": {
              "pfs": "group14"
            }
          }
        }, 
        "id": "updateIPSecPolicy", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIPSecPolicy"
            }
          }, 
          {
            "description": "The UUID for the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsecpolicy": {
                  "auth_algorithm": "sha1", 
                  "description": "", 
                  "encapsulation_mode": "tunnel", 
                  "encryption_algorithm": "aes-128", 
                  "id": "5291b189-fd84-46e5-84bd-78f40c05d69c", 
                  "lifetime": {
                    "units": "seconds", 
                    "value": 3600
                  }, 
                  "name": "ipsecpolicy1", 
                  "pfs": "group14", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "transform_protocol": "esp"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates policy settings in a specified IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Update IPSec policy"
      }, 
      {
        "consumes": [], 
        "description": "Removes the IPSec policy specified in the request.", 
        "examples": {}, 
        "id": "deleteIPSecPolicy", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the IPSec policy.", 
            "format": "", 
            "in": "path", 
            "name": "ipsecpolicy_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified IPSec policy.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Remove IPSec policy"
      }
    ], 
    "/v2.0/vpn/ipsecsiteconnections": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Creates a site-to-site IPSec connection for a service.", 
        "examples": {
          "application/json": {
            "ipsec_site_connection": {
              "admin_state_up": true, 
              "dpd": {
                "action": "disabled", 
                "interval": 60, 
                "timeout": 240
              }, 
              "ikepolicy_id": "d3f373dc-0708-4224-b6f8-676adf27dab8", 
              "initiator": "bi-directional", 
              "ipsecpolicy_id": "22b8abdc-e822-45b3-90dd-f2c8512acfa5", 
              "mtu": "1500", 
              "name": "vpnconnection1", 
              "peer_address": "172.24.4.233", 
              "peer_cidrs": [
                "10.2.0.0/24"
              ], 
              "peer_id": "172.24.4.233", 
              "psk": "secret", 
              "vpnservice_id": "7b347d20-6fa3-4e22-b744-c49ee235ae4f"
            }
          }
        }, 
        "id": "createIPSecSiteConnection", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createIPSecSiteConnection"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "", 
                  "dpd": {
                    "action": "disabled", 
                    "interval": 60, 
                    "timeout": 240
                  }, 
                  "id": "af44dfd7-cf91-4451-be57-cd4fdd96b5dc", 
                  "ikepolicy_id": "d3f373dc-0708-4224-b6f8-676adf27dab8", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "22b8abdc-e822-45b3-90dd-f2c8512acfa5", 
                  "mtu": 1500, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.233", 
                  "peer_cidrs": [
                    "10.2.0.0/24"
                  ], 
                  "peer_id": "172.24.4.233", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "PENDING_CREATE", 
                  "tenant_id": "b6887d0b45b54a249b2ce3dee01caa47", 
                  "vpnservice_id": "7b347d20-6fa3-4e22-b744-c49ee235ae4f"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates an IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Create IPSec connection"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listIPSecSiteConnections", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsec_site_connections": [
                  {
                    "admin_state_up": true, 
                    "auth_mode": "psk", 
                    "description": "", 
                    "dpd": {
                      "action": "hold", 
                      "interval": 30, 
                      "timeout": 120
                    }, 
                    "id": "cbc152a0-7e93-4f98-9f04-b085a4bf2511", 
                    "ikepolicy_id": "bf5612ac-15fb-460c-9b3d-6453da2fafa2", 
                    "initiator": "bi-directional", 
                    "ipsecpolicy_id": "8ba867b2-67eb-4835-bb61-c226804a1584", 
                    "mtu": 1500, 
                    "name": "vpnconnection1", 
                    "peer_address": "172.24.4.226", 
                    "peer_cidrs": [
                      "10.1.0.0/24"
                    ], 
                    "peer_id": "172.24.4.226", 
                    "psk": "secret", 
                    "route_mode": "static", 
                    "status": "PENDING_CREATE", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                    "vpnservice_id": "c2f3178d-5530-4c4a-89fc-050ecd552636"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists IPSec connections.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "List IPSec connections"
      }
    ], 
    "/v2.0/vpn/ipsecsiteconnections/{connection_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showIPSecSiteConnection", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "", 
                  "dpd": {
                    "action": "hold", 
                    "interval": 30, 
                    "timeout": 120
                  }, 
                  "id": "cbc152a0-7e93-4f98-9f04-b085a4bf2511", 
                  "ikepolicy_id": "bf5612ac-15fb-460c-9b3d-6453da2fafa2", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "8ba867b2-67eb-4835-bb61-c226804a1584", 
                  "mtu": 1500, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.226", 
                  "peer_cidrs": [
                    "10.1.0.0/24"
                  ], 
                  "peer_id": "172.24.4.226", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "PENDING_CREATE", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330", 
                  "vpnservice_id": "c2f3178d-5530-4c4a-89fc-050ecd552636"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Show IPSec connection"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "application/json": {
            "ipsec_site_connection": {
              "mtu": "2000"
            }
          }
        }, 
        "id": "updateIPSecSiteConnection", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateIPSecSiteConnection"
            }
          }, 
          {
            "description": "The UUID for the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "ipsec_site_connection": {
                  "admin_state_up": true, 
                  "auth_mode": "psk", 
                  "description": "", 
                  "dpd": {
                    "action": "hold", 
                    "interval": 30, 
                    "timeout": 120
                  }, 
                  "id": "f7cf7305-f491-45f4-ad9c-8e7240fe3d72", 
                  "ikepolicy_id": "771f081c-5ec8-4f9a-b041-015dfb7fbbe2", 
                  "initiator": "bi-directional", 
                  "ipsecpolicy_id": "9958d4fe-3719-4e8c-84e7-9893895b76b4", 
                  "mtu": 2000, 
                  "name": "vpnconnection1", 
                  "peer_address": "172.24.4.233", 
                  "peer_cidrs": [
                    "10.2.0.0/24"
                  ], 
                  "peer_id": "172.24.4.233", 
                  "psk": "secret", 
                  "route_mode": "static", 
                  "status": "DOWN", 
                  "tenant_id": "26de9cd6cae94c8cb9f79d660d628e1f", 
                  "vpnservice_id": "41bfef97-af4e-4f6b-a5d3-4678859d2485"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates connection settings for a specified IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Update IPSec connection"
      }, 
      {
        "consumes": [], 
        "description": "Removes the IPSec connection specified in the request.", 
        "examples": {}, 
        "id": "deleteIPSecSiteConnection", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the IPSec site-to-site connection.", 
            "format": "", 
            "in": "path", 
            "name": "connection_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified IPSec connection.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Remove IPSec connection"
      }
    ], 
    "/v2.0/vpn/vpnservices": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation lists all VPN services.\n\nThe list might be empty.", 
        "examples": {}, 
        "id": "listVPNServices", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vpnservices": [
                  {
                    "admin_state_up": true, 
                    "description": "", 
                    "id": "9faaf49f-dd89-4e39-a8c6-101839aa49bc", 
                    "name": "myservice", 
                    "router_id": "ec8619be-0ba8-4955-8835-3b49ddb76f89", 
                    "status": "PENDING_CREATE", 
                    "subnet_id": "f4fb4528-ed93-467c-a57b-11c7ea9f963e", 
                    "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                  }
                ]
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Lists VPN services.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "List VPN services"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Creates a VPN service object. The service is associated with a\nrouter and a local (private) subnet. After the service is created,\nit can contain multiple VPN connections.\n\nExample:", 
        "examples": {
          "application/json": {
            "vpnservice": {
              "admin_state_up": true, 
              "name": "myservice", 
              "router_id": "ec8619be-0ba8-4955-8835-3b49ddb76f89", 
              "subnet_id": "f4fb4528-ed93-467c-a57b-11c7ea9f963e"
            }
          }
        }, 
        "id": "createVPNService", 
        "method": "post", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/createVPNService"
            }
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "201": {
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "", 
                  "id": "9faaf49f-dd89-4e39-a8c6-101839aa49bc", 
                  "name": "myservice", 
                  "router_id": "ec8619be-0ba8-4955-8835-3b49ddb76f89", 
                  "status": "PENDING_CREATE", 
                  "subnet_id": "f4fb4528-ed93-467c-a57b-11c7ea9f963e", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Creates a VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Create VPN service"
      }
    ], 
    "/v2.0/vpn/vpnservices/{service_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "Shows details for a specified VPN service. If the user is not an\nadministrative user and the VPN service object does not belong to\nthe user's tenant account, a 403 (Forbidden) error is returned.", 
        "examples": {}, 
        "id": "showVPNService", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID for the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "", 
                  "id": "9faaf49f-dd89-4e39-a8c6-101839aa49bc", 
                  "name": "myservice", 
                  "router_id": "ec8619be-0ba8-4955-8835-3b49ddb76f89", 
                  "status": "PENDING_CREATE", 
                  "subnet_id": "f4fb4528-ed93-467c-a57b-11c7ea9f963e", 
                  "tenant_id": "ccb81365fe36411a9011e90491fe1330"
                }
              }
            }, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "403": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Shows details for a specified VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Show VPN service details"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "This operation updates the attributes of a specified VPN service.\nTo update a service, the service status cannot be a ``PENDING_*``\nstatus.", 
        "examples": {
          "application/json": {
            "vpnservice": {
              "description": "Updated description"
            }
          }
        }, 
        "id": "updateVPNService", 
        "method": "put", 
        "parameters": [
          {
            "description": "", 
            "in": "body", 
            "name": "body", 
            "required": false, 
            "schema": {
              "$ref": "#/definitions/updateVPNService"
            }
          }, 
          {
            "description": "The UUID for the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "vpnservice": {
                  "admin_state_up": true, 
                  "description": "Updated description", 
                  "id": "41bfef97-af4e-4f6b-a5d3-4678859d2485", 
                  "name": "myvpn", 
                  "router_id": "881b7b30-4efb-407e-a162-5630a7af3595", 
                  "status": "ACTIVE", 
                  "subnet_id": "25f8a35c-82d5-4f55-a45b-6965936b33f6", 
                  "tenant_id": "26de9cd6cae94c8cb9f79d660d628e1f"
                }
              }
            }, 
            "headers": {}
          }, 
          "400": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Update VPN service"
      }, 
      {
        "consumes": [], 
        "description": "This operation removes a specified VPN service. If the service has\nconnections, the request is rejected.", 
        "examples": {}, 
        "id": "deleteVPNService", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID for the VPN service.", 
            "format": "", 
            "in": "path", 
            "name": "service_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {}, 
            "headers": {}
          }, 
          "401": {
            "examples": {}, 
            "headers": {}
          }, 
          "404": {
            "examples": {}, 
            "headers": {}
          }, 
          "409": {
            "examples": {}, 
            "headers": {}
          }
        }, 
        "summary": "Removes a specified VPN service.", 
        "tags": [
          "vpnaas"
        ], 
        "title": "Remove VPN service"
      }
    ]
  }, 
  "schemes": {}, 
  "securityDefinitions": {}, 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Extensions", 
      "name": "extensions", 
      "summary": "Lists available Networking API v2.0 extensions and shows details\nfor a specifiedextension."
    }, 
    {
      "description": "Quotas extension (quotas)", 
      "name": "quotas", 
      "summary": "Lists, shows information for, updates, and resets quotas."
    }, 
    {
      "description": "Networks provider extended attributes (networks)", 
      "name": "network-provider", 
      "summary": "Lists, creates, shows information for, updates, and deletes\nnetworks."
    }, 
    {
      "description": "Networks multiple provider extension (networks)", 
      "name": "network-multi-provider", 
      "summary": "Enables administrative users to define multiple physical bindings\nfor an OpenStackNetworking network and list or show details for\nnetworks with multiple physicalbindings.\n\nYou cannot update any ``provider`` attributes. If you try to do so,\nanerror occurs.\n\nTo delete a network with multiple physical bindings, issue a normal\ndelete networkrequest.\n\nTo define multiple physical bindings for a network, include a\n``segments`` list in the request body of a ``POST/v2.0/networks``\nrequest. Each element in the ``segments`` listhas the same\nstructure as the provider network attributes. These attributes are\n``provider:network_type`` , ``provider:physical_network`` , and\n``provider:segmentation_id`` . The validation rules for\ntheseattributes are the same as for theNetworks provider extended\nattributes. You cannot use both extensions at thesame time.\n\nThe NSX and ML2 plug-ins support this extension. With the ML2 plug-\nin, you can specifymultiple VLANs for a specified network, a VXLAN\ntunnel ID, and a VLAN."
    }, 
    {
      "description": "VLAN transparency extension (networks)", 
      "name": "network-vlan-transparency", 
      "summary": "Enables plug-ins that support VLAN transparency to deliverVLAN-\ntransparent trunk networks. If the service does not support\nVLANtransparency and a user requests a VLAN-transparent network,\ntheplug-in refuses to create one and returns an appropriateerror to\nthe user.\n\nYou cannot update the ``vlan-transparent`` attribute. Ifyou try to\ndo so, an error occurs.\n\nTo delete a VLAN-transparent network, issue a normal deletenetwork\nrequest.\n\nThe ML2 plug-in currently supports this extension. With the\nML2plug-in, you can set the ``vlan-transparent`` attributeto either\n``true`` or ``false`` ."
    }, 
    {
      "description": "Ports binding extended attributes (ports)", 
      "name": "port-binding", 
      "summary": "Lists, creates, shows information for, and updates ports."
    }, 
    {
      "description": "Security groups (security-groups)", 
      "name": "security-groups", 
      "summary": "Lists, creates, shows information for, updates, and deletessecurity\ngroups."
    }, 
    {
      "description": "Security group rules (security-group-rules)", 
      "name": "security_group-ruless", 
      "summary": "Lists, creates, shows information for, and deletes security\ngrouprules."
    }, 
    {
      "description": "Layer-3 networking", 
      "name": "layer3", 
      "summary": "Routes packets between subnets, forwards packets from internal\nnetworks to externalones, and accesses instances from external\nnetworks through floating IPs.\n\nThis extension introduces these resources:\n\n- **router**. A logical entity for forwardingpackets across internal\n  subnets and NATting them on external networks through\n  anappropriate external gateway.\n\n- **floatingip**. An external IP address that ismapped to a port\n  that is attached to an internal network."
    }, 
    {
      "description": "Metering labels and rules", 
      "name": "metering", 
      "summary": "Creates, modifies, and deletes OpenStack Layer3 metering labels and\nrules."
    }, 
    {
      "description": "Load-Balancer-as-a-Service (LBaaS) 1.0 (STABLE)", 
      "name": "lbaas", 
      "summary": "The LBaaS version 1.0 extension pairs with the Networking 2.0 APIto\nenable OpenStack tenants to manage load balancers for theirVMs.\nWith this extension, you can load-balance client traffic fromone\nnetwork to application services, such as VMs, on the samenetwork.\n\nUse this extension to create and manage virtual IP addresses(VIPs),\npools, members of a pool, health monitors associated witha pool,\nand view status of a resource.\n\nLoad balancer statuses\n\n+----------------+-----------------------------------------------------------------+\n| Status         | Description                                                     |\n+----------------+-----------------------------------------------------------------+\n| ACTIVE         | Resource is ready and active.                                   |\n+----------------+-----------------------------------------------------------------+\n| PENDING_CREATE | Resource is being created.                                      |\n+----------------+-----------------------------------------------------------------+\n| PENDING_UPDATE | Resource is being updated.                                      |\n+----------------+-----------------------------------------------------------------+\n| PENDING_DELETE | Resource is pending deletion.                                   |\n+----------------+-----------------------------------------------------------------+\n| INACTIVE       | Resource was created but is not active.                         |\n+----------------+-----------------------------------------------------------------+\n| ERROR          | Object within the service is not working. The ``error_details`` |\n|                | attribute provides anexplanation for the error, its cause,      |\n|                | andpossibly a solution.                                         |\n+----------------+-----------------------------------------------------------------+"
    }, 
    {
      "description": "Load-Balancer-as-a-Service (LBaaS) 2.0 (EXPERIMENTAL)", 
      "name": "lbaas", 
      "summary": "The LBaaS version 2.0 extension pairs with the Networking 2.0 APIto\nenable OpenStack tenants to manage load balancers for theirVMs.\nWith this extension you can load-balance client traffic fromone\nnetwork to application services, such as VMs, on the samenetwork.\n\nUse this extension to create and manage load balancers,\nlisteners,pools, members of a pool, and health monitors associated\nwith apool and view status of a resource.\n\nLoad balancer statuses\n\n+----------------+-----------------------------------------------------------------+\n| Status         | Description                                                     |\n+----------------+-----------------------------------------------------------------+\n| ACTIVE         | Resource is ready and active.                                   |\n+----------------+-----------------------------------------------------------------+\n| PENDING_CREATE | Resource is being created.                                      |\n+----------------+-----------------------------------------------------------------+\n| PENDING_UPDATE | Resource is being updated.                                      |\n+----------------+-----------------------------------------------------------------+\n| PENDING_DELETE | Resource is pending deletion.                                   |\n+----------------+-----------------------------------------------------------------+\n| INACTIVE       | Resource was created but is not active.                         |\n+----------------+-----------------------------------------------------------------+\n| ERROR          | Object within the service is not working. The ``error_details`` |\n|                | attribute provides anexplanation for the error, its cause, and  |\n|                | possibly asolution.                                             |\n+----------------+-----------------------------------------------------------------+"
    }, 
    {
      "description": "Subnet pools extension (subnetpools)", 
      "name": "subnetpools-ext", 
      "summary": "Manages subnet pools"
    }, 
    {
      "description": "Virtual-Private-Network-as-a-Service (VPNaaS) 2.0 (CURRENT)", 
      "name": "vpnaas", 
      "summary": "The VPNaaS extension enables OpenStack tenants to extend\nprivatenetworks across the public telecommunication infrastructure.\n\nThis initial implementation of the VPNaaS extension provides:\n\n- Site-to-site VPN that connects twoprivate networks.\n\n- Multiple VPN connections per tenant.\n\n- IKEv1 policy support with 3des, aes-128, aes-256,or aes-192\n  encryption.\n\n- IPSec policy support with 3des, aes-128, aes-192, oraes-256\n  encryption, sha1 authentication, ESP, AH, or AH-ESPtransform\n  protocol, and tunnel or transport modeencapsulation.\n\n- Dead Peer Detection (DPD) with hold, clear,restart, disabled, or\n  restart-by-peer actions.\n\nThis extension introduces these resources:\n\n- ``service`` . A parent object that associates VPN with a\n  specificsubnet and router.\n\n- ``ikepolicy`` . The InternetKey Exchange (IKE) policy that\n  identifies theauthentication and encryption algorithm to use\n  duringphase one and two negotiation of a VPN connection.\n\n- ``ipsecpolicy`` . The IP security policy thatspecifies the\n  authentication and encryption algorithm andencapsulation mode to\n  use for the established VPNconnection.\n\n- ``ipsec-site-connection`` . Details forthe site-to-site IPsec\n  connection, including the peerCIDRs, MTU, authentication mode,\n  peer address, DPDsettings, and status."
    }, 
    {
      "description": "Extra routes", 
      "name": "extraroute", 
      "summary": "Adds extra routes to the ``router`` resource.\n\nYou can update a router to add a set of next hop IPs and\ndestinationCIDRs.\n\nThe next hop IP must be part of a subnet towhich the router\ninterfaces are connected. You canconfigure the ``routes`` attribute\non onlyupdate operations."
    }
  ]
}