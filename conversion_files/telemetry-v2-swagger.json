{
  "basePath": {}, 
  "definitions": {
    "listCapabilities_200": {
      "properties": {
        "alarm_storage": {
          "description": "Defines the capabilities for the storage that stores persisting\nalarm definitions. A value of ``true`` indicates that the\ncapability is available.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "alarms:history:query:complex": {
          "description": "Indicates whether the complex query capability for alarm history is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "alarms:history:query:simple": {
          "description": "Indicates whether the simple query capability for alarm history is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "alarms:query:complex": {
          "description": "Indicates whether the complex query capability for alarm\ndefinitions is available for the configured database back end. A\nvalue of ``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "alarms:query:simple": {
          "description": "Indicates whether the simple query capability for alarm definitions\nis available for the configured database back end. A value of\n``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "api": {
          "description": "An array of API capabilities for the configured storage driver.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "event_storage": {
          "description": "Defines the capabilities for the storage that stores persisting\nevents. A value of ``true`` indicates that the capability is\navailable.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "events:query:simple": {
          "description": "Indicates whether the simple query capability for events is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "meters:pagination": {
          "description": "Indicates whether pagination for meters is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "meters:query:complex": {
          "description": "Indicates whether the complex query capability for meters is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "meters:query:metadata": {
          "description": "Indicates whether the simple query capability for the metadata of\nmeters is available for the configured database back end. A value\nof ``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "meters:query:simple": {
          "description": "Indicates whether the simple query capability for meters is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "resources:pagination": {
          "description": "Indicates whether pagination for resources is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "resources:query:complex": {
          "description": "Indicates whether the complex query capability for resources is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "resources:query:metadata": {
          "description": "Indicates whether the simple query capability for the metadata of\nresources is available for the configured database back end. A\nvalue of ``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "resources:query:simple": {
          "description": "Indicates whether the simple query capability for resources is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "samples:pagination": {
          "description": "Indicates whether pagination for samples is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "samples:query:complex": {
          "description": "Indicates whether the complex query capability for samples is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "samples:query:metadata": {
          "description": "Indicates whether the simple query capability for the metadata of\nsamples is available for the configured database back end. A value\nof ``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "samples:query:simple": {
          "description": "Indicates whether the simple query capability for samples is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:avg": {
          "description": "Indicates whether the ``avg`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``avg`` capability to get\naverage values for samples.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:cardinality": {
          "description": "Indicates whether the ``cardinality`` capability is available for\nthe configured database back end. A value of ``true`` indicates\nthat the capability is available. Use the ``cardinality``\ncapability to get cardinality for samples.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:count": {
          "description": "Indicates whether the ``count`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``count`` capability to\ncalculate the number of samples for a specified query.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:max": {
          "description": "Indicates whether the ``max`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``max`` capability to\ncalculate the maximum value for a specified query.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:min": {
          "description": "Indicates whether the ``min`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``min`` capability to\ncalculate the minimum value for a specified query.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:quartile": {
          "description": "Indicates whether the ``quartile`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``quartile`` capability to\ncalculate the quartile of sample volumes for a specified query.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:stddev": {
          "description": "Indicates whether the ``stddev`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``stddev`` capability to\ncalculate the standard deviation of sample volumes for a specified\nquery.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:selectable:sum": {
          "description": "Indicates whether the ``sum`` capability is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available. Use the ``sum`` capability to\ncalculate the sum of sample volumes for a specified query.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:aggregation:standard": {
          "description": "Indicates whether the ``standard`` set of aggregation capability is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:groupby": {
          "description": "Indicates whether the ``groupby`` capabilityality is available for\ncalculating statistics for the configured database back end. A\nvalue of ``true`` indicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:pagination": {
          "description": "Indicates whether pagination for statistics is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:query:complex": {
          "description": "Indicates whether the complex query capability for statistics is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:query:metadata": {
          "description": "Indicates whether the simple query capability for the metadata of\nsamples used for calculating statistics is available for the\nconfigured database back end. A value of ``true`` indicates that\nthe capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "statistics:query:simple": {
          "description": "Indicates whether the simple query capability for statistics is\navailable for the configured database back end. A value of ``true``\nindicates that the capability is available.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }, 
        "storage": {
          "description": "Defines the capabilities for the storage that stores persisting\nsamples. A value of ``true`` indicates that the capability is\navailable.", 
          "format": "", 
          "required": true, 
          "type": "array"
        }, 
        "storage:production_ready": {
          "description": "Indicates whether the the configured database back end is ready to\nuse in production environment. A value of ``true`` indicates that\nthe database back end is ready to use in a production environment.", 
          "format": "", 
          "required": true, 
          "type": "boolean"
        }
      }, 
      "type": "object"
    }
  }, 
  "externalDocs": {}, 
  "host": {}, 
  "info": {
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "service": "telemetry", 
    "title": "Telemetry", 
    "version": "v2"
  }, 
  "paths": {
    "/v2/alarms": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "GET /v2/alarms HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "listAlarms", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filter rules for the alarms to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 1688\ncontent-location: http://127.0.0.1:8777/v2/alarms\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:08 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-33f68521-8743-4554-a50a-3adc1b849559\n\n[\n  {\n    \"alarm_actions\": [],\n    \"alarm_id\": \"7b5897f6-7dcd-4253-ba99-8d3435459aa5\",\n    \"description\": \"Alarm when cpu_util is gt a avg of 80.0 over 70 seconds\",\n    \"enabled\": true,\n    \"insufficient_data_actions\": [],\n    \"name\": \"tempest-telemetry_alarm-1166578842\",\n    \"ok_actions\": [],\n    \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"repeat_actions\": false,\n    \"severity\": \"low\",\n    \"state\": \"insufficient data\",\n    \"state_timestamp\": \"2015-09-22T06:06:08.779063\",\n    \"threshold_rule\": {\n      \"comparison_operator\": \"gt\",\n      \"evaluation_periods\": 1,\n      \"exclude_outliers\": false,\n      \"meter_name\": \"cpu_util\",\n      \"period\": 70,\n      \"query\": [\n        {\n          \"field\": \"project_id\",\n          \"op\": \"eq\",\n          \"value\": \"4e397d0d62414540be0a0844cedfa015\"\n        }\n      ],\n      \"statistic\": \"avg\",\n      \"threshold\": 80.0\n    },\n    \"time_constraints\": [],\n    \"timestamp\": \"2015-09-22T06:06:08.779063\",\n    \"type\": \"threshold\",\n    \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n  },\n  {\n    \"alarm_actions\": [],\n    \"alarm_id\": \"d6e06168-7a3f-4854-b114-8842b520d2b6\",\n    \"description\": \"Alarm when cpu_util is gt a avg of 80.0 over 70 seconds\",\n    \"enabled\": true,\n    \"insufficient_data_actions\": [],\n    \"name\": \"tempest-telemetry_alarm-2046711287\",\n    \"ok_actions\": [],\n    \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"repeat_actions\": false,\n    \"severity\": \"low\",\n    \"state\": \"insufficient data\",\n    \"state_timestamp\": \"2015-09-22T06:06:08.748864\",\n    \"threshold_rule\": {\n      \"comparison_operator\": \"gt\",\n      \"evaluation_periods\": 1,\n      \"exclude_outliers\": false,\n      \"meter_name\": \"cpu_util\",\n      \"period\": 70,\n      \"query\": [\n        {\n          \"field\": \"project_id\",\n          \"op\": \"eq\",\n          \"value\": \"4e397d0d62414540be0a0844cedfa015\"\n        }\n      ],\n      \"statistic\": \"avg\",\n      \"threshold\": 80.0\n    },\n    \"time_constraints\": [],\n    \"timestamp\": \"2015-09-22T06:06:08.748864\",\n    \"type\": \"threshold\",\n    \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n  }\n]"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists alarms, based on the specified query.", 
        "tags": [
          "alarms"
        ], 
        "title": "List alarms"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "POST /v2/alarms HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "createAlarm", 
        "method": "post", 
        "parameters": [
          {
            "description": "An alarm within the request body.", 
            "format": "", 
            "in": "query", 
            "name": "data", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "alarm_actions": [
                  "http://site:8000/alarm"
                ], 
                "alarm_id": null, 
                "combination_rule": null, 
                "description": "An alarm", 
                "enabled": true, 
                "insufficient_data_actions": [
                  "http://site:8000/nodata"
                ], 
                "name": "SwiftObjectAlarm", 
                "ok_actions": [
                  "http://site:8000/ok"
                ], 
                "project_id": "c96c887c216949acbdfbd8b494863567", 
                "repeat_actions": false, 
                "state": "ok", 
                "state_timestamp": "2013-11-21T12:33:08.486228", 
                "threshold_rule": null, 
                "timestamp": "2013-11-21T12:33:08.486221", 
                "type": "threshold", 
                "user_id": "c96c887c216949acbdfbd8b494863567"
              }
            }, 
            "headers": {}
          }, 
          "201": {
            "examples": {
              "text/plain": "HTTP/1.1 201\nstatus: 201\ncontent-length: 842\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:08 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-2cdce35b-6160-4744-a258-88b0c047830b\n\n{\n  \"alarm_actions\": [],\n  \"alarm_id\": \"7b5897f6-7dcd-4253-ba99-8d3435459aa5\",\n  \"description\": \"Alarm when cpu_util is gt a avg of 80.0 over 70 seconds\",\n  \"enabled\": true,\n  \"insufficient_data_actions\": [],\n  \"name\": \"tempest-telemetry_alarm-1166578842\",\n  \"ok_actions\": [],\n  \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n  \"repeat_actions\": false,\n  \"severity\": \"low\",\n  \"state\": \"insufficient data\",\n  \"state_timestamp\": \"2015-09-22T06:06:08.779063\",\n  \"threshold_rule\": {\n    \"comparison_operator\": \"gt\",\n    \"evaluation_periods\": 1,\n    \"exclude_outliers\": false,\n    \"meter_name\": \"cpu_util\",\n    \"period\": 70,\n    \"query\": [\n      {\n        \"field\": \"project_id\",\n        \"op\": \"eq\",\n        \"value\": \"4e397d0d62414540be0a0844cedfa015\"\n      }\n    ],\n    \"statistic\": \"avg\",\n    \"threshold\": 80.0\n  },\n  \"time_constraints\": [],\n  \"timestamp\": \"2015-09-22T06:06:08.779063\",\n  \"type\": \"threshold\",\n  \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n}"
            }
          }
        }, 
        "summary": "Creates an alarm.", 
        "tags": [
          "alarms"
        ], 
        "title": "Create alarm"
      }
    ], 
    "/v2/alarms/{alarm_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "GET /v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74 HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "showAlarm", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 837\ncontent-location: http://127.0.0.1:8777/v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:08 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-bbb33def-ee71-41fd-b3e1-79872afb0071\n\n{\n  \"alarm_actions\": [],\n  \"alarm_id\": \"e8406422-3b2f-4914-9010-4a17b4838f74\",\n  \"description\": \"Alarm when cpu is eq a avg of 70.0 over 60 seconds\",\n  \"enabled\": true,\n  \"insufficient_data_actions\": [],\n  \"name\": \"tempest-telemetry-alarm-update-95497746\",\n  \"ok_actions\": [],\n  \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n  \"repeat_actions\": false,\n  \"severity\": \"low\",\n  \"state\": \"insufficient data\",\n  \"state_timestamp\": \"2015-09-22T06:06:08.890079\",\n  \"threshold_rule\": {\n    \"comparison_operator\": \"eq\",\n    \"evaluation_periods\": 1,\n    \"exclude_outliers\": false,\n    \"meter_name\": \"cpu\",\n    \"period\": 60,\n    \"query\": [\n      {\n        \"field\": \"project_id\",\n        \"op\": \"eq\",\n        \"value\": \"4e397d0d62414540be0a0844cedfa015\"\n      }\n    ],\n    \"statistic\": \"avg\",\n    \"threshold\": 70.0\n  },\n  \"time_constraints\": [],\n  \"timestamp\": \"2015-09-22T06:06:08.948701\",\n  \"type\": \"threshold\",\n  \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n}"
            }, 
            "headers": {}
          }, 
          "404": {
            "examples": {
              "text/plain": "HTTP/1.1 404\nstatus: 404\ncontent-length: 176\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:09 GMT\ncontent-type: application/json\nx-openstack-request-id: req-2a291999-9fe0-42ee-a9cb-1bc50f909be1\n\n{\n  \"error_message\": {\n    \"debuginfo\": null,\n    \"faultcode\": \"Client\",\n    \"faultstring\": \"Alarm e8406422-3b2f-4914-9010-4a17b4838f74 not found in project 4e397d0d62414540be0a0844cedfa015\"\n  }\n}"
            }
          }
        }, 
        "summary": "Shows information for a specified alarm, by alarm ID.", 
        "tags": [
          "alarms"
        ], 
        "title": "Show alarm"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "PUT /v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74 HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "updateAlarm", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "An alarm within the request body.", 
            "format": "", 
            "in": "query", 
            "name": "data", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 837\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:08 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-6df468c3-68b8-4227-907e-26f9d695e398\n\n{\n  \"alarm_actions\": [],\n  \"alarm_id\": \"e8406422-3b2f-4914-9010-4a17b4838f74\",\n  \"description\": \"Alarm when cpu is eq a avg of 70.0 over 60 seconds\",\n  \"enabled\": true,\n  \"insufficient_data_actions\": [],\n  \"name\": \"tempest-telemetry-alarm-update-95497746\",\n  \"ok_actions\": [],\n  \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n  \"repeat_actions\": false,\n  \"severity\": \"low\",\n  \"state\": \"insufficient data\",\n  \"state_timestamp\": \"2015-09-22T06:06:08.890079\",\n  \"threshold_rule\": {\n    \"comparison_operator\": \"eq\",\n    \"evaluation_periods\": 1,\n    \"exclude_outliers\": false,\n    \"meter_name\": \"cpu\",\n    \"period\": 60,\n    \"query\": [\n      {\n        \"field\": \"project_id\",\n        \"op\": \"eq\",\n        \"value\": \"4e397d0d62414540be0a0844cedfa015\"\n      }\n    ],\n    \"statistic\": \"avg\",\n    \"threshold\": 70.0\n  },\n  \"time_constraints\": [],\n  \"timestamp\": \"2015-09-22T06:06:08.948701\",\n  \"type\": \"threshold\",\n  \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n}"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Updates a specified alarm.", 
        "tags": [
          "alarms"
        ], 
        "title": "Update alarm"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {
          "text/plain": "DELETE /v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74 HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "deleteAlarm", 
        "method": "delete", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "204": {
            "examples": {
              "text/plain": "HTTP/1.1 204\ndate: Tue, 22 Sep 2015 06:06:09 GMT\nstatus: 204\ncontent-length: 0\nx-openstack-request-id: req-01e114bd-4e90-4cbe-bd75-f9a4e7a5fe85\nserver: Werkzeug/0.10.4 Python/2.7.6\n\n"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Deletes a specified alarm, by alarm ID.", 
        "tags": [
          "alarms"
        ], 
        "title": "Delete alarm"
      }
    ], 
    "/v2/alarms/{alarm_id}/history": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {
          "text/plain": "GET /v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74/history HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "showAlarmHistory", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter rules for the changes to be described.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 2009\ncontent-location: http://127.0.0.1:8777/v2/alarms/e8406422-3b2f-4914-9010-4a17b4838f74/history\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:08 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-b3e8caba-03c3-48ce-8a27-db057adfb362\n\n[\n  {\n    \"alarm_id\": \"e8406422-3b2f-4914-9010-4a17b4838f74\",\n    \"detail\": \"{\\\"name\\\": \\\"tempest-telemetry-alarm-update-95497746\\\", \\\"rule\\\": {\\\"meter_name\\\": \\\"cpu\\\", \\\"evaluation_periods\\\": 1, \\\"period\\\": 60, \\\"statistic\\\": \\\"avg\\\", \\\"threshold\\\": 70.0, \\\"query\\\": [{\\\"field\\\": \\\"project_id\\\", \\\"value\\\": \\\"4e397d0d62414540be0a0844cedfa015\\\", \\\"op\\\": \\\"eq\\\"}], \\\"comparison_operator\\\": \\\"eq\\\", \\\"exclude_outliers\\\": false}, \\\"description\\\": \\\"Alarm when cpu is eq a avg of 70.0 over 60 seconds\\\"}\",\n    \"event_id\": \"22bd7888-6e80-43a8-8c3a-69434436e65e\",\n    \"on_behalf_of\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"timestamp\": \"2015-09-22T06:06:08.948701\",\n    \"type\": \"rule change\",\n    \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n  },\n  {\n    \"alarm_id\": \"e8406422-3b2f-4914-9010-4a17b4838f74\",\n    \"detail\": \"{\\\"alarm_actions\\\": [], \\\"user_id\\\": \\\"4c97b283e8a04ddd894ded0c96293921\\\", \\\"name\\\": \\\"tempest-telemetry_alarm-1193975763\\\", \\\"state\\\": \\\"insufficient data\\\", \\\"timestamp\\\": \\\"2015-09-22T06:06:08.890079\\\", \\\"description\\\": \\\"Alarm when cpu_util is gt a avg of 80.0 over 70 seconds\\\", \\\"enabled\\\": true, \\\"state_timestamp\\\": \\\"2015-09-22T06:06:08.890079\\\", \\\"rule\\\": {\\\"meter_name\\\": \\\"cpu_util\\\", \\\"evaluation_periods\\\": 1, \\\"period\\\": 70, \\\"statistic\\\": \\\"avg\\\", \\\"threshold\\\": 80.0, \\\"query\\\": [{\\\"field\\\": \\\"project_id\\\", \\\"value\\\": \\\"4e397d0d62414540be0a0844cedfa015\\\", \\\"op\\\": \\\"eq\\\"}], \\\"comparison_operator\\\": \\\"gt\\\", \\\"exclude_outliers\\\": false}, \\\"alarm_id\\\": \\\"e8406422-3b2f-4914-9010-4a17b4838f74\\\", \\\"time_constraints\\\": [], \\\"insufficient_data_actions\\\": [], \\\"repeat_actions\\\": false, \\\"ok_actions\\\": [], \\\"project_id\\\": \\\"4e397d0d62414540be0a0844cedfa015\\\", \\\"type\\\": \\\"threshold\\\", \\\"severity\\\": \\\"low\\\"}\",\n    \"event_id\": \"f4cd7f07-4126-4b50-82b7-a66c16e6ae50\",\n    \"on_behalf_of\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"project_id\": \"4e397d0d62414540be0a0844cedfa015\",\n    \"timestamp\": \"2015-09-22T06:06:08.890079\",\n    \"type\": \"creation\",\n    \"user_id\": \"4c97b283e8a04ddd894ded0c96293921\"\n  }\n]"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Assembles and shows the history for a specified alarm, by alarm ID.", 
        "tags": [
          "alarms"
        ], 
        "title": "Show alarm history"
      }
    ], 
    "/v2/alarms/{alarm_id}/state": [
      {
        "consumes": [], 
        "description": "", 
        "examples": {
          "text/plain": "PUT /v2/alarms/9a18b5ee-5622-44e4-a730-c1db11b351ad/state HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "updateAlarmState", 
        "method": "put", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "An alarm state within the request body. A valid value is ``ok`` ,\n``alarm`` , or ``insufficient data`` .", 
            "format": "", 
            "in": "query", 
            "name": "state", 
            "required": false, 
            "type": "object"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 4\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:09 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-0771d376-62a3-4b12-b87e-5fe428db70d8\n\nok"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Sets the state of a specified alarm.", 
        "tags": [
          "alarms"
        ], 
        "title": "Update alarm state"
      }, 
      {
        "consumes": [], 
        "description": "", 
        "examples": {
          "text/plain": "GET /v2/alarms/9a18b5ee-5622-44e4-a730-c1db11b351ad/state HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "showAlarmState", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the alarm.", 
            "format": "", 
            "in": "path", 
            "name": "alarm_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 4\ncontent-location: http://127.0.0.1:8777/v2/alarms/9a18b5ee-5622-44e4-a730-c1db11b351ad/state\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:06:09 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-47d9d41a-aec2-42e6-9af6-76e4e285b7cc\n\nok"
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows the state for a specified alarm, by alarm ID.", 
        "tags": [
          "alarms"
        ], 
        "title": "Show alarm state"
      }
    ], 
    "/v2/capabilities": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listCapabilities", 
        "method": "get", 
        "parameters": [], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "alarm_storage": {
                  "storage:production_ready": true
                }, 
                "api": {
                  "alarms:history:query:complex": true, 
                  "alarms:history:query:simple": true, 
                  "alarms:query:complex": true, 
                  "alarms:query:simple": true, 
                  "events:query:simple": true, 
                  "meters:pagination": true, 
                  "meters:query:complex": false, 
                  "meters:query:metadata": true, 
                  "meters:query:simple": true, 
                  "resources:pagination": false, 
                  "resources:query:complex": false, 
                  "resources:query:metadata": true, 
                  "resources:query:simple": true, 
                  "samples:pagination": true, 
                  "samples:query:complex": true, 
                  "samples:query:metadata": true, 
                  "samples:query:simple": true, 
                  "statistics:aggregation:selectable:avg": true, 
                  "statistics:aggregation:selectable:cardinality": true, 
                  "statistics:aggregation:selectable:count": true, 
                  "statistics:aggregation:selectable:max": true, 
                  "statistics:aggregation:selectable:min": true, 
                  "statistics:aggregation:selectable:quartile": false, 
                  "statistics:aggregation:selectable:stddev": true, 
                  "statistics:aggregation:selectable:sum": true, 
                  "statistics:aggregation:standard": true, 
                  "statistics:groupby": true, 
                  "statistics:pagination": true, 
                  "statistics:query:complex": false, 
                  "statistics:query:metadata": true, 
                  "statistics:query:simple": true
                }, 
                "event_storage": {
                  "storage:production_ready": true
                }, 
                "storage": {
                  "storage:production_ready": true
                }
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "A representation of the API and storage capabilities. Usually constrained by restrictions imposed by the storage driver.", 
        "tags": [
          "capabilities"
        ], 
        "title": "List capabilities"
      }
    ], 
    "/v2/meters": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listMeters", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filter rules for the meters to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }, 
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "meter_id": "YmQ5NDMxYzEtOGQ2OS00YWQzLTgwM2EtOGQ0YTZiODlmZDM2K2luc3RhbmNl\n", 
                  "name": "instance", 
                  "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                  "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                  "source": "openstack", 
                  "type": "gauge", 
                  "unit": "instance", 
                  "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
                }
              ]
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists meters, based on the data recorded so far.", 
        "tags": [
          "meters"
        ], 
        "title": "List meters"
      }
    ], 
    "/v2/meters/{meter_name}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {
          "text/plain": "GET /v2/meters/memory?q.op=eq&q.value=bb1922d9-4ae7-4222-a754-4758cef6affe&q.field=resource HTTP/1.1\ncontent-type: application/json\naccept: application/json\nx-auth-token: <omitted>\n"
        }, 
        "id": "listSamplesforMeter", 
        "method": "get", 
        "parameters": [
          {
            "description": "The name of the meter.", 
            "format": "", 
            "in": "path", 
            "name": "meter_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter rules for the data to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }, 
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "text/plain": "HTTP/1.1 200\nstatus: 200\ncontent-length: 18357\ncontent-location: http://127.0.0.1:8777/v2/meters/memory?q.op=eq&q.value=bb1922d9-4ae7-4222-a754-4758cef6affe&q.field=resource\nserver: Werkzeug/0.10.4 Python/2.7.6\ndate: Tue, 22 Sep 2015 06:13:05 GMT\ncontent-type: application/json; charset=UTF-8\nx-openstack-request-id: req-051356d4-7052-4e43-b5af-32d7ce517187\n\n[{\"counter_name\": \"memory\", \"user_id\": \"c0c674fa6ad742bb90e64f6413db50f7\", \"resource_id\": \"bb1922d9-4ae7-4222-a754-4758cef6affe\", \"timestamp\": \"2015-09-22T06:13:04.657207\", \"recorded_at\": \"2015-09-22T06:13:04.854695\", \"message_id\": \"fc58b5e4-60f0-11e5-9c6f-fa163eff00f6\", \"source\": \"openstack\", \"counter_unit\": \"MB\", \"counter_volume\": 64.0, \"project_id\": \"62fa3d5f3ecb453b8a77771ec1de9f2d\", \"resource_metadata\": {\"state_description\": \"\", \"image_meta.base_image_ref\": \"db8ff66c-0e54-4a7b-931c-aa715c78917e\", \"event_type\": \"compute.instance.create.end\", \"availability_zone\": \"None\", \"terminated_at\": \"\", \"ephemeral_gb\": \"0\", \"instance_type_id\": \"6\", \"message\": \"Success\", \"deleted_at\": \"\", \"fixed_ips\": \"[{'version': 4, 'vif_mac': 'fa:16:3e:83:c5:34', 'floating_ips': [], 'label': 'private', 'meta': {}, 'address': '10.1.0.5', 'type': 'fixed'}]\", \"memory_mb\": \"64\", \"display_name\": \"tempest-ceilometer-instance-1128525961\", \"reservation_id\": \"r-hb4pbo6x\", \"hostname\": \"tempest-ceilometer-instance-1128525961\", \"state\": \"active\", \"image_meta.min_disk\": \"0\", \"image_meta.kernel_id\": \"8edeeee9-dda0-4a03-8934-317b46b7343a\", \"progress\": \"\", \"launched_at\": \"2015-09-22T06:13:04.355630\", \"node\": \"devstack-trusty-hpcloud-b5-5038802\", \"ramdisk_id\": \"f34e4626-2b5d-478a-b079-b73012a0e4ad\", \"access_ip_v6\": \"None\", \"disk_gb\": \"0\", \"access_ip_v4\": \"None\", \"kernel_id\": \"8edeeee9-dda0-4a03-8934-317b46b7343a\", \"image_meta.disk_format\": \"ami\", \"image_meta.container_format\": \"ami\", \"user_id\": \"c0c674fa6ad742bb90e64f6413db50f7\", \"image_ref_url\": \"http://10.0.4.137:9292/images/db8ff66c-0e54-4a7b-931c-aa715c78917e\", \"cell_name\": \"\", \"image_meta.ramdisk_id\": \"f34e4626-2b5d-478a-b079-b73012a0e4ad\", \"root_gb\": \"0\", \"tenant_id\": \"62fa3d5f3ecb453b8a77771ec1de9f2d\", \"created_at\": \"2015-09-22 06:12:58+00:00\", \"image_meta.min_ram\": \"0\", \"host\": \"compute.devstack-trusty-hpcloud-b5-5038802\", \"instance_id\": \"bb1922d9-4ae7-4222-a754-4758cef6affe\", \"instance_type\": \"m1.nano\", \"vcpus\": \"1\", \"architecture\": \"None\", \"os_type\": \"None\", \"instance_flavor_id\": \"42\"}, \"counter_type\": \"gauge\"}, {\"counter_name\": \"memory\", \"user_id\": \"c0c674fa6ad742bb90e64f6413db50f7\", \"resource_id\": \"bb1922d9-4ae7-4222-a754-4758cef6affe\", \"timestamp\": \"2015-09-22T06:13:04.627959\", \"recorded_at\": \"2015-09-22T06:13:04.756667\", \"message_id\": \"fc533d76-60f0-11e5-9c6f-fa163eff00f6\", \"source\": \"openstack\", \"counter_unit\": \"MB\", \"counter_volume\": 64.0, \"project_id\": \"62fa3d5f3ecb453b8a77771ec1de9f2d\", \"resource_metadata\": {\"state_description\": \"\", \"image_meta.base_image_ref\": \"db8ff66c-0e54-4a7b-931c-aa715c78917e\", \"event_type\": \"compute.instance.update\", \"availability_zone\": \"None\", \"terminated_at\": \"\", \"ephemeral_gb\": \"0\", \"instance_type_id\": \"6\", \"deleted_at\": \"\", \"reservation_id\": \"r-hb4pbo6x\", \"memory_mb\": \"64\", \"display_name\": \"tempest-ceilometer-instance-1128525961\", \"instance_type\": \"m1.nano\", \"hostname\": \"tempest-ceilometer-instance-1128525961\", \"state\": \"active\", \"image_ref_url\": \"http://10.0.4.137:9292/images/db8ff66c-0e54-4a7b-931c-aa715c78917e\", \"image_meta.kernel_id\": \"8edeeee9-dda0-4a03-8934-317b46b7343a\", \"old_state\": \"building\", \"progress\": \"\", \"launched_at\": \"2015-09-22T06:13:04.000000\", \"node\": \"devstack-trusty-hpcloud-b5-5038802\", \"ramdisk_id\": \"f34e4626-2b5d-478a-b079-b73012a0e4ad\", \"access_ip_v6\": \"None\", \"disk_gb\": \"0\", \"access_ip_v4\": \"None\", \"kernel_id\": \"8edeeee9-dda0-4a03-8934-317b46b7343a\", \"image_meta.disk_format\": \"ami\", \"image_meta.container_format\": \"ami\", \"user_id\": \"c0c674fa6ad742bb90e64f6413db50f7\", \"image_meta.min_disk\": \"0\", \"cell_name\": \"\", \"audit_period_beginning\": \"2015-09-22T06:00:00.000000\", \"root_gb\": \"0\", \"tenant_id\": \"62fa3d5f3ecb453b8a77771ec1de9f2d\", \"created_at\": \"2015-09-22 06:12:58+00:00\", \"image_meta.min_ram\": \"0\", \"host\": \"compute.devstack-trusty-hpcloud-b5-5038802\", \"old_task_state\": \"spawning\", \"instance_id\": \"bb1922d9-4ae7-4222-a754-4758cef6affe\", \"image_meta.ramdisk_id\": \"f34e4626-2b5d-478a-b079-b73012a0e4ad\", \"vcpus\": \"1\", \"architecture\": \"None\", \"new_task_state\": \"None\", \"audit_period_ending\": \"2015-09-22T06:13:04.564995\", \"os_type\": \"None\", \"instance "
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists samples for a specified meter, by meter name.", 
        "tags": [
          "meters"
        ], 
        "title": "List samples for meter"
      }, 
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "createMeter", 
        "method": "post", 
        "parameters": [
          {
            "description": "The name of the meter.", 
            "format": "", 
            "in": "path", 
            "name": "meter_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "A list of samples within the request body.", 
            "format": "", 
            "in": "query", 
            "name": "samples", 
            "required": false, 
            "type": "array"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "counter_name": "instance", 
                  "counter_type": "gauge", 
                  "counter_unit": "instance", 
                  "counter_volume": 1.0, 
                  "message_id": "5460acce-4fd6-480d-ab18-9735ec7b1996", 
                  "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                  "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                  "resource_metadata": {
                    "name1": "value1", 
                    "name2": "value2"
                  }, 
                  "source": "openstack", 
                  "timestamp": "2013-11-21T12:33:08.323533", 
                  "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
                }
              ]
            }, 
            "headers": {}
          }
        }, 
        "summary": "Adds a list of samples to the specified meter, by meter name.", 
        "tags": [
          "meters"
        ], 
        "title": "Create meter"
      }
    ], 
    "/v2/meters/{meter_name}/statistics": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listSamplesStatistics", 
        "method": "get", 
        "parameters": [
          {
            "description": "The name of the meter.", 
            "format": "", 
            "in": "path", 
            "name": "meter_name", 
            "required": false, 
            "type": "string"
          }, 
          {
            "description": "Filter rules for the data to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }, 
          {
            "description": "Fields for group by aggregation", 
            "format": "", 
            "in": "query", 
            "name": "groupby", 
            "required": false, 
            "type": "array"
          }, 
          {
            "description": "The period, in seconds, for which you want statistics.", 
            "format": "", 
            "in": "query", 
            "name": "period", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "avg": 4.5, 
                  "count": 10, 
                  "duration": 300.0, 
                  "duration_end": "2013-01-04T16:47:00", 
                  "duration_start": "2013-01-04T16:42:00", 
                  "max": 9.0, 
                  "min": 1.0, 
                  "period": 7200, 
                  "period_end": "2013-01-04T18:00:00", 
                  "period_start": "2013-01-04T16:00:00", 
                  "sum": 45.0, 
                  "unit": "GiB"
                }
              ]
            }, 
            "headers": {}
          }
        }, 
        "summary": "Computes and lists statistics for samples in a specified time range.", 
        "tags": [
          "meters"
        ], 
        "title": "Show meter statistics"
      }
    ], 
    "/v2/resources": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listResources", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filter rules for the resources to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "links": [
                    {
                      "href": "http://localhost:8777/v2/resources/bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                      "rel": "self"
                    }, 
                    {
                      "href": "http://localhost:8777/v2/meters/volume?q.field=resource_id&q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                      "rel": "volume"
                    }
                  ], 
                  "metadata": {
                    "name1": "value1", 
                    "name2": "value2"
                  }, 
                  "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                  "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                  "source": "openstack", 
                  "timestamp": "2013-11-21T12:33:08.189843", 
                  "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
                }
              ]
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists definitions for all resources.", 
        "tags": [
          "resources"
        ], 
        "title": "List resources"
      }
    ], 
    "/v2/resources/{resource_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showResource", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the resource.", 
            "format": "", 
            "in": "path", 
            "name": "resource_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "links": [
                  {
                    "href": "http://localhost:8777/v2/resources/bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                    "rel": "self"
                  }, 
                  {
                    "href": "http://localhost:8777/v2/meters/volume?q.field=resource_id&q.value=bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                    "rel": "volume"
                  }
                ], 
                "metadata": {
                  "name1": "value1", 
                  "name2": "value2"
                }, 
                "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                "source": "openstack", 
                "timestamp": "2013-11-21T12:33:08.189843", 
                "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff"
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows information for a specified resource, by resource ID.", 
        "tags": [
          "resources"
        ], 
        "title": "Show resource information"
      }
    ], 
    "/v2/samples": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "listSamples", 
        "method": "get", 
        "parameters": [
          {
            "description": "Filter rules for the samples to be returned.", 
            "format": "", 
            "in": "query", 
            "name": "q", 
            "required": false, 
            "type": "array"
          }, 
          {
            "description": "Requests a specified page size of returned items from the query.\nReturns a number of items up to the specified limit value. Use the\n``limit`` parameter to make an initial limited request and use the\nID of the last-seen item from the response as the ``marker``\nparameter value in a subsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "limit", 
            "required": false, 
            "type": "integer"
          }, 
          {
            "description": "Specifies the ID of the last-seen item. Use the ``limit`` parameter\nto make an initial limited request and use the ID of the last-seen\nitem from the response as the ``marker`` parameter value in a\nsubsequent limited request.", 
            "format": "", 
            "in": "query", 
            "name": "marker", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": [
                {
                  "id": "8db08c68-bc70-11e4-a8c4-fa163e1d1a9b", 
                  "metadata": {
                    "name1": "value1", 
                    "name2": "value2"
                  }, 
                  "meter": "instance", 
                  "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                  "recorded_at": "2015-02-24T22:00:32.747930", 
                  "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                  "source": "openstack", 
                  "timestamp": "2015-02-24T22:00:32.747930", 
                  "type": "gauge", 
                  "unit": "instance", 
                  "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff", 
                  "volume": 1.0
                }
              ]
            }, 
            "headers": {}
          }
        }, 
        "summary": "Lists all known samples, based on the data recorded so far.", 
        "tags": [
          "samples"
        ], 
        "title": "List samples"
      }
    ], 
    "/v2/samples/{sample_id}": [
      {
        "consumes": [
          "application/json"
        ], 
        "description": "", 
        "examples": {}, 
        "id": "showSample", 
        "method": "get", 
        "parameters": [
          {
            "description": "The UUID of the sample.", 
            "format": "", 
            "in": "path", 
            "name": "sample_id", 
            "required": false, 
            "type": "string"
          }
        ], 
        "produces": [
          "application/json"
        ], 
        "responses": {
          "200": {
            "examples": {
              "application/json": {
                "id": "8db08c68-bc70-11e4-a8c4-fa163e1d1a9b", 
                "metadata": {
                  "name1": "value1", 
                  "name2": "value2"
                }, 
                "meter": "instance", 
                "project_id": "35b17138-b364-4e6a-a131-8f3099c5be68", 
                "recorded_at": "2015-02-24T22:00:32.747930", 
                "resource_id": "bd9431c1-8d69-4ad3-803a-8d4a6b89fd36", 
                "source": "openstack", 
                "timestamp": "2015-02-24T22:00:32.747930", 
                "type": "gauge", 
                "unit": "instance", 
                "user_id": "efd87807-12d2-4b38-9c70-5f5c2ac427ff", 
                "volume": 1.0
              }
            }, 
            "headers": {}
          }
        }, 
        "summary": "Shows information for a specified sample, by sample ID.", 
        "tags": [
          "samples"
        ], 
        "title": "Show sample"
      }
    ]
  }, 
  "schemes": {}, 
  "securityDefinitions": {}, 
  "swagger": "2.0", 
  "tags": [
    {
      "description": "Alarms", 
      "name": "alarms", 
      "summary": "Lists, creates, gets details for, updates, and deletes alarms."
    }, 
    {
      "description": "Meters", 
      "name": "meters", 
      "summary": "Creates, lists all, and lists samples for meters. Computes and\nlists statistics for samples in a specified time range.\n\nFor list operations, if you do not explicitly set the ``limit``\nquery parameter, a default limit is applied. The default limit is\nthe ``default_api_return_limit`` configuration option value."
    }, 
    {
      "description": "Samples", 
      "name": "samples", 
      "summary": "Lists all samples and gets information for a specified sample.\n\nFor list operations, if you do not explicitly set the ``limit``\nquery parameter, a default limit is applied. The default limit is\nthe ``default_api_return_limit`` configuration option value."
    }, 
    {
      "description": "Resources", 
      "name": "resources", 
      "summary": "Lists all and gets information for resources."
    }, 
    {
      "description": "Capabilities", 
      "name": "capabilities", 
      "summary": "Gets information for API and storage capabilities.\n\nThe Telemetry service enables you to store samples, events, and\nalarm definitions in supported database back ends. The\n``capabilities`` resource enables you to list the capabilities that\na database supports.\n\nThe ``capabilities`` resource returns a flattened dictionary of\ncapability properties, each with an associated boolean value. A\nvalue of ``true`` indicates that the corresponding capability is\navailable in the back end.\n\nOptionally, you can configure separate database back ends for\nsamples, events, and alarm definitions. The ``capabilities``\nresponse body shows a value of ``true`` to indicate that the\nsamples, events, or alarm definitions database is ready to use in a\nproduction environment."
    }
  ]
}